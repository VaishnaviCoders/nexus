
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TeacherProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TeacherProfile
 * 
 */
export type TeacherProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$TeacherProfilePayload>

export type AggregateTeacherProfile = {
  _count: TeacherProfileCountAggregateOutputType | null
  _avg: TeacherProfileAvgAggregateOutputType | null
  _sum: TeacherProfileSumAggregateOutputType | null
  _min: TeacherProfileMinAggregateOutputType | null
  _max: TeacherProfileMaxAggregateOutputType | null
}

export type TeacherProfileAvgAggregateOutputType = {
  experienceInYears: number | null
}

export type TeacherProfileSumAggregateOutputType = {
  experienceInYears: number | null
}

export type TeacherProfileMinAggregateOutputType = {
  id: string | null
  teacherId: string | null
  contactEmail: string | null
  contactPhone: string | null
  address: string | null
  city: string | null
  state: string | null
  dateOfBirth: Date | null
  qualification: string | null
  experienceInYears: number | null
  resumeUrl: string | null
  joinedAt: Date | null
  bio: string | null
  teachingPhilosophy: string | null
  idProofUrl: string | null
  linkedinPortfolio: string | null
}

export type TeacherProfileMaxAggregateOutputType = {
  id: string | null
  teacherId: string | null
  contactEmail: string | null
  contactPhone: string | null
  address: string | null
  city: string | null
  state: string | null
  dateOfBirth: Date | null
  qualification: string | null
  experienceInYears: number | null
  resumeUrl: string | null
  joinedAt: Date | null
  bio: string | null
  teachingPhilosophy: string | null
  idProofUrl: string | null
  linkedinPortfolio: string | null
}

export type TeacherProfileCountAggregateOutputType = {
  id: number
  teacherId: number
  contactEmail: number
  contactPhone: number
  address: number
  city: number
  state: number
  dateOfBirth: number
  qualification: number
  experienceInYears: number
  resumeUrl: number
  joinedAt: number
  bio: number
  teachingPhilosophy: number
  specializedSubjects: number
  preferredGrades: number
  idProofUrl: number
  linkedinPortfolio: number
  languagesKnown: number
  certificateUrls: number
  _all: number
}


export type TeacherProfileAvgAggregateInputType = {
  experienceInYears?: true
}

export type TeacherProfileSumAggregateInputType = {
  experienceInYears?: true
}

export type TeacherProfileMinAggregateInputType = {
  id?: true
  teacherId?: true
  contactEmail?: true
  contactPhone?: true
  address?: true
  city?: true
  state?: true
  dateOfBirth?: true
  qualification?: true
  experienceInYears?: true
  resumeUrl?: true
  joinedAt?: true
  bio?: true
  teachingPhilosophy?: true
  idProofUrl?: true
  linkedinPortfolio?: true
}

export type TeacherProfileMaxAggregateInputType = {
  id?: true
  teacherId?: true
  contactEmail?: true
  contactPhone?: true
  address?: true
  city?: true
  state?: true
  dateOfBirth?: true
  qualification?: true
  experienceInYears?: true
  resumeUrl?: true
  joinedAt?: true
  bio?: true
  teachingPhilosophy?: true
  idProofUrl?: true
  linkedinPortfolio?: true
}

export type TeacherProfileCountAggregateInputType = {
  id?: true
  teacherId?: true
  contactEmail?: true
  contactPhone?: true
  address?: true
  city?: true
  state?: true
  dateOfBirth?: true
  qualification?: true
  experienceInYears?: true
  resumeUrl?: true
  joinedAt?: true
  bio?: true
  teachingPhilosophy?: true
  specializedSubjects?: true
  preferredGrades?: true
  idProofUrl?: true
  linkedinPortfolio?: true
  languagesKnown?: true
  certificateUrls?: true
  _all?: true
}

export type TeacherProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeacherProfile to aggregate.
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherProfiles to fetch.
   */
  orderBy?: Prisma.TeacherProfileOrderByWithRelationInput | Prisma.TeacherProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeacherProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeacherProfiles
  **/
  _count?: true | TeacherProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TeacherProfileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TeacherProfileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeacherProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeacherProfileMaxAggregateInputType
}

export type GetTeacherProfileAggregateType<T extends TeacherProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateTeacherProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeacherProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateTeacherProfile[P]>
}




export type TeacherProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeacherProfileWhereInput
  orderBy?: Prisma.TeacherProfileOrderByWithAggregationInput | Prisma.TeacherProfileOrderByWithAggregationInput[]
  by: Prisma.TeacherProfileScalarFieldEnum[] | Prisma.TeacherProfileScalarFieldEnum
  having?: Prisma.TeacherProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeacherProfileCountAggregateInputType | true
  _avg?: TeacherProfileAvgAggregateInputType
  _sum?: TeacherProfileSumAggregateInputType
  _min?: TeacherProfileMinAggregateInputType
  _max?: TeacherProfileMaxAggregateInputType
}

export type TeacherProfileGroupByOutputType = {
  id: string
  teacherId: string
  contactEmail: string
  contactPhone: string
  address: string
  city: string | null
  state: string | null
  dateOfBirth: Date
  qualification: string
  experienceInYears: number
  resumeUrl: string | null
  joinedAt: Date
  bio: string | null
  teachingPhilosophy: string | null
  specializedSubjects: string[]
  preferredGrades: string[]
  idProofUrl: string
  linkedinPortfolio: string | null
  languagesKnown: string[]
  certificateUrls: string[]
  _count: TeacherProfileCountAggregateOutputType | null
  _avg: TeacherProfileAvgAggregateOutputType | null
  _sum: TeacherProfileSumAggregateOutputType | null
  _min: TeacherProfileMinAggregateOutputType | null
  _max: TeacherProfileMaxAggregateOutputType | null
}

type GetTeacherProfileGroupByPayload<T extends TeacherProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeacherProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeacherProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeacherProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeacherProfileGroupByOutputType[P]>
      }
    >
  >



export type TeacherProfileWhereInput = {
  AND?: Prisma.TeacherProfileWhereInput | Prisma.TeacherProfileWhereInput[]
  OR?: Prisma.TeacherProfileWhereInput[]
  NOT?: Prisma.TeacherProfileWhereInput | Prisma.TeacherProfileWhereInput[]
  id?: Prisma.StringFilter<"TeacherProfile"> | string
  teacherId?: Prisma.StringFilter<"TeacherProfile"> | string
  contactEmail?: Prisma.StringFilter<"TeacherProfile"> | string
  contactPhone?: Prisma.StringFilter<"TeacherProfile"> | string
  address?: Prisma.StringFilter<"TeacherProfile"> | string
  city?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  state?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  dateOfBirth?: Prisma.DateTimeFilter<"TeacherProfile"> | Date | string
  qualification?: Prisma.StringFilter<"TeacherProfile"> | string
  experienceInYears?: Prisma.IntFilter<"TeacherProfile"> | number
  resumeUrl?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  joinedAt?: Prisma.DateTimeFilter<"TeacherProfile"> | Date | string
  bio?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  teachingPhilosophy?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  specializedSubjects?: Prisma.StringNullableListFilter<"TeacherProfile">
  preferredGrades?: Prisma.StringNullableListFilter<"TeacherProfile">
  idProofUrl?: Prisma.StringFilter<"TeacherProfile"> | string
  linkedinPortfolio?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  languagesKnown?: Prisma.StringNullableListFilter<"TeacherProfile">
  certificateUrls?: Prisma.StringNullableListFilter<"TeacherProfile">
  teacher?: Prisma.XOR<Prisma.TeacherScalarRelationFilter, Prisma.TeacherWhereInput>
}

export type TeacherProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  contactEmail?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  state?: Prisma.SortOrderInput | Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  qualification?: Prisma.SortOrder
  experienceInYears?: Prisma.SortOrder
  resumeUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  bio?: Prisma.SortOrderInput | Prisma.SortOrder
  teachingPhilosophy?: Prisma.SortOrderInput | Prisma.SortOrder
  specializedSubjects?: Prisma.SortOrder
  preferredGrades?: Prisma.SortOrder
  idProofUrl?: Prisma.SortOrder
  linkedinPortfolio?: Prisma.SortOrderInput | Prisma.SortOrder
  languagesKnown?: Prisma.SortOrder
  certificateUrls?: Prisma.SortOrder
  teacher?: Prisma.TeacherOrderByWithRelationInput
  _relevance?: Prisma.TeacherProfileOrderByRelevanceInput
}

export type TeacherProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  teacherId?: string
  AND?: Prisma.TeacherProfileWhereInput | Prisma.TeacherProfileWhereInput[]
  OR?: Prisma.TeacherProfileWhereInput[]
  NOT?: Prisma.TeacherProfileWhereInput | Prisma.TeacherProfileWhereInput[]
  contactEmail?: Prisma.StringFilter<"TeacherProfile"> | string
  contactPhone?: Prisma.StringFilter<"TeacherProfile"> | string
  address?: Prisma.StringFilter<"TeacherProfile"> | string
  city?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  state?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  dateOfBirth?: Prisma.DateTimeFilter<"TeacherProfile"> | Date | string
  qualification?: Prisma.StringFilter<"TeacherProfile"> | string
  experienceInYears?: Prisma.IntFilter<"TeacherProfile"> | number
  resumeUrl?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  joinedAt?: Prisma.DateTimeFilter<"TeacherProfile"> | Date | string
  bio?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  teachingPhilosophy?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  specializedSubjects?: Prisma.StringNullableListFilter<"TeacherProfile">
  preferredGrades?: Prisma.StringNullableListFilter<"TeacherProfile">
  idProofUrl?: Prisma.StringFilter<"TeacherProfile"> | string
  linkedinPortfolio?: Prisma.StringNullableFilter<"TeacherProfile"> | string | null
  languagesKnown?: Prisma.StringNullableListFilter<"TeacherProfile">
  certificateUrls?: Prisma.StringNullableListFilter<"TeacherProfile">
  teacher?: Prisma.XOR<Prisma.TeacherScalarRelationFilter, Prisma.TeacherWhereInput>
}, "id" | "teacherId">

export type TeacherProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  contactEmail?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  state?: Prisma.SortOrderInput | Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  qualification?: Prisma.SortOrder
  experienceInYears?: Prisma.SortOrder
  resumeUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  bio?: Prisma.SortOrderInput | Prisma.SortOrder
  teachingPhilosophy?: Prisma.SortOrderInput | Prisma.SortOrder
  specializedSubjects?: Prisma.SortOrder
  preferredGrades?: Prisma.SortOrder
  idProofUrl?: Prisma.SortOrder
  linkedinPortfolio?: Prisma.SortOrderInput | Prisma.SortOrder
  languagesKnown?: Prisma.SortOrder
  certificateUrls?: Prisma.SortOrder
  _count?: Prisma.TeacherProfileCountOrderByAggregateInput
  _avg?: Prisma.TeacherProfileAvgOrderByAggregateInput
  _max?: Prisma.TeacherProfileMaxOrderByAggregateInput
  _min?: Prisma.TeacherProfileMinOrderByAggregateInput
  _sum?: Prisma.TeacherProfileSumOrderByAggregateInput
}

export type TeacherProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeacherProfileScalarWhereWithAggregatesInput | Prisma.TeacherProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeacherProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeacherProfileScalarWhereWithAggregatesInput | Prisma.TeacherProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  teacherId?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  contactEmail?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  contactPhone?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  address?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  city?: Prisma.StringNullableWithAggregatesFilter<"TeacherProfile"> | string | null
  state?: Prisma.StringNullableWithAggregatesFilter<"TeacherProfile"> | string | null
  dateOfBirth?: Prisma.DateTimeWithAggregatesFilter<"TeacherProfile"> | Date | string
  qualification?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  experienceInYears?: Prisma.IntWithAggregatesFilter<"TeacherProfile"> | number
  resumeUrl?: Prisma.StringNullableWithAggregatesFilter<"TeacherProfile"> | string | null
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"TeacherProfile"> | Date | string
  bio?: Prisma.StringNullableWithAggregatesFilter<"TeacherProfile"> | string | null
  teachingPhilosophy?: Prisma.StringNullableWithAggregatesFilter<"TeacherProfile"> | string | null
  specializedSubjects?: Prisma.StringNullableListFilter<"TeacherProfile">
  preferredGrades?: Prisma.StringNullableListFilter<"TeacherProfile">
  idProofUrl?: Prisma.StringWithAggregatesFilter<"TeacherProfile"> | string
  linkedinPortfolio?: Prisma.StringNullableWithAggregatesFilter<"TeacherProfile"> | string | null
  languagesKnown?: Prisma.StringNullableListFilter<"TeacherProfile">
  certificateUrls?: Prisma.StringNullableListFilter<"TeacherProfile">
}

export type TeacherProfileCreateInput = {
  id?: string
  contactEmail: string
  contactPhone: string
  address: string
  city?: string | null
  state?: string | null
  dateOfBirth: Date | string
  qualification: string
  experienceInYears: number
  resumeUrl?: string | null
  joinedAt: Date | string
  bio?: string | null
  teachingPhilosophy?: string | null
  specializedSubjects?: Prisma.TeacherProfileCreatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileCreatepreferredGradesInput | string[]
  idProofUrl: string
  linkedinPortfolio?: string | null
  languagesKnown?: Prisma.TeacherProfileCreatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileCreatecertificateUrlsInput | string[]
  teacher: Prisma.TeacherCreateNestedOneWithoutProfileInput
}

export type TeacherProfileUncheckedCreateInput = {
  id?: string
  teacherId: string
  contactEmail: string
  contactPhone: string
  address: string
  city?: string | null
  state?: string | null
  dateOfBirth: Date | string
  qualification: string
  experienceInYears: number
  resumeUrl?: string | null
  joinedAt: Date | string
  bio?: string | null
  teachingPhilosophy?: string | null
  specializedSubjects?: Prisma.TeacherProfileCreatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileCreatepreferredGradesInput | string[]
  idProofUrl: string
  linkedinPortfolio?: string | null
  languagesKnown?: Prisma.TeacherProfileCreatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileCreatecertificateUrlsInput | string[]
}

export type TeacherProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contactEmail?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qualification?: Prisma.StringFieldUpdateOperationsInput | string
  experienceInYears?: Prisma.IntFieldUpdateOperationsInput | number
  resumeUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachingPhilosophy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  specializedSubjects?: Prisma.TeacherProfileUpdatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileUpdatepreferredGradesInput | string[]
  idProofUrl?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinPortfolio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  languagesKnown?: Prisma.TeacherProfileUpdatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileUpdatecertificateUrlsInput | string[]
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutProfileNestedInput
}

export type TeacherProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  contactEmail?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qualification?: Prisma.StringFieldUpdateOperationsInput | string
  experienceInYears?: Prisma.IntFieldUpdateOperationsInput | number
  resumeUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachingPhilosophy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  specializedSubjects?: Prisma.TeacherProfileUpdatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileUpdatepreferredGradesInput | string[]
  idProofUrl?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinPortfolio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  languagesKnown?: Prisma.TeacherProfileUpdatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileUpdatecertificateUrlsInput | string[]
}

export type TeacherProfileCreateManyInput = {
  id?: string
  teacherId: string
  contactEmail: string
  contactPhone: string
  address: string
  city?: string | null
  state?: string | null
  dateOfBirth: Date | string
  qualification: string
  experienceInYears: number
  resumeUrl?: string | null
  joinedAt: Date | string
  bio?: string | null
  teachingPhilosophy?: string | null
  specializedSubjects?: Prisma.TeacherProfileCreatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileCreatepreferredGradesInput | string[]
  idProofUrl: string
  linkedinPortfolio?: string | null
  languagesKnown?: Prisma.TeacherProfileCreatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileCreatecertificateUrlsInput | string[]
}

export type TeacherProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contactEmail?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qualification?: Prisma.StringFieldUpdateOperationsInput | string
  experienceInYears?: Prisma.IntFieldUpdateOperationsInput | number
  resumeUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachingPhilosophy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  specializedSubjects?: Prisma.TeacherProfileUpdatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileUpdatepreferredGradesInput | string[]
  idProofUrl?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinPortfolio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  languagesKnown?: Prisma.TeacherProfileUpdatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileUpdatecertificateUrlsInput | string[]
}

export type TeacherProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  contactEmail?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qualification?: Prisma.StringFieldUpdateOperationsInput | string
  experienceInYears?: Prisma.IntFieldUpdateOperationsInput | number
  resumeUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachingPhilosophy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  specializedSubjects?: Prisma.TeacherProfileUpdatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileUpdatepreferredGradesInput | string[]
  idProofUrl?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinPortfolio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  languagesKnown?: Prisma.TeacherProfileUpdatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileUpdatecertificateUrlsInput | string[]
}

export type TeacherProfileNullableScalarRelationFilter = {
  is?: Prisma.TeacherProfileWhereInput | null
  isNot?: Prisma.TeacherProfileWhereInput | null
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type TeacherProfileOrderByRelevanceInput = {
  fields: Prisma.TeacherProfileOrderByRelevanceFieldEnum | Prisma.TeacherProfileOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TeacherProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  contactEmail?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  qualification?: Prisma.SortOrder
  experienceInYears?: Prisma.SortOrder
  resumeUrl?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  teachingPhilosophy?: Prisma.SortOrder
  specializedSubjects?: Prisma.SortOrder
  preferredGrades?: Prisma.SortOrder
  idProofUrl?: Prisma.SortOrder
  linkedinPortfolio?: Prisma.SortOrder
  languagesKnown?: Prisma.SortOrder
  certificateUrls?: Prisma.SortOrder
}

export type TeacherProfileAvgOrderByAggregateInput = {
  experienceInYears?: Prisma.SortOrder
}

export type TeacherProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  contactEmail?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  qualification?: Prisma.SortOrder
  experienceInYears?: Prisma.SortOrder
  resumeUrl?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  teachingPhilosophy?: Prisma.SortOrder
  idProofUrl?: Prisma.SortOrder
  linkedinPortfolio?: Prisma.SortOrder
}

export type TeacherProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  contactEmail?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  qualification?: Prisma.SortOrder
  experienceInYears?: Prisma.SortOrder
  resumeUrl?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  teachingPhilosophy?: Prisma.SortOrder
  idProofUrl?: Prisma.SortOrder
  linkedinPortfolio?: Prisma.SortOrder
}

export type TeacherProfileSumOrderByAggregateInput = {
  experienceInYears?: Prisma.SortOrder
}

export type TeacherProfileCreateNestedOneWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TeacherProfileCreateWithoutTeacherInput, Prisma.TeacherProfileUncheckedCreateWithoutTeacherInput>
  connectOrCreate?: Prisma.TeacherProfileCreateOrConnectWithoutTeacherInput
  connect?: Prisma.TeacherProfileWhereUniqueInput
}

export type TeacherProfileUncheckedCreateNestedOneWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TeacherProfileCreateWithoutTeacherInput, Prisma.TeacherProfileUncheckedCreateWithoutTeacherInput>
  connectOrCreate?: Prisma.TeacherProfileCreateOrConnectWithoutTeacherInput
  connect?: Prisma.TeacherProfileWhereUniqueInput
}

export type TeacherProfileUpdateOneWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherProfileCreateWithoutTeacherInput, Prisma.TeacherProfileUncheckedCreateWithoutTeacherInput>
  connectOrCreate?: Prisma.TeacherProfileCreateOrConnectWithoutTeacherInput
  upsert?: Prisma.TeacherProfileUpsertWithoutTeacherInput
  disconnect?: Prisma.TeacherProfileWhereInput | boolean
  delete?: Prisma.TeacherProfileWhereInput | boolean
  connect?: Prisma.TeacherProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherProfileUpdateToOneWithWhereWithoutTeacherInput, Prisma.TeacherProfileUpdateWithoutTeacherInput>, Prisma.TeacherProfileUncheckedUpdateWithoutTeacherInput>
}

export type TeacherProfileUncheckedUpdateOneWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherProfileCreateWithoutTeacherInput, Prisma.TeacherProfileUncheckedCreateWithoutTeacherInput>
  connectOrCreate?: Prisma.TeacherProfileCreateOrConnectWithoutTeacherInput
  upsert?: Prisma.TeacherProfileUpsertWithoutTeacherInput
  disconnect?: Prisma.TeacherProfileWhereInput | boolean
  delete?: Prisma.TeacherProfileWhereInput | boolean
  connect?: Prisma.TeacherProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherProfileUpdateToOneWithWhereWithoutTeacherInput, Prisma.TeacherProfileUpdateWithoutTeacherInput>, Prisma.TeacherProfileUncheckedUpdateWithoutTeacherInput>
}

export type TeacherProfileCreatespecializedSubjectsInput = {
  set: string[]
}

export type TeacherProfileCreatepreferredGradesInput = {
  set: string[]
}

export type TeacherProfileCreatelanguagesKnownInput = {
  set: string[]
}

export type TeacherProfileCreatecertificateUrlsInput = {
  set: string[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TeacherProfileUpdatespecializedSubjectsInput = {
  set?: string[]
  push?: string | string[]
}

export type TeacherProfileUpdatepreferredGradesInput = {
  set?: string[]
  push?: string | string[]
}

export type TeacherProfileUpdatelanguagesKnownInput = {
  set?: string[]
  push?: string | string[]
}

export type TeacherProfileUpdatecertificateUrlsInput = {
  set?: string[]
  push?: string | string[]
}

export type TeacherProfileCreateWithoutTeacherInput = {
  id?: string
  contactEmail: string
  contactPhone: string
  address: string
  city?: string | null
  state?: string | null
  dateOfBirth: Date | string
  qualification: string
  experienceInYears: number
  resumeUrl?: string | null
  joinedAt: Date | string
  bio?: string | null
  teachingPhilosophy?: string | null
  specializedSubjects?: Prisma.TeacherProfileCreatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileCreatepreferredGradesInput | string[]
  idProofUrl: string
  linkedinPortfolio?: string | null
  languagesKnown?: Prisma.TeacherProfileCreatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileCreatecertificateUrlsInput | string[]
}

export type TeacherProfileUncheckedCreateWithoutTeacherInput = {
  id?: string
  contactEmail: string
  contactPhone: string
  address: string
  city?: string | null
  state?: string | null
  dateOfBirth: Date | string
  qualification: string
  experienceInYears: number
  resumeUrl?: string | null
  joinedAt: Date | string
  bio?: string | null
  teachingPhilosophy?: string | null
  specializedSubjects?: Prisma.TeacherProfileCreatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileCreatepreferredGradesInput | string[]
  idProofUrl: string
  linkedinPortfolio?: string | null
  languagesKnown?: Prisma.TeacherProfileCreatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileCreatecertificateUrlsInput | string[]
}

export type TeacherProfileCreateOrConnectWithoutTeacherInput = {
  where: Prisma.TeacherProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherProfileCreateWithoutTeacherInput, Prisma.TeacherProfileUncheckedCreateWithoutTeacherInput>
}

export type TeacherProfileUpsertWithoutTeacherInput = {
  update: Prisma.XOR<Prisma.TeacherProfileUpdateWithoutTeacherInput, Prisma.TeacherProfileUncheckedUpdateWithoutTeacherInput>
  create: Prisma.XOR<Prisma.TeacherProfileCreateWithoutTeacherInput, Prisma.TeacherProfileUncheckedCreateWithoutTeacherInput>
  where?: Prisma.TeacherProfileWhereInput
}

export type TeacherProfileUpdateToOneWithWhereWithoutTeacherInput = {
  where?: Prisma.TeacherProfileWhereInput
  data: Prisma.XOR<Prisma.TeacherProfileUpdateWithoutTeacherInput, Prisma.TeacherProfileUncheckedUpdateWithoutTeacherInput>
}

export type TeacherProfileUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contactEmail?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qualification?: Prisma.StringFieldUpdateOperationsInput | string
  experienceInYears?: Prisma.IntFieldUpdateOperationsInput | number
  resumeUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachingPhilosophy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  specializedSubjects?: Prisma.TeacherProfileUpdatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileUpdatepreferredGradesInput | string[]
  idProofUrl?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinPortfolio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  languagesKnown?: Prisma.TeacherProfileUpdatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileUpdatecertificateUrlsInput | string[]
}

export type TeacherProfileUncheckedUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contactEmail?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qualification?: Prisma.StringFieldUpdateOperationsInput | string
  experienceInYears?: Prisma.IntFieldUpdateOperationsInput | number
  resumeUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachingPhilosophy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  specializedSubjects?: Prisma.TeacherProfileUpdatespecializedSubjectsInput | string[]
  preferredGrades?: Prisma.TeacherProfileUpdatepreferredGradesInput | string[]
  idProofUrl?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinPortfolio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  languagesKnown?: Prisma.TeacherProfileUpdatelanguagesKnownInput | string[]
  certificateUrls?: Prisma.TeacherProfileUpdatecertificateUrlsInput | string[]
}



export type TeacherProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  contactEmail?: boolean
  contactPhone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  dateOfBirth?: boolean
  qualification?: boolean
  experienceInYears?: boolean
  resumeUrl?: boolean
  joinedAt?: boolean
  bio?: boolean
  teachingPhilosophy?: boolean
  specializedSubjects?: boolean
  preferredGrades?: boolean
  idProofUrl?: boolean
  linkedinPortfolio?: boolean
  languagesKnown?: boolean
  certificateUrls?: boolean
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teacherProfile"]>

export type TeacherProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  contactEmail?: boolean
  contactPhone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  dateOfBirth?: boolean
  qualification?: boolean
  experienceInYears?: boolean
  resumeUrl?: boolean
  joinedAt?: boolean
  bio?: boolean
  teachingPhilosophy?: boolean
  specializedSubjects?: boolean
  preferredGrades?: boolean
  idProofUrl?: boolean
  linkedinPortfolio?: boolean
  languagesKnown?: boolean
  certificateUrls?: boolean
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teacherProfile"]>

export type TeacherProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  contactEmail?: boolean
  contactPhone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  dateOfBirth?: boolean
  qualification?: boolean
  experienceInYears?: boolean
  resumeUrl?: boolean
  joinedAt?: boolean
  bio?: boolean
  teachingPhilosophy?: boolean
  specializedSubjects?: boolean
  preferredGrades?: boolean
  idProofUrl?: boolean
  linkedinPortfolio?: boolean
  languagesKnown?: boolean
  certificateUrls?: boolean
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teacherProfile"]>

export type TeacherProfileSelectScalar = {
  id?: boolean
  teacherId?: boolean
  contactEmail?: boolean
  contactPhone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  dateOfBirth?: boolean
  qualification?: boolean
  experienceInYears?: boolean
  resumeUrl?: boolean
  joinedAt?: boolean
  bio?: boolean
  teachingPhilosophy?: boolean
  specializedSubjects?: boolean
  preferredGrades?: boolean
  idProofUrl?: boolean
  linkedinPortfolio?: boolean
  languagesKnown?: boolean
  certificateUrls?: boolean
}

export type TeacherProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "teacherId" | "contactEmail" | "contactPhone" | "address" | "city" | "state" | "dateOfBirth" | "qualification" | "experienceInYears" | "resumeUrl" | "joinedAt" | "bio" | "teachingPhilosophy" | "specializedSubjects" | "preferredGrades" | "idProofUrl" | "linkedinPortfolio" | "languagesKnown" | "certificateUrls", ExtArgs["result"]["teacherProfile"]>
export type TeacherProfileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
}
export type TeacherProfileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
}
export type TeacherProfileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
}

export type $TeacherProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeacherProfile"
  objects: {
    teacher: Prisma.$TeacherPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    teacherId: string
    contactEmail: string
    contactPhone: string
    address: string
    city: string | null
    state: string | null
    dateOfBirth: Date
    qualification: string
    experienceInYears: number
    resumeUrl: string | null
    joinedAt: Date
    bio: string | null
    teachingPhilosophy: string | null
    specializedSubjects: string[]
    preferredGrades: string[]
    idProofUrl: string
    linkedinPortfolio: string | null
    languagesKnown: string[]
    certificateUrls: string[]
  }, ExtArgs["result"]["teacherProfile"]>
  composites: {}
}

export type TeacherProfileGetPayload<S extends boolean | null | undefined | TeacherProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload, S>

export type TeacherProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeacherProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeacherProfileCountAggregateInputType | true
  }

export interface TeacherProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherProfile'], meta: { name: 'TeacherProfile' } }
  /**
   * Find zero or one TeacherProfile that matches the filter.
   * @param {TeacherProfileFindUniqueArgs} args - Arguments to find a TeacherProfile
   * @example
   * // Get one TeacherProfile
   * const teacherProfile = await prisma.teacherProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeacherProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, TeacherProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeacherProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeacherProfileFindUniqueOrThrowArgs} args - Arguments to find a TeacherProfile
   * @example
   * // Get one TeacherProfile
   * const teacherProfile = await prisma.teacherProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeacherProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeacherProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeacherProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileFindFirstArgs} args - Arguments to find a TeacherProfile
   * @example
   * // Get one TeacherProfile
   * const teacherProfile = await prisma.teacherProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeacherProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, TeacherProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeacherProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileFindFirstOrThrowArgs} args - Arguments to find a TeacherProfile
   * @example
   * // Get one TeacherProfile
   * const teacherProfile = await prisma.teacherProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeacherProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeacherProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeacherProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeacherProfiles
   * const teacherProfiles = await prisma.teacherProfile.findMany()
   * 
   * // Get first 10 TeacherProfiles
   * const teacherProfiles = await prisma.teacherProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teacherProfileWithIdOnly = await prisma.teacherProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeacherProfileFindManyArgs>(args?: Prisma.SelectSubset<T, TeacherProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeacherProfile.
   * @param {TeacherProfileCreateArgs} args - Arguments to create a TeacherProfile.
   * @example
   * // Create one TeacherProfile
   * const TeacherProfile = await prisma.teacherProfile.create({
   *   data: {
   *     // ... data to create a TeacherProfile
   *   }
   * })
   * 
   */
  create<T extends TeacherProfileCreateArgs>(args: Prisma.SelectSubset<T, TeacherProfileCreateArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeacherProfiles.
   * @param {TeacherProfileCreateManyArgs} args - Arguments to create many TeacherProfiles.
   * @example
   * // Create many TeacherProfiles
   * const teacherProfile = await prisma.teacherProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeacherProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, TeacherProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeacherProfiles and returns the data saved in the database.
   * @param {TeacherProfileCreateManyAndReturnArgs} args - Arguments to create many TeacherProfiles.
   * @example
   * // Create many TeacherProfiles
   * const teacherProfile = await prisma.teacherProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeacherProfiles and only return the `id`
   * const teacherProfileWithIdOnly = await prisma.teacherProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeacherProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeacherProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeacherProfile.
   * @param {TeacherProfileDeleteArgs} args - Arguments to delete one TeacherProfile.
   * @example
   * // Delete one TeacherProfile
   * const TeacherProfile = await prisma.teacherProfile.delete({
   *   where: {
   *     // ... filter to delete one TeacherProfile
   *   }
   * })
   * 
   */
  delete<T extends TeacherProfileDeleteArgs>(args: Prisma.SelectSubset<T, TeacherProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeacherProfile.
   * @param {TeacherProfileUpdateArgs} args - Arguments to update one TeacherProfile.
   * @example
   * // Update one TeacherProfile
   * const teacherProfile = await prisma.teacherProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeacherProfileUpdateArgs>(args: Prisma.SelectSubset<T, TeacherProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeacherProfiles.
   * @param {TeacherProfileDeleteManyArgs} args - Arguments to filter TeacherProfiles to delete.
   * @example
   * // Delete a few TeacherProfiles
   * const { count } = await prisma.teacherProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeacherProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeacherProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeacherProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeacherProfiles
   * const teacherProfile = await prisma.teacherProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeacherProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, TeacherProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeacherProfiles and returns the data updated in the database.
   * @param {TeacherProfileUpdateManyAndReturnArgs} args - Arguments to update many TeacherProfiles.
   * @example
   * // Update many TeacherProfiles
   * const teacherProfile = await prisma.teacherProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeacherProfiles and only return the `id`
   * const teacherProfileWithIdOnly = await prisma.teacherProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeacherProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeacherProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeacherProfile.
   * @param {TeacherProfileUpsertArgs} args - Arguments to update or create a TeacherProfile.
   * @example
   * // Update or create a TeacherProfile
   * const teacherProfile = await prisma.teacherProfile.upsert({
   *   create: {
   *     // ... data to create a TeacherProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeacherProfile we want to update
   *   }
   * })
   */
  upsert<T extends TeacherProfileUpsertArgs>(args: Prisma.SelectSubset<T, TeacherProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__TeacherProfileClient<runtime.Types.Result.GetResult<Prisma.$TeacherProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeacherProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileCountArgs} args - Arguments to filter TeacherProfiles to count.
   * @example
   * // Count the number of TeacherProfiles
   * const count = await prisma.teacherProfile.count({
   *   where: {
   *     // ... the filter for the TeacherProfiles we want to count
   *   }
   * })
  **/
  count<T extends TeacherProfileCountArgs>(
    args?: Prisma.Subset<T, TeacherProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeacherProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeacherProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeacherProfileAggregateArgs>(args: Prisma.Subset<T, TeacherProfileAggregateArgs>): Prisma.PrismaPromise<GetTeacherProfileAggregateType<T>>

  /**
   * Group by TeacherProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeacherProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeacherProfileGroupByArgs['orderBy'] }
      : { orderBy?: TeacherProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeacherProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeacherProfile model
 */
readonly fields: TeacherProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeacherProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeacherProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  teacher<T extends Prisma.TeacherDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeacherDefaultArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeacherProfile model
 */
export interface TeacherProfileFieldRefs {
  readonly id: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly teacherId: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly contactEmail: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly contactPhone: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly address: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly city: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly state: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly dateOfBirth: Prisma.FieldRef<"TeacherProfile", 'DateTime'>
  readonly qualification: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly experienceInYears: Prisma.FieldRef<"TeacherProfile", 'Int'>
  readonly resumeUrl: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly joinedAt: Prisma.FieldRef<"TeacherProfile", 'DateTime'>
  readonly bio: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly teachingPhilosophy: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly specializedSubjects: Prisma.FieldRef<"TeacherProfile", 'String[]'>
  readonly preferredGrades: Prisma.FieldRef<"TeacherProfile", 'String[]'>
  readonly idProofUrl: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly linkedinPortfolio: Prisma.FieldRef<"TeacherProfile", 'String'>
  readonly languagesKnown: Prisma.FieldRef<"TeacherProfile", 'String[]'>
  readonly certificateUrls: Prisma.FieldRef<"TeacherProfile", 'String[]'>
}
    

// Custom InputTypes
/**
 * TeacherProfile findUnique
 */
export type TeacherProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * Filter, which TeacherProfile to fetch.
   */
  where: Prisma.TeacherProfileWhereUniqueInput
}

/**
 * TeacherProfile findUniqueOrThrow
 */
export type TeacherProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * Filter, which TeacherProfile to fetch.
   */
  where: Prisma.TeacherProfileWhereUniqueInput
}

/**
 * TeacherProfile findFirst
 */
export type TeacherProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * Filter, which TeacherProfile to fetch.
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherProfiles to fetch.
   */
  orderBy?: Prisma.TeacherProfileOrderByWithRelationInput | Prisma.TeacherProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeacherProfiles.
   */
  cursor?: Prisma.TeacherProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeacherProfiles.
   */
  distinct?: Prisma.TeacherProfileScalarFieldEnum | Prisma.TeacherProfileScalarFieldEnum[]
}

/**
 * TeacherProfile findFirstOrThrow
 */
export type TeacherProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * Filter, which TeacherProfile to fetch.
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherProfiles to fetch.
   */
  orderBy?: Prisma.TeacherProfileOrderByWithRelationInput | Prisma.TeacherProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeacherProfiles.
   */
  cursor?: Prisma.TeacherProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeacherProfiles.
   */
  distinct?: Prisma.TeacherProfileScalarFieldEnum | Prisma.TeacherProfileScalarFieldEnum[]
}

/**
 * TeacherProfile findMany
 */
export type TeacherProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * Filter, which TeacherProfiles to fetch.
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherProfiles to fetch.
   */
  orderBy?: Prisma.TeacherProfileOrderByWithRelationInput | Prisma.TeacherProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeacherProfiles.
   */
  cursor?: Prisma.TeacherProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherProfiles.
   */
  skip?: number
  distinct?: Prisma.TeacherProfileScalarFieldEnum | Prisma.TeacherProfileScalarFieldEnum[]
}

/**
 * TeacherProfile create
 */
export type TeacherProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * The data needed to create a TeacherProfile.
   */
  data: Prisma.XOR<Prisma.TeacherProfileCreateInput, Prisma.TeacherProfileUncheckedCreateInput>
}

/**
 * TeacherProfile createMany
 */
export type TeacherProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeacherProfiles.
   */
  data: Prisma.TeacherProfileCreateManyInput | Prisma.TeacherProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeacherProfile createManyAndReturn
 */
export type TeacherProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * The data used to create many TeacherProfiles.
   */
  data: Prisma.TeacherProfileCreateManyInput | Prisma.TeacherProfileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TeacherProfile update
 */
export type TeacherProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * The data needed to update a TeacherProfile.
   */
  data: Prisma.XOR<Prisma.TeacherProfileUpdateInput, Prisma.TeacherProfileUncheckedUpdateInput>
  /**
   * Choose, which TeacherProfile to update.
   */
  where: Prisma.TeacherProfileWhereUniqueInput
}

/**
 * TeacherProfile updateMany
 */
export type TeacherProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeacherProfiles.
   */
  data: Prisma.XOR<Prisma.TeacherProfileUpdateManyMutationInput, Prisma.TeacherProfileUncheckedUpdateManyInput>
  /**
   * Filter which TeacherProfiles to update
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * Limit how many TeacherProfiles to update.
   */
  limit?: number
}

/**
 * TeacherProfile updateManyAndReturn
 */
export type TeacherProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * The data used to update TeacherProfiles.
   */
  data: Prisma.XOR<Prisma.TeacherProfileUpdateManyMutationInput, Prisma.TeacherProfileUncheckedUpdateManyInput>
  /**
   * Filter which TeacherProfiles to update
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * Limit how many TeacherProfiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TeacherProfile upsert
 */
export type TeacherProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * The filter to search for the TeacherProfile to update in case it exists.
   */
  where: Prisma.TeacherProfileWhereUniqueInput
  /**
   * In case the TeacherProfile found by the `where` argument doesn't exist, create a new TeacherProfile with this data.
   */
  create: Prisma.XOR<Prisma.TeacherProfileCreateInput, Prisma.TeacherProfileUncheckedCreateInput>
  /**
   * In case the TeacherProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeacherProfileUpdateInput, Prisma.TeacherProfileUncheckedUpdateInput>
}

/**
 * TeacherProfile delete
 */
export type TeacherProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
  /**
   * Filter which TeacherProfile to delete.
   */
  where: Prisma.TeacherProfileWhereUniqueInput
}

/**
 * TeacherProfile deleteMany
 */
export type TeacherProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeacherProfiles to delete
   */
  where?: Prisma.TeacherProfileWhereInput
  /**
   * Limit how many TeacherProfiles to delete.
   */
  limit?: number
}

/**
 * TeacherProfile without action
 */
export type TeacherProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherProfile
   */
  select?: Prisma.TeacherProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherProfile
   */
  omit?: Prisma.TeacherProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherProfileInclude<ExtArgs> | null
}
