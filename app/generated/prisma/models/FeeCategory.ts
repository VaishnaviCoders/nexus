
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FeeCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FeeCategory
 * 
 */
export type FeeCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$FeeCategoryPayload>

export type AggregateFeeCategory = {
  _count: FeeCategoryCountAggregateOutputType | null
  _min: FeeCategoryMinAggregateOutputType | null
  _max: FeeCategoryMaxAggregateOutputType | null
}

export type FeeCategoryMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  organizationId: string | null
}

export type FeeCategoryMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  organizationId: string | null
}

export type FeeCategoryCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  organizationId: number
  _all: number
}


export type FeeCategoryMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  organizationId?: true
}

export type FeeCategoryMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  organizationId?: true
}

export type FeeCategoryCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  organizationId?: true
  _all?: true
}

export type FeeCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeeCategory to aggregate.
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeeCategories to fetch.
   */
  orderBy?: Prisma.FeeCategoryOrderByWithRelationInput | Prisma.FeeCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeeCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeeCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeeCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FeeCategories
  **/
  _count?: true | FeeCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeeCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeeCategoryMaxAggregateInputType
}

export type GetFeeCategoryAggregateType<T extends FeeCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregateFeeCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeeCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateFeeCategory[P]>
}




export type FeeCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeeCategoryWhereInput
  orderBy?: Prisma.FeeCategoryOrderByWithAggregationInput | Prisma.FeeCategoryOrderByWithAggregationInput[]
  by: Prisma.FeeCategoryScalarFieldEnum[] | Prisma.FeeCategoryScalarFieldEnum
  having?: Prisma.FeeCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeeCategoryCountAggregateInputType | true
  _min?: FeeCategoryMinAggregateInputType
  _max?: FeeCategoryMaxAggregateInputType
}

export type FeeCategoryGroupByOutputType = {
  id: string
  name: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  organizationId: string
  _count: FeeCategoryCountAggregateOutputType | null
  _min: FeeCategoryMinAggregateOutputType | null
  _max: FeeCategoryMaxAggregateOutputType | null
}

type GetFeeCategoryGroupByPayload<T extends FeeCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeeCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeeCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeeCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeeCategoryGroupByOutputType[P]>
      }
    >
  >



export type FeeCategoryWhereInput = {
  AND?: Prisma.FeeCategoryWhereInput | Prisma.FeeCategoryWhereInput[]
  OR?: Prisma.FeeCategoryWhereInput[]
  NOT?: Prisma.FeeCategoryWhereInput | Prisma.FeeCategoryWhereInput[]
  id?: Prisma.StringFilter<"FeeCategory"> | string
  name?: Prisma.StringFilter<"FeeCategory"> | string
  description?: Prisma.StringNullableFilter<"FeeCategory"> | string | null
  createdAt?: Prisma.DateTimeFilter<"FeeCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeeCategory"> | Date | string
  organizationId?: Prisma.StringFilter<"FeeCategory"> | string
  fees?: Prisma.FeeListRelationFilter
  Organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}

export type FeeCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  fees?: Prisma.FeeOrderByRelationAggregateInput
  Organization?: Prisma.OrganizationOrderByWithRelationInput
  _relevance?: Prisma.FeeCategoryOrderByRelevanceInput
}

export type FeeCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name_organizationId?: Prisma.FeeCategoryNameOrganizationIdCompoundUniqueInput
  AND?: Prisma.FeeCategoryWhereInput | Prisma.FeeCategoryWhereInput[]
  OR?: Prisma.FeeCategoryWhereInput[]
  NOT?: Prisma.FeeCategoryWhereInput | Prisma.FeeCategoryWhereInput[]
  name?: Prisma.StringFilter<"FeeCategory"> | string
  description?: Prisma.StringNullableFilter<"FeeCategory"> | string | null
  createdAt?: Prisma.DateTimeFilter<"FeeCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeeCategory"> | Date | string
  organizationId?: Prisma.StringFilter<"FeeCategory"> | string
  fees?: Prisma.FeeListRelationFilter
  Organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}, "id" | "name_organizationId">

export type FeeCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  _count?: Prisma.FeeCategoryCountOrderByAggregateInput
  _max?: Prisma.FeeCategoryMaxOrderByAggregateInput
  _min?: Prisma.FeeCategoryMinOrderByAggregateInput
}

export type FeeCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeeCategoryScalarWhereWithAggregatesInput | Prisma.FeeCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeeCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeeCategoryScalarWhereWithAggregatesInput | Prisma.FeeCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FeeCategory"> | string
  name?: Prisma.StringWithAggregatesFilter<"FeeCategory"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"FeeCategory"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FeeCategory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FeeCategory"> | Date | string
  organizationId?: Prisma.StringWithAggregatesFilter<"FeeCategory"> | string
}

export type FeeCategoryCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fees?: Prisma.FeeCreateNestedManyWithoutFeeCategoryInput
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeCategoryInput
}

export type FeeCategoryUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutFeeCategoryInput
}

export type FeeCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fees?: Prisma.FeeUpdateManyWithoutFeeCategoryNestedInput
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeCategoryNestedInput
}

export type FeeCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  fees?: Prisma.FeeUncheckedUpdateManyWithoutFeeCategoryNestedInput
}

export type FeeCategoryCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
}

export type FeeCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeeCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeeCategoryListRelationFilter = {
  every?: Prisma.FeeCategoryWhereInput
  some?: Prisma.FeeCategoryWhereInput
  none?: Prisma.FeeCategoryWhereInput
}

export type FeeCategoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeeCategoryScalarRelationFilter = {
  is?: Prisma.FeeCategoryWhereInput
  isNot?: Prisma.FeeCategoryWhereInput
}

export type FeeCategoryOrderByRelevanceInput = {
  fields: Prisma.FeeCategoryOrderByRelevanceFieldEnum | Prisma.FeeCategoryOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FeeCategoryNameOrganizationIdCompoundUniqueInput = {
  name: string
  organizationId: string
}

export type FeeCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
}

export type FeeCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
}

export type FeeCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
}

export type FeeCategoryCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.FeeCategoryCreateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCategoryCreateWithoutOrganizationInput[] | Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput | Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.FeeCategoryCreateManyOrganizationInputEnvelope
  connect?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
}

export type FeeCategoryUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.FeeCategoryCreateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCategoryCreateWithoutOrganizationInput[] | Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput | Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.FeeCategoryCreateManyOrganizationInputEnvelope
  connect?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
}

export type FeeCategoryUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCategoryCreateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCategoryCreateWithoutOrganizationInput[] | Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput | Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.FeeCategoryUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.FeeCategoryUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.FeeCategoryCreateManyOrganizationInputEnvelope
  set?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  disconnect?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  delete?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  connect?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  update?: Prisma.FeeCategoryUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.FeeCategoryUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.FeeCategoryUpdateManyWithWhereWithoutOrganizationInput | Prisma.FeeCategoryUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.FeeCategoryScalarWhereInput | Prisma.FeeCategoryScalarWhereInput[]
}

export type FeeCategoryUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCategoryCreateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCategoryCreateWithoutOrganizationInput[] | Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput | Prisma.FeeCategoryCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.FeeCategoryUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.FeeCategoryUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.FeeCategoryCreateManyOrganizationInputEnvelope
  set?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  disconnect?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  delete?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  connect?: Prisma.FeeCategoryWhereUniqueInput | Prisma.FeeCategoryWhereUniqueInput[]
  update?: Prisma.FeeCategoryUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.FeeCategoryUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.FeeCategoryUpdateManyWithWhereWithoutOrganizationInput | Prisma.FeeCategoryUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.FeeCategoryScalarWhereInput | Prisma.FeeCategoryScalarWhereInput[]
}

export type FeeCategoryCreateNestedOneWithoutFeesInput = {
  create?: Prisma.XOR<Prisma.FeeCategoryCreateWithoutFeesInput, Prisma.FeeCategoryUncheckedCreateWithoutFeesInput>
  connectOrCreate?: Prisma.FeeCategoryCreateOrConnectWithoutFeesInput
  connect?: Prisma.FeeCategoryWhereUniqueInput
}

export type FeeCategoryUpdateOneRequiredWithoutFeesNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCategoryCreateWithoutFeesInput, Prisma.FeeCategoryUncheckedCreateWithoutFeesInput>
  connectOrCreate?: Prisma.FeeCategoryCreateOrConnectWithoutFeesInput
  upsert?: Prisma.FeeCategoryUpsertWithoutFeesInput
  connect?: Prisma.FeeCategoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FeeCategoryUpdateToOneWithWhereWithoutFeesInput, Prisma.FeeCategoryUpdateWithoutFeesInput>, Prisma.FeeCategoryUncheckedUpdateWithoutFeesInput>
}

export type FeeCategoryCreateWithoutOrganizationInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fees?: Prisma.FeeCreateNestedManyWithoutFeeCategoryInput
}

export type FeeCategoryUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fees?: Prisma.FeeUncheckedCreateNestedManyWithoutFeeCategoryInput
}

export type FeeCategoryCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.FeeCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCategoryCreateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput>
}

export type FeeCategoryCreateManyOrganizationInputEnvelope = {
  data: Prisma.FeeCategoryCreateManyOrganizationInput | Prisma.FeeCategoryCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type FeeCategoryUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.FeeCategoryWhereUniqueInput
  update: Prisma.XOR<Prisma.FeeCategoryUpdateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.FeeCategoryCreateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedCreateWithoutOrganizationInput>
}

export type FeeCategoryUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.FeeCategoryWhereUniqueInput
  data: Prisma.XOR<Prisma.FeeCategoryUpdateWithoutOrganizationInput, Prisma.FeeCategoryUncheckedUpdateWithoutOrganizationInput>
}

export type FeeCategoryUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.FeeCategoryScalarWhereInput
  data: Prisma.XOR<Prisma.FeeCategoryUpdateManyMutationInput, Prisma.FeeCategoryUncheckedUpdateManyWithoutOrganizationInput>
}

export type FeeCategoryScalarWhereInput = {
  AND?: Prisma.FeeCategoryScalarWhereInput | Prisma.FeeCategoryScalarWhereInput[]
  OR?: Prisma.FeeCategoryScalarWhereInput[]
  NOT?: Prisma.FeeCategoryScalarWhereInput | Prisma.FeeCategoryScalarWhereInput[]
  id?: Prisma.StringFilter<"FeeCategory"> | string
  name?: Prisma.StringFilter<"FeeCategory"> | string
  description?: Prisma.StringNullableFilter<"FeeCategory"> | string | null
  createdAt?: Prisma.DateTimeFilter<"FeeCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeeCategory"> | Date | string
  organizationId?: Prisma.StringFilter<"FeeCategory"> | string
}

export type FeeCategoryCreateWithoutFeesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeCategoryInput
}

export type FeeCategoryUncheckedCreateWithoutFeesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
}

export type FeeCategoryCreateOrConnectWithoutFeesInput = {
  where: Prisma.FeeCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCategoryCreateWithoutFeesInput, Prisma.FeeCategoryUncheckedCreateWithoutFeesInput>
}

export type FeeCategoryUpsertWithoutFeesInput = {
  update: Prisma.XOR<Prisma.FeeCategoryUpdateWithoutFeesInput, Prisma.FeeCategoryUncheckedUpdateWithoutFeesInput>
  create: Prisma.XOR<Prisma.FeeCategoryCreateWithoutFeesInput, Prisma.FeeCategoryUncheckedCreateWithoutFeesInput>
  where?: Prisma.FeeCategoryWhereInput
}

export type FeeCategoryUpdateToOneWithWhereWithoutFeesInput = {
  where?: Prisma.FeeCategoryWhereInput
  data: Prisma.XOR<Prisma.FeeCategoryUpdateWithoutFeesInput, Prisma.FeeCategoryUncheckedUpdateWithoutFeesInput>
}

export type FeeCategoryUpdateWithoutFeesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeCategoryNestedInput
}

export type FeeCategoryUncheckedUpdateWithoutFeesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeeCategoryCreateManyOrganizationInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeeCategoryUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fees?: Prisma.FeeUpdateManyWithoutFeeCategoryNestedInput
}

export type FeeCategoryUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fees?: Prisma.FeeUncheckedUpdateManyWithoutFeeCategoryNestedInput
}

export type FeeCategoryUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type FeeCategoryCountOutputType
 */

export type FeeCategoryCountOutputType = {
  fees: number
}

export type FeeCategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fees?: boolean | FeeCategoryCountOutputTypeCountFeesArgs
}

/**
 * FeeCategoryCountOutputType without action
 */
export type FeeCategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategoryCountOutputType
   */
  select?: Prisma.FeeCategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FeeCategoryCountOutputType without action
 */
export type FeeCategoryCountOutputTypeCountFeesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeeWhereInput
}


export type FeeCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  fees?: boolean | Prisma.FeeCategory$feesArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.FeeCategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feeCategory"]>

export type FeeCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feeCategory"]>

export type FeeCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feeCategory"]>

export type FeeCategorySelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
}

export type FeeCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "organizationId", ExtArgs["result"]["feeCategory"]>
export type FeeCategoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fees?: boolean | Prisma.FeeCategory$feesArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.FeeCategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type FeeCategoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type FeeCategoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $FeeCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FeeCategory"
  objects: {
    fees: Prisma.$FeePayload<ExtArgs>[]
    Organization: Prisma.$OrganizationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    organizationId: string
  }, ExtArgs["result"]["feeCategory"]>
  composites: {}
}

export type FeeCategoryGetPayload<S extends boolean | null | undefined | FeeCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload, S>

export type FeeCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeeCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeeCategoryCountAggregateInputType | true
  }

export interface FeeCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeCategory'], meta: { name: 'FeeCategory' } }
  /**
   * Find zero or one FeeCategory that matches the filter.
   * @param {FeeCategoryFindUniqueArgs} args - Arguments to find a FeeCategory
   * @example
   * // Get one FeeCategory
   * const feeCategory = await prisma.feeCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeeCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, FeeCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FeeCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeeCategoryFindUniqueOrThrowArgs} args - Arguments to find a FeeCategory
   * @example
   * // Get one FeeCategory
   * const feeCategory = await prisma.feeCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeeCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeeCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeeCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryFindFirstArgs} args - Arguments to find a FeeCategory
   * @example
   * // Get one FeeCategory
   * const feeCategory = await prisma.feeCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeeCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, FeeCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeeCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryFindFirstOrThrowArgs} args - Arguments to find a FeeCategory
   * @example
   * // Get one FeeCategory
   * const feeCategory = await prisma.feeCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeeCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeeCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FeeCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeeCategories
   * const feeCategories = await prisma.feeCategory.findMany()
   * 
   * // Get first 10 FeeCategories
   * const feeCategories = await prisma.feeCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const feeCategoryWithIdOnly = await prisma.feeCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeeCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, FeeCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FeeCategory.
   * @param {FeeCategoryCreateArgs} args - Arguments to create a FeeCategory.
   * @example
   * // Create one FeeCategory
   * const FeeCategory = await prisma.feeCategory.create({
   *   data: {
   *     // ... data to create a FeeCategory
   *   }
   * })
   * 
   */
  create<T extends FeeCategoryCreateArgs>(args: Prisma.SelectSubset<T, FeeCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FeeCategories.
   * @param {FeeCategoryCreateManyArgs} args - Arguments to create many FeeCategories.
   * @example
   * // Create many FeeCategories
   * const feeCategory = await prisma.feeCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeeCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, FeeCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeeCategories and returns the data saved in the database.
   * @param {FeeCategoryCreateManyAndReturnArgs} args - Arguments to create many FeeCategories.
   * @example
   * // Create many FeeCategories
   * const feeCategory = await prisma.feeCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FeeCategories and only return the `id`
   * const feeCategoryWithIdOnly = await prisma.feeCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeeCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeeCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FeeCategory.
   * @param {FeeCategoryDeleteArgs} args - Arguments to delete one FeeCategory.
   * @example
   * // Delete one FeeCategory
   * const FeeCategory = await prisma.feeCategory.delete({
   *   where: {
   *     // ... filter to delete one FeeCategory
   *   }
   * })
   * 
   */
  delete<T extends FeeCategoryDeleteArgs>(args: Prisma.SelectSubset<T, FeeCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FeeCategory.
   * @param {FeeCategoryUpdateArgs} args - Arguments to update one FeeCategory.
   * @example
   * // Update one FeeCategory
   * const feeCategory = await prisma.feeCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeeCategoryUpdateArgs>(args: Prisma.SelectSubset<T, FeeCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FeeCategories.
   * @param {FeeCategoryDeleteManyArgs} args - Arguments to filter FeeCategories to delete.
   * @example
   * // Delete a few FeeCategories
   * const { count } = await prisma.feeCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeeCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeeCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeeCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeeCategories
   * const feeCategory = await prisma.feeCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeeCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, FeeCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeeCategories and returns the data updated in the database.
   * @param {FeeCategoryUpdateManyAndReturnArgs} args - Arguments to update many FeeCategories.
   * @example
   * // Update many FeeCategories
   * const feeCategory = await prisma.feeCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FeeCategories and only return the `id`
   * const feeCategoryWithIdOnly = await prisma.feeCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeeCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeeCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FeeCategory.
   * @param {FeeCategoryUpsertArgs} args - Arguments to update or create a FeeCategory.
   * @example
   * // Update or create a FeeCategory
   * const feeCategory = await prisma.feeCategory.upsert({
   *   create: {
   *     // ... data to create a FeeCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeeCategory we want to update
   *   }
   * })
   */
  upsert<T extends FeeCategoryUpsertArgs>(args: Prisma.SelectSubset<T, FeeCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FeeCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryCountArgs} args - Arguments to filter FeeCategories to count.
   * @example
   * // Count the number of FeeCategories
   * const count = await prisma.feeCategory.count({
   *   where: {
   *     // ... the filter for the FeeCategories we want to count
   *   }
   * })
  **/
  count<T extends FeeCategoryCountArgs>(
    args?: Prisma.Subset<T, FeeCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeeCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeeCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeeCategoryAggregateArgs>(args: Prisma.Subset<T, FeeCategoryAggregateArgs>): Prisma.PrismaPromise<GetFeeCategoryAggregateType<T>>

  /**
   * Group by FeeCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeeCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeeCategoryGroupByArgs['orderBy'] }
      : { orderBy?: FeeCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeeCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FeeCategory model
 */
readonly fields: FeeCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FeeCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeeCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  fees<T extends Prisma.FeeCategory$feesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FeeCategory$feesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FeeCategory model
 */
export interface FeeCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"FeeCategory", 'String'>
  readonly name: Prisma.FieldRef<"FeeCategory", 'String'>
  readonly description: Prisma.FieldRef<"FeeCategory", 'String'>
  readonly createdAt: Prisma.FieldRef<"FeeCategory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FeeCategory", 'DateTime'>
  readonly organizationId: Prisma.FieldRef<"FeeCategory", 'String'>
}
    

// Custom InputTypes
/**
 * FeeCategory findUnique
 */
export type FeeCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * Filter, which FeeCategory to fetch.
   */
  where: Prisma.FeeCategoryWhereUniqueInput
}

/**
 * FeeCategory findUniqueOrThrow
 */
export type FeeCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * Filter, which FeeCategory to fetch.
   */
  where: Prisma.FeeCategoryWhereUniqueInput
}

/**
 * FeeCategory findFirst
 */
export type FeeCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * Filter, which FeeCategory to fetch.
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeeCategories to fetch.
   */
  orderBy?: Prisma.FeeCategoryOrderByWithRelationInput | Prisma.FeeCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeeCategories.
   */
  cursor?: Prisma.FeeCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeeCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeeCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeeCategories.
   */
  distinct?: Prisma.FeeCategoryScalarFieldEnum | Prisma.FeeCategoryScalarFieldEnum[]
}

/**
 * FeeCategory findFirstOrThrow
 */
export type FeeCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * Filter, which FeeCategory to fetch.
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeeCategories to fetch.
   */
  orderBy?: Prisma.FeeCategoryOrderByWithRelationInput | Prisma.FeeCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeeCategories.
   */
  cursor?: Prisma.FeeCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeeCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeeCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeeCategories.
   */
  distinct?: Prisma.FeeCategoryScalarFieldEnum | Prisma.FeeCategoryScalarFieldEnum[]
}

/**
 * FeeCategory findMany
 */
export type FeeCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * Filter, which FeeCategories to fetch.
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeeCategories to fetch.
   */
  orderBy?: Prisma.FeeCategoryOrderByWithRelationInput | Prisma.FeeCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FeeCategories.
   */
  cursor?: Prisma.FeeCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeeCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeeCategories.
   */
  skip?: number
  distinct?: Prisma.FeeCategoryScalarFieldEnum | Prisma.FeeCategoryScalarFieldEnum[]
}

/**
 * FeeCategory create
 */
export type FeeCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * The data needed to create a FeeCategory.
   */
  data: Prisma.XOR<Prisma.FeeCategoryCreateInput, Prisma.FeeCategoryUncheckedCreateInput>
}

/**
 * FeeCategory createMany
 */
export type FeeCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FeeCategories.
   */
  data: Prisma.FeeCategoryCreateManyInput | Prisma.FeeCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeeCategory createManyAndReturn
 */
export type FeeCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many FeeCategories.
   */
  data: Prisma.FeeCategoryCreateManyInput | Prisma.FeeCategoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeeCategory update
 */
export type FeeCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * The data needed to update a FeeCategory.
   */
  data: Prisma.XOR<Prisma.FeeCategoryUpdateInput, Prisma.FeeCategoryUncheckedUpdateInput>
  /**
   * Choose, which FeeCategory to update.
   */
  where: Prisma.FeeCategoryWhereUniqueInput
}

/**
 * FeeCategory updateMany
 */
export type FeeCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FeeCategories.
   */
  data: Prisma.XOR<Prisma.FeeCategoryUpdateManyMutationInput, Prisma.FeeCategoryUncheckedUpdateManyInput>
  /**
   * Filter which FeeCategories to update
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * Limit how many FeeCategories to update.
   */
  limit?: number
}

/**
 * FeeCategory updateManyAndReturn
 */
export type FeeCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * The data used to update FeeCategories.
   */
  data: Prisma.XOR<Prisma.FeeCategoryUpdateManyMutationInput, Prisma.FeeCategoryUncheckedUpdateManyInput>
  /**
   * Filter which FeeCategories to update
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * Limit how many FeeCategories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeeCategory upsert
 */
export type FeeCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * The filter to search for the FeeCategory to update in case it exists.
   */
  where: Prisma.FeeCategoryWhereUniqueInput
  /**
   * In case the FeeCategory found by the `where` argument doesn't exist, create a new FeeCategory with this data.
   */
  create: Prisma.XOR<Prisma.FeeCategoryCreateInput, Prisma.FeeCategoryUncheckedCreateInput>
  /**
   * In case the FeeCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeeCategoryUpdateInput, Prisma.FeeCategoryUncheckedUpdateInput>
}

/**
 * FeeCategory delete
 */
export type FeeCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
  /**
   * Filter which FeeCategory to delete.
   */
  where: Prisma.FeeCategoryWhereUniqueInput
}

/**
 * FeeCategory deleteMany
 */
export type FeeCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeeCategories to delete
   */
  where?: Prisma.FeeCategoryWhereInput
  /**
   * Limit how many FeeCategories to delete.
   */
  limit?: number
}

/**
 * FeeCategory.fees
 */
export type FeeCategory$feesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  where?: Prisma.FeeWhereInput
  orderBy?: Prisma.FeeOrderByWithRelationInput | Prisma.FeeOrderByWithRelationInput[]
  cursor?: Prisma.FeeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[]
}

/**
 * FeeCategory without action
 */
export type FeeCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCategory
   */
  select?: Prisma.FeeCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeeCategory
   */
  omit?: Prisma.FeeCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeCategoryInclude<ExtArgs> | null
}
