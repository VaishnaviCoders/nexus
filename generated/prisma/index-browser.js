
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AcademicYearScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  type: 'type',
  isCurrent: 'isCurrent',
  description: 'description',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organizationSlug: 'organizationSlug',
  organizationLogo: 'organizationLogo',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  website: 'website',
  isActive: 'isActive',
  isPaid: 'isPaid',
  plan: 'plan',
  planStartedAt: 'planStartedAt',
  planExpiresAt: 'planExpiresAt',
  maxStudents: 'maxStudents',
  organizationType: 'organizationType',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  profileImage: 'profileImage',
  role: 'role',
  clerkId: 'clerkId',
  isActive: 'isActive',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  grade: 'grade',
  organizationId: 'organizationId'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gradeId: 'gradeId',
  organizationId: 'organizationId',
  classTeacherId: 'classTeacherId'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeCode: 'employeeCode',
  employmentStatus: 'employmentStatus',
  isActive: 'isActive',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeacherProfileScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  city: 'city',
  state: 'state',
  dateOfBirth: 'dateOfBirth',
  qualification: 'qualification',
  experienceInYears: 'experienceInYears',
  resumeUrl: 'resumeUrl',
  joinedAt: 'joinedAt',
  bio: 'bio',
  teachingPhilosophy: 'teachingPhilosophy',
  specializedSubjects: 'specializedSubjects',
  preferredGrades: 'preferredGrades',
  idProofUrl: 'idProofUrl',
  linkedinPortfolio: 'linkedinPortfolio',
  languagesKnown: 'languagesKnown',
  certificateUrls: 'certificateUrls'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeachingAssignmentScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  organizationId: 'organizationId',
  academicYear: 'academicYear',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  motherName: 'motherName',
  fullName: 'fullName',
  dateOfBirth: 'dateOfBirth',
  profileImage: 'profileImage',
  rollNumber: 'rollNumber',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  email: 'email',
  emergencyContact: 'emergencyContact',
  gender: 'gender',
  sectionId: 'sectionId',
  gradeId: 'gradeId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParentStudentScalarFieldEnum = {
  id: 'id',
  relationship: 'relationship',
  studentId: 'studentId',
  parentId: 'parentId',
  isPrimary: 'isPrimary'
};

exports.Prisma.StudentAttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  status: 'status',
  note: 'note',
  recordedBy: 'recordedBy',
  studentId: 'studentId',
  present: 'present',
  sectionId: 'sectionId',
  academicYearId: 'academicYearId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  documentUrl: 'documentUrl',
  studentId: 'studentId',
  verified: 'verified',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  rejected: 'rejected',
  rejectedBy: 'rejectedBy',
  rejectedAt: 'rejectedAt',
  rejectReason: 'rejectReason',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  note: 'note',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.FeeScalarFieldEnum = {
  id: 'id',
  totalFee: 'totalFee',
  paidAmount: 'paidAmount',
  pendingAmount: 'pendingAmount',
  dueDate: 'dueDate',
  status: 'status',
  studentId: 'studentId',
  feeCategoryId: 'feeCategoryId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeePaymentScalarFieldEnum = {
  id: 'id',
  feeId: 'feeId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  receiptNumber: 'receiptNumber',
  note: 'note',
  transactionId: 'transactionId',
  payerId: 'payerId',
  platformFee: 'platformFee',
  recordedBy: 'recordedBy',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduledJobScalarFieldEnum = {
  id: 'id',
  data: 'data',
  type: 'type',
  scheduledAt: 'scheduledAt',
  channels: 'channels',
  status: 'status',
  result: 'result',
  error: 'error',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.FeeCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.AcademicCalendarScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  type: 'type',
  reason: 'reason',
  isRecurring: 'isRecurring',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
};

exports.Prisma.AnonymousComplaintScalarFieldEnum = {
  id: 'id',
  trackingId: 'trackingId',
  category: 'category',
  severity: 'severity',
  subject: 'subject',
  description: 'description',
  evidenceUrls: 'evidenceUrls',
  submittedAt: 'submittedAt',
  currentStatus: 'currentStatus',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
};

exports.Prisma.ComplaintStatusTimelineScalarFieldEnum = {
  id: 'id',
  complaintId: 'complaintId',
  note: 'note',
  status: 'status',
  changedBy: 'changedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NoticeScalarFieldEnum = {
  id: 'id',
  noticeType: 'noticeType',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  content: 'content',
  summary: 'summary',
  isNoticeApproved: 'isNoticeApproved',
  isDraft: 'isDraft',
  isPublished: 'isPublished',
  emailNotification: 'emailNotification',
  pushNotification: 'pushNotification',
  WhatsAppNotification: 'WhatsAppNotification',
  smsNotification: 'smsNotification',
  targetAudience: 'targetAudience',
  attachments: 'attachments',
  publishedBy: 'publishedBy',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  parentId: 'parentId',
  studentId: 'studentId',
  channel: 'channel',
  status: 'status',
  notificationType: 'notificationType',
  units: 'units',
  cost: 'cost',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamSessionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  academicYearId: 'academicYearId',
  startDate: 'startDate',
  endDate: 'endDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  examSessionId: 'examSessionId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  organizationId: 'organizationId',
  maxMarks: 'maxMarks',
  passingMarks: 'passingMarks',
  weightage: 'weightage',
  evaluationType: 'evaluationType',
  mode: 'mode',
  status: 'status',
  instructions: 'instructions',
  durationInMinutes: 'durationInMinutes',
  venueMapUrl: 'venueMapUrl',
  venue: 'venue',
  isResultsPublished: 'isResultsPublished',
  supervisors: 'supervisors',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamEnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  status: 'status',
  enrolledAt: 'enrolledAt',
  exemptionReason: 'exemptionReason'
};

exports.Prisma.ExamResultScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  subjectId: 'subjectId',
  maxMarks: 'maxMarks',
  obtainedMarks: 'obtainedMarks',
  percentage: 'percentage',
  gradeLabel: 'gradeLabel',
  remarks: 'remarks',
  isPassed: 'isPassed',
  isAbsent: 'isAbsent',
  isResultsPublished: 'isResultsPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HallTicketScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  examSessionId: 'examSessionId',
  pdfUrl: 'pdfUrl',
  qrCode: 'qrCode',
  generatedAt: 'generatedAt',
  downloadedAt: 'downloadedAt',
  expiryDate: 'expiryDate',
  organizationId: 'organizationId'
};

exports.Prisma.ReportCardScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examSessionId: 'examSessionId',
  totalMaxMarks: 'totalMaxMarks',
  totalObtained: 'totalObtained',
  percentage: 'percentage',
  cgpa: 'cgpa',
  overallGrade: 'overallGrade',
  resultStatus: 'resultStatus',
  classRank: 'classRank',
  gradeRank: 'gradeRank',
  attendancePercent: 'attendancePercent',
  conductGrade: 'conductGrade',
  remarks: 'remarks',
  principalRemarks: 'principalRemarks',
  rank: 'rank',
  pdfUrl: 'pdfUrl',
  generatedAt: 'generatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AcademicYearOrderByRelevanceFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy'
};

exports.Prisma.OrganizationOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  organizationSlug: 'organizationSlug',
  organizationLogo: 'organizationLogo',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  website: 'website',
  createdBy: 'createdBy'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  profileImage: 'profileImage',
  clerkId: 'clerkId',
  organizationId: 'organizationId'
};

exports.Prisma.GradeOrderByRelevanceFieldEnum = {
  id: 'id',
  grade: 'grade',
  organizationId: 'organizationId'
};

exports.Prisma.SectionOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  gradeId: 'gradeId',
  organizationId: 'organizationId',
  classTeacherId: 'classTeacherId'
};

exports.Prisma.TeacherOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeCode: 'employeeCode',
  organizationId: 'organizationId'
};

exports.Prisma.TeacherProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  city: 'city',
  state: 'state',
  qualification: 'qualification',
  resumeUrl: 'resumeUrl',
  bio: 'bio',
  teachingPhilosophy: 'teachingPhilosophy',
  specializedSubjects: 'specializedSubjects',
  preferredGrades: 'preferredGrades',
  idProofUrl: 'idProofUrl',
  linkedinPortfolio: 'linkedinPortfolio',
  languagesKnown: 'languagesKnown',
  certificateUrls: 'certificateUrls'
};

exports.Prisma.SubjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  organizationId: 'organizationId'
};

exports.Prisma.TeachingAssignmentOrderByRelevanceFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  organizationId: 'organizationId',
  academicYear: 'academicYear',
  academicYearId: 'academicYearId'
};

exports.Prisma.StudentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  motherName: 'motherName',
  fullName: 'fullName',
  profileImage: 'profileImage',
  rollNumber: 'rollNumber',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  email: 'email',
  emergencyContact: 'emergencyContact',
  sectionId: 'sectionId',
  gradeId: 'gradeId',
  organizationId: 'organizationId'
};

exports.Prisma.ParentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber'
};

exports.Prisma.ParentStudentOrderByRelevanceFieldEnum = {
  id: 'id',
  relationship: 'relationship',
  studentId: 'studentId',
  parentId: 'parentId'
};

exports.Prisma.StudentAttendanceOrderByRelevanceFieldEnum = {
  id: 'id',
  note: 'note',
  recordedBy: 'recordedBy',
  studentId: 'studentId',
  sectionId: 'sectionId',
  academicYearId: 'academicYearId'
};

exports.Prisma.StudentDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileType: 'fileType',
  documentUrl: 'documentUrl',
  studentId: 'studentId',
  verifiedBy: 'verifiedBy',
  rejectedBy: 'rejectedBy',
  rejectReason: 'rejectReason',
  uploadedBy: 'uploadedBy',
  note: 'note',
  organizationId: 'organizationId'
};

exports.Prisma.FeeOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  feeCategoryId: 'feeCategoryId',
  organizationId: 'organizationId'
};

exports.Prisma.FeePaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  feeId: 'feeId',
  receiptNumber: 'receiptNumber',
  note: 'note',
  transactionId: 'transactionId',
  payerId: 'payerId',
  recordedBy: 'recordedBy',
  organizationId: 'organizationId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.ScheduledJobOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  error: 'error',
  createdBy: 'createdBy',
  organizationId: 'organizationId'
};

exports.Prisma.FeeCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  organizationId: 'organizationId'
};

exports.Prisma.AcademicCalendarOrderByRelevanceFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  reason: 'reason',
  createdBy: 'createdBy',
  academicYearId: 'academicYearId'
};

exports.Prisma.AnonymousComplaintOrderByRelevanceFieldEnum = {
  id: 'id',
  trackingId: 'trackingId',
  category: 'category',
  subject: 'subject',
  description: 'description',
  evidenceUrls: 'evidenceUrls',
  organizationId: 'organizationId',
  academicYearId: 'academicYearId'
};

exports.Prisma.ComplaintStatusTimelineOrderByRelevanceFieldEnum = {
  id: 'id',
  complaintId: 'complaintId',
  note: 'note',
  changedBy: 'changedBy'
};

exports.Prisma.NoticeOrderByRelevanceFieldEnum = {
  id: 'id',
  noticeType: 'noticeType',
  title: 'title',
  content: 'content',
  summary: 'summary',
  targetAudience: 'targetAudience',
  publishedBy: 'publishedBy',
  organizationId: 'organizationId',
  academicYearId: 'academicYearId'
};

exports.Prisma.NotificationLogOrderByRelevanceFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  parentId: 'parentId',
  studentId: 'studentId'
};

exports.Prisma.ExamSessionOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  academicYearId: 'academicYearId',
  createdBy: 'createdBy'
};

exports.Prisma.ExamOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  examSessionId: 'examSessionId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  organizationId: 'organizationId',
  instructions: 'instructions',
  venueMapUrl: 'venueMapUrl',
  venue: 'venue',
  supervisors: 'supervisors'
};

exports.Prisma.ExamEnrollmentOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  exemptionReason: 'exemptionReason'
};

exports.Prisma.ExamResultOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  subjectId: 'subjectId',
  gradeLabel: 'gradeLabel',
  remarks: 'remarks'
};

exports.Prisma.HallTicketOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  examSessionId: 'examSessionId',
  pdfUrl: 'pdfUrl',
  qrCode: 'qrCode',
  organizationId: 'organizationId'
};

exports.Prisma.ReportCardOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examSessionId: 'examSessionId',
  overallGrade: 'overallGrade',
  conductGrade: 'conductGrade',
  remarks: 'remarks',
  principalRemarks: 'principalRemarks',
  pdfUrl: 'pdfUrl'
};
exports.YearType = exports.$Enums.YearType = {
  ANNUAL: 'ANNUAL',
  SEMESTER: 'SEMESTER',
  TRIMESTER: 'TRIMESTER',
  BATCH: 'BATCH'
};

exports.PlanType = exports.$Enums.PlanType = {
  FREE: 'FREE',
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM',
  ENTERPRISE: 'ENTERPRISE'
};

exports.OrganizationType = exports.$Enums.OrganizationType = {
  SCHOOL: 'SCHOOL',
  COLLEGE: 'COLLEGE',
  COACHING_CLASS: 'COACHING_CLASS',
  UNIVERSITY: 'UNIVERSITY',
  KINDERGARTEN: 'KINDERGARTEN',
  TRAINING_INSTITUTE: 'TRAINING_INSTITUTE',
  OTHER: 'OTHER'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  PARENT: 'PARENT'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  ACTIVE: 'ACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  RESIGNED: 'RESIGNED',
  RETIRED: 'RETIRED',
  TERMINATED: 'TERMINATED',
  CONTRACTUAL: 'CONTRACTUAL',
  PROBATION: 'PROBATION',
  SUSPENDED: 'SUSPENDED'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  COMPLETED: 'COMPLETED',
  INACTIVE: 'INACTIVE'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  AADHAAR: 'AADHAAR',
  PAN: 'PAN',
  PASSPORT: 'PASSPORT',
  BIRTH_CERTIFICATE: 'BIRTH_CERTIFICATE',
  TRANSFER_CERTIFICATE: 'TRANSFER_CERTIFICATE',
  BANK_PASSBOOK: 'BANK_PASSBOOK',
  PARENT_ID: 'PARENT_ID',
  AGREEMENT: 'AGREEMENT'
};

exports.FeeStatus = exports.$Enums.FeeStatus = {
  PAID: 'PAID',
  UNPAID: 'UNPAID',
  OVERDUE: 'OVERDUE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  UNPAID: 'UNPAID',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  UPI: 'UPI',
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHEQUE: 'CHEQUE',
  ONLINE: 'ONLINE'
};

exports.scheduledJobType = exports.$Enums.scheduledJobType = {
  FEE_REMINDER: 'FEE_REMINDER',
  NOTICE: 'NOTICE'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  PUSH: 'PUSH'
};

exports.CalendarEventType = exports.$Enums.CalendarEventType = {
  PLANNED: 'PLANNED',
  SUDDEN: 'SUDDEN',
  INSTITUTION_SPECIFIC: 'INSTITUTION_SPECIFIC'
};

exports.Severity = exports.$Enums.Severity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.ComplaintStatus = exports.$Enums.ComplaintStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  INVESTIGATING: 'INVESTIGATING',
  REJECTED: 'REJECTED'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  DELIVERED: 'DELIVERED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NOTICE: 'NOTICE',
  FEE_REMINDER: 'FEE_REMINDER',
  ATTENDANCE_ALERT: 'ATTENDANCE_ALERT',
  DOCUMENT_REQUEST: 'DOCUMENT_REQUEST',
  GENERAL_ANNOUNCEMENT: 'GENERAL_ANNOUNCEMENT',
  Exam: 'Exam'
};

exports.EvaluationType = exports.$Enums.EvaluationType = {
  TEST: 'TEST',
  EXAM: 'EXAM',
  ASSIGNMENT: 'ASSIGNMENT',
  PROJECT: 'PROJECT',
  PRACTICAL: 'PRACTICAL',
  QUIZ: 'QUIZ',
  ORAL: 'ORAL',
  INTERNAL: 'INTERNAL',
  FINAL: 'FINAL',
  OTHER: 'OTHER'
};

exports.ExamMode = exports.$Enums.ExamMode = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  PRACTICAL: 'PRACTICAL',
  VIVA: 'VIVA',
  TAKE_HOME: 'TAKE_HOME'
};

exports.ExamStatus = exports.$Enums.ExamStatus = {
  UPCOMING: 'UPCOMING',
  LIVE: 'LIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.StudentExamStatus = exports.$Enums.StudentExamStatus = {
  ENROLLED: 'ENROLLED',
  ATTENDED: 'ATTENDED',
  ABSENT: 'ABSENT',
  EXEMPT: 'EXEMPT',
  DISQUALIFIED: 'DISQUALIFIED'
};

exports.ResultStatus = exports.$Enums.ResultStatus = {
  PASSED: 'PASSED',
  FAILED: 'FAILED',
  PROMOTED: 'PROMOTED',
  COMPARTMENT: 'COMPARTMENT',
  WITHHELD: 'WITHHELD'
};

exports.Prisma.ModelName = {
  AcademicYear: 'AcademicYear',
  Organization: 'Organization',
  User: 'User',
  Grade: 'Grade',
  Section: 'Section',
  Teacher: 'Teacher',
  TeacherProfile: 'TeacherProfile',
  Subject: 'Subject',
  TeachingAssignment: 'TeachingAssignment',
  Student: 'Student',
  Parent: 'Parent',
  ParentStudent: 'ParentStudent',
  StudentAttendance: 'StudentAttendance',
  StudentDocument: 'StudentDocument',
  Fee: 'Fee',
  FeePayment: 'FeePayment',
  ScheduledJob: 'ScheduledJob',
  FeeCategory: 'FeeCategory',
  AcademicCalendar: 'AcademicCalendar',
  AnonymousComplaint: 'AnonymousComplaint',
  ComplaintStatusTimeline: 'ComplaintStatusTimeline',
  Notice: 'Notice',
  NotificationLog: 'NotificationLog',
  ExamSession: 'ExamSession',
  Exam: 'Exam',
  ExamEnrollment: 'ExamEnrollment',
  ExamResult: 'ExamResult',
  HallTicket: 'HallTicket',
  ReportCard: 'ReportCard'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
