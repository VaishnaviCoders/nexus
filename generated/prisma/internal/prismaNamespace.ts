
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
export const prismaVersion: PrismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  AcademicYear: 'AcademicYear',
  Organization: 'Organization',
  User: 'User',
  Teacher: 'Teacher',
  TeacherProfile: 'TeacherProfile',
  Subject: 'Subject',
  TeachingAssignment: 'TeachingAssignment',
  Grade: 'Grade',
  Section: 'Section',
  Student: 'Student',
  Parent: 'Parent',
  ParentStudent: 'ParentStudent',
  StudentAttendance: 'StudentAttendance',
  StudentDocument: 'StudentDocument',
  Fee: 'Fee',
  FeePayment: 'FeePayment',
  ScheduledJob: 'ScheduledJob',
  FeeCategory: 'FeeCategory',
  AcademicCalendar: 'AcademicCalendar',
  AnonymousComplaint: 'AnonymousComplaint',
  ComplaintStatusTimeline: 'ComplaintStatusTimeline',
  Notice: 'Notice',
  NotificationLog: 'NotificationLog',
  Performance: 'Performance'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "academicYear" | "organization" | "user" | "teacher" | "teacherProfile" | "subject" | "teachingAssignment" | "grade" | "section" | "student" | "parent" | "parentStudent" | "studentAttendance" | "studentDocument" | "fee" | "feePayment" | "scheduledJob" | "feeCategory" | "academicCalendar" | "anonymousComplaint" | "complaintStatusTimeline" | "notice" | "notificationLog" | "performance"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    AcademicYear: {
      payload: Prisma.$AcademicYearPayload<ExtArgs>
      fields: Prisma.AcademicYearFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AcademicYearFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AcademicYearFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        findFirst: {
          args: Prisma.AcademicYearFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AcademicYearFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        findMany: {
          args: Prisma.AcademicYearFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>[]
        }
        create: {
          args: Prisma.AcademicYearCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        createMany: {
          args: Prisma.AcademicYearCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AcademicYearCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>[]
        }
        delete: {
          args: Prisma.AcademicYearDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        update: {
          args: Prisma.AcademicYearUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        deleteMany: {
          args: Prisma.AcademicYearDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AcademicYearUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AcademicYearUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>[]
        }
        upsert: {
          args: Prisma.AcademicYearUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        aggregate: {
          args: Prisma.AcademicYearAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAcademicYear>
        }
        groupBy: {
          args: Prisma.AcademicYearGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AcademicYearGroupByOutputType>[]
        }
        count: {
          args: Prisma.AcademicYearCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AcademicYearCountAggregateOutputType> | number
        }
      }
    }
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>
      fields: Prisma.OrganizationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>
        }
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Teacher: {
      payload: Prisma.$TeacherPayload<ExtArgs>
      fields: Prisma.TeacherFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TeacherFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>
        }
        findFirst: {
          args: Prisma.TeacherFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>
        }
        findMany: {
          args: Prisma.TeacherFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>[]
        }
        create: {
          args: Prisma.TeacherCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>
        }
        createMany: {
          args: Prisma.TeacherCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>[]
        }
        delete: {
          args: Prisma.TeacherDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>
        }
        update: {
          args: Prisma.TeacherUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>
        }
        deleteMany: {
          args: Prisma.TeacherDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TeacherUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>[]
        }
        upsert: {
          args: Prisma.TeacherUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherPayload>
        }
        aggregate: {
          args: Prisma.TeacherAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeacher>
        }
        groupBy: {
          args: Prisma.TeacherGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeacherGroupByOutputType>[]
        }
        count: {
          args: Prisma.TeacherCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeacherCountAggregateOutputType> | number
        }
      }
    }
    TeacherProfile: {
      payload: Prisma.$TeacherProfilePayload<ExtArgs>
      fields: Prisma.TeacherProfileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TeacherProfileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TeacherProfileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>
        }
        findFirst: {
          args: Prisma.TeacherProfileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TeacherProfileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>
        }
        findMany: {
          args: Prisma.TeacherProfileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>[]
        }
        create: {
          args: Prisma.TeacherProfileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>
        }
        createMany: {
          args: Prisma.TeacherProfileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TeacherProfileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>[]
        }
        delete: {
          args: Prisma.TeacherProfileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>
        }
        update: {
          args: Prisma.TeacherProfileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>
        }
        deleteMany: {
          args: Prisma.TeacherProfileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TeacherProfileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TeacherProfileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>[]
        }
        upsert: {
          args: Prisma.TeacherProfileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherProfilePayload>
        }
        aggregate: {
          args: Prisma.TeacherProfileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeacherProfile>
        }
        groupBy: {
          args: Prisma.TeacherProfileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeacherProfileGroupByOutputType>[]
        }
        count: {
          args: Prisma.TeacherProfileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeacherProfileCountAggregateOutputType> | number
        }
      }
    }
    Subject: {
      payload: Prisma.$SubjectPayload<ExtArgs>
      fields: Prisma.SubjectFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SubjectFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        findFirst: {
          args: Prisma.SubjectFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        findMany: {
          args: Prisma.SubjectFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>[]
        }
        create: {
          args: Prisma.SubjectCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        createMany: {
          args: Prisma.SubjectCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>[]
        }
        delete: {
          args: Prisma.SubjectDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        update: {
          args: Prisma.SubjectUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        deleteMany: {
          args: Prisma.SubjectDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SubjectUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>[]
        }
        upsert: {
          args: Prisma.SubjectUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        aggregate: {
          args: Prisma.SubjectAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSubject>
        }
        groupBy: {
          args: Prisma.SubjectGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SubjectGroupByOutputType>[]
        }
        count: {
          args: Prisma.SubjectCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SubjectCountAggregateOutputType> | number
        }
      }
    }
    TeachingAssignment: {
      payload: Prisma.$TeachingAssignmentPayload<ExtArgs>
      fields: Prisma.TeachingAssignmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TeachingAssignmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TeachingAssignmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>
        }
        findFirst: {
          args: Prisma.TeachingAssignmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TeachingAssignmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>
        }
        findMany: {
          args: Prisma.TeachingAssignmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>[]
        }
        create: {
          args: Prisma.TeachingAssignmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>
        }
        createMany: {
          args: Prisma.TeachingAssignmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TeachingAssignmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>[]
        }
        delete: {
          args: Prisma.TeachingAssignmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>
        }
        update: {
          args: Prisma.TeachingAssignmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>
        }
        deleteMany: {
          args: Prisma.TeachingAssignmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TeachingAssignmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TeachingAssignmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>[]
        }
        upsert: {
          args: Prisma.TeachingAssignmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeachingAssignmentPayload>
        }
        aggregate: {
          args: Prisma.TeachingAssignmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeachingAssignment>
        }
        groupBy: {
          args: Prisma.TeachingAssignmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeachingAssignmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.TeachingAssignmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeachingAssignmentCountAggregateOutputType> | number
        }
      }
    }
    Grade: {
      payload: Prisma.$GradePayload<ExtArgs>
      fields: Prisma.GradeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GradeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        findFirst: {
          args: Prisma.GradeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        findMany: {
          args: Prisma.GradeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>[]
        }
        create: {
          args: Prisma.GradeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        createMany: {
          args: Prisma.GradeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GradeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>[]
        }
        delete: {
          args: Prisma.GradeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        update: {
          args: Prisma.GradeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        deleteMany: {
          args: Prisma.GradeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GradeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GradeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>[]
        }
        upsert: {
          args: Prisma.GradeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        aggregate: {
          args: Prisma.GradeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGrade>
        }
        groupBy: {
          args: Prisma.GradeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GradeGroupByOutputType>[]
        }
        count: {
          args: Prisma.GradeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GradeCountAggregateOutputType> | number
        }
      }
    }
    Section: {
      payload: Prisma.$SectionPayload<ExtArgs>
      fields: Prisma.SectionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SectionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>
        }
        findFirst: {
          args: Prisma.SectionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>
        }
        findMany: {
          args: Prisma.SectionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>[]
        }
        create: {
          args: Prisma.SectionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>
        }
        createMany: {
          args: Prisma.SectionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>[]
        }
        delete: {
          args: Prisma.SectionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>
        }
        update: {
          args: Prisma.SectionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>
        }
        deleteMany: {
          args: Prisma.SectionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SectionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SectionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>[]
        }
        upsert: {
          args: Prisma.SectionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SectionPayload>
        }
        aggregate: {
          args: Prisma.SectionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSection>
        }
        groupBy: {
          args: Prisma.SectionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SectionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SectionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SectionCountAggregateOutputType> | number
        }
      }
    }
    Student: {
      payload: Prisma.$StudentPayload<ExtArgs>
      fields: Prisma.StudentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StudentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        findFirst: {
          args: Prisma.StudentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        findMany: {
          args: Prisma.StudentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>[]
        }
        create: {
          args: Prisma.StudentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        createMany: {
          args: Prisma.StudentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>[]
        }
        delete: {
          args: Prisma.StudentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        update: {
          args: Prisma.StudentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        deleteMany: {
          args: Prisma.StudentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StudentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>[]
        }
        upsert: {
          args: Prisma.StudentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        aggregate: {
          args: Prisma.StudentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStudent>
        }
        groupBy: {
          args: Prisma.StudentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentGroupByOutputType>[]
        }
        count: {
          args: Prisma.StudentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentCountAggregateOutputType> | number
        }
      }
    }
    Parent: {
      payload: Prisma.$ParentPayload<ExtArgs>
      fields: Prisma.ParentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        findFirst: {
          args: Prisma.ParentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        findMany: {
          args: Prisma.ParentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>[]
        }
        create: {
          args: Prisma.ParentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        createMany: {
          args: Prisma.ParentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ParentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>[]
        }
        delete: {
          args: Prisma.ParentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        update: {
          args: Prisma.ParentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        deleteMany: {
          args: Prisma.ParentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ParentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>[]
        }
        upsert: {
          args: Prisma.ParentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        aggregate: {
          args: Prisma.ParentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParent>
        }
        groupBy: {
          args: Prisma.ParentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentCountAggregateOutputType> | number
        }
      }
    }
    ParentStudent: {
      payload: Prisma.$ParentStudentPayload<ExtArgs>
      fields: Prisma.ParentStudentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParentStudentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParentStudentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        findFirst: {
          args: Prisma.ParentStudentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParentStudentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        findMany: {
          args: Prisma.ParentStudentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
        }
        create: {
          args: Prisma.ParentStudentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        createMany: {
          args: Prisma.ParentStudentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ParentStudentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
        }
        delete: {
          args: Prisma.ParentStudentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        update: {
          args: Prisma.ParentStudentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        deleteMany: {
          args: Prisma.ParentStudentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParentStudentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ParentStudentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
        }
        upsert: {
          args: Prisma.ParentStudentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        aggregate: {
          args: Prisma.ParentStudentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParentStudent>
        }
        groupBy: {
          args: Prisma.ParentStudentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentStudentGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParentStudentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentStudentCountAggregateOutputType> | number
        }
      }
    }
    StudentAttendance: {
      payload: Prisma.$StudentAttendancePayload<ExtArgs>
      fields: Prisma.StudentAttendanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StudentAttendanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StudentAttendanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        findFirst: {
          args: Prisma.StudentAttendanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StudentAttendanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        findMany: {
          args: Prisma.StudentAttendanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
        }
        create: {
          args: Prisma.StudentAttendanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        createMany: {
          args: Prisma.StudentAttendanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StudentAttendanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
        }
        delete: {
          args: Prisma.StudentAttendanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        update: {
          args: Prisma.StudentAttendanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        deleteMany: {
          args: Prisma.StudentAttendanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StudentAttendanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StudentAttendanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
        }
        upsert: {
          args: Prisma.StudentAttendanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        aggregate: {
          args: Prisma.StudentAttendanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStudentAttendance>
        }
        groupBy: {
          args: Prisma.StudentAttendanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentAttendanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.StudentAttendanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentAttendanceCountAggregateOutputType> | number
        }
      }
    }
    StudentDocument: {
      payload: Prisma.$StudentDocumentPayload<ExtArgs>
      fields: Prisma.StudentDocumentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StudentDocumentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StudentDocumentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>
        }
        findFirst: {
          args: Prisma.StudentDocumentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StudentDocumentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>
        }
        findMany: {
          args: Prisma.StudentDocumentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>[]
        }
        create: {
          args: Prisma.StudentDocumentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>
        }
        createMany: {
          args: Prisma.StudentDocumentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StudentDocumentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>[]
        }
        delete: {
          args: Prisma.StudentDocumentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>
        }
        update: {
          args: Prisma.StudentDocumentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>
        }
        deleteMany: {
          args: Prisma.StudentDocumentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StudentDocumentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StudentDocumentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>[]
        }
        upsert: {
          args: Prisma.StudentDocumentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentDocumentPayload>
        }
        aggregate: {
          args: Prisma.StudentDocumentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStudentDocument>
        }
        groupBy: {
          args: Prisma.StudentDocumentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentDocumentGroupByOutputType>[]
        }
        count: {
          args: Prisma.StudentDocumentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentDocumentCountAggregateOutputType> | number
        }
      }
    }
    Fee: {
      payload: Prisma.$FeePayload<ExtArgs>
      fields: Prisma.FeeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>
        }
        findFirst: {
          args: Prisma.FeeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>
        }
        findMany: {
          args: Prisma.FeeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>[]
        }
        create: {
          args: Prisma.FeeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>
        }
        createMany: {
          args: Prisma.FeeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>[]
        }
        delete: {
          args: Prisma.FeeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>
        }
        update: {
          args: Prisma.FeeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>
        }
        deleteMany: {
          args: Prisma.FeeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>[]
        }
        upsert: {
          args: Prisma.FeeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePayload>
        }
        aggregate: {
          args: Prisma.FeeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFee>
        }
        groupBy: {
          args: Prisma.FeeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeeGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeeCountAggregateOutputType> | number
        }
      }
    }
    FeePayment: {
      payload: Prisma.$FeePaymentPayload<ExtArgs>
      fields: Prisma.FeePaymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeePaymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeePaymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>
        }
        findFirst: {
          args: Prisma.FeePaymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeePaymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>
        }
        findMany: {
          args: Prisma.FeePaymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>[]
        }
        create: {
          args: Prisma.FeePaymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>
        }
        createMany: {
          args: Prisma.FeePaymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeePaymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>[]
        }
        delete: {
          args: Prisma.FeePaymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>
        }
        update: {
          args: Prisma.FeePaymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>
        }
        deleteMany: {
          args: Prisma.FeePaymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeePaymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeePaymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>[]
        }
        upsert: {
          args: Prisma.FeePaymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeePaymentPayload>
        }
        aggregate: {
          args: Prisma.FeePaymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeePayment>
        }
        groupBy: {
          args: Prisma.FeePaymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeePaymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeePaymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeePaymentCountAggregateOutputType> | number
        }
      }
    }
    ScheduledJob: {
      payload: Prisma.$ScheduledJobPayload<ExtArgs>
      fields: Prisma.ScheduledJobFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ScheduledJobFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ScheduledJobFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>
        }
        findFirst: {
          args: Prisma.ScheduledJobFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ScheduledJobFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>
        }
        findMany: {
          args: Prisma.ScheduledJobFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>[]
        }
        create: {
          args: Prisma.ScheduledJobCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>
        }
        createMany: {
          args: Prisma.ScheduledJobCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ScheduledJobCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>[]
        }
        delete: {
          args: Prisma.ScheduledJobDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>
        }
        update: {
          args: Prisma.ScheduledJobUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>
        }
        deleteMany: {
          args: Prisma.ScheduledJobDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ScheduledJobUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ScheduledJobUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>[]
        }
        upsert: {
          args: Prisma.ScheduledJobUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledJobPayload>
        }
        aggregate: {
          args: Prisma.ScheduledJobAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateScheduledJob>
        }
        groupBy: {
          args: Prisma.ScheduledJobGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledJobGroupByOutputType>[]
        }
        count: {
          args: Prisma.ScheduledJobCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledJobCountAggregateOutputType> | number
        }
      }
    }
    FeeCategory: {
      payload: Prisma.$FeeCategoryPayload<ExtArgs>
      fields: Prisma.FeeCategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeeCategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeeCategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>
        }
        findFirst: {
          args: Prisma.FeeCategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeeCategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>
        }
        findMany: {
          args: Prisma.FeeCategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>[]
        }
        create: {
          args: Prisma.FeeCategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>
        }
        createMany: {
          args: Prisma.FeeCategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeeCategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>[]
        }
        delete: {
          args: Prisma.FeeCategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>
        }
        update: {
          args: Prisma.FeeCategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>
        }
        deleteMany: {
          args: Prisma.FeeCategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeeCategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeeCategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>[]
        }
        upsert: {
          args: Prisma.FeeCategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeeCategoryPayload>
        }
        aggregate: {
          args: Prisma.FeeCategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeeCategory>
        }
        groupBy: {
          args: Prisma.FeeCategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeeCategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeeCategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeeCategoryCountAggregateOutputType> | number
        }
      }
    }
    AcademicCalendar: {
      payload: Prisma.$AcademicCalendarPayload<ExtArgs>
      fields: Prisma.AcademicCalendarFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AcademicCalendarFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AcademicCalendarFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>
        }
        findFirst: {
          args: Prisma.AcademicCalendarFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AcademicCalendarFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>
        }
        findMany: {
          args: Prisma.AcademicCalendarFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>[]
        }
        create: {
          args: Prisma.AcademicCalendarCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>
        }
        createMany: {
          args: Prisma.AcademicCalendarCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AcademicCalendarCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>[]
        }
        delete: {
          args: Prisma.AcademicCalendarDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>
        }
        update: {
          args: Prisma.AcademicCalendarUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>
        }
        deleteMany: {
          args: Prisma.AcademicCalendarDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AcademicCalendarUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AcademicCalendarUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>[]
        }
        upsert: {
          args: Prisma.AcademicCalendarUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicCalendarPayload>
        }
        aggregate: {
          args: Prisma.AcademicCalendarAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAcademicCalendar>
        }
        groupBy: {
          args: Prisma.AcademicCalendarGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AcademicCalendarGroupByOutputType>[]
        }
        count: {
          args: Prisma.AcademicCalendarCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AcademicCalendarCountAggregateOutputType> | number
        }
      }
    }
    AnonymousComplaint: {
      payload: Prisma.$AnonymousComplaintPayload<ExtArgs>
      fields: Prisma.AnonymousComplaintFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AnonymousComplaintFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AnonymousComplaintFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>
        }
        findFirst: {
          args: Prisma.AnonymousComplaintFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AnonymousComplaintFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>
        }
        findMany: {
          args: Prisma.AnonymousComplaintFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>[]
        }
        create: {
          args: Prisma.AnonymousComplaintCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>
        }
        createMany: {
          args: Prisma.AnonymousComplaintCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AnonymousComplaintCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>[]
        }
        delete: {
          args: Prisma.AnonymousComplaintDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>
        }
        update: {
          args: Prisma.AnonymousComplaintUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>
        }
        deleteMany: {
          args: Prisma.AnonymousComplaintDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AnonymousComplaintUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AnonymousComplaintUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>[]
        }
        upsert: {
          args: Prisma.AnonymousComplaintUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnonymousComplaintPayload>
        }
        aggregate: {
          args: Prisma.AnonymousComplaintAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAnonymousComplaint>
        }
        groupBy: {
          args: Prisma.AnonymousComplaintGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AnonymousComplaintGroupByOutputType>[]
        }
        count: {
          args: Prisma.AnonymousComplaintCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AnonymousComplaintCountAggregateOutputType> | number
        }
      }
    }
    ComplaintStatusTimeline: {
      payload: Prisma.$ComplaintStatusTimelinePayload<ExtArgs>
      fields: Prisma.ComplaintStatusTimelineFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ComplaintStatusTimelineFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ComplaintStatusTimelineFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>
        }
        findFirst: {
          args: Prisma.ComplaintStatusTimelineFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ComplaintStatusTimelineFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>
        }
        findMany: {
          args: Prisma.ComplaintStatusTimelineFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>[]
        }
        create: {
          args: Prisma.ComplaintStatusTimelineCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>
        }
        createMany: {
          args: Prisma.ComplaintStatusTimelineCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ComplaintStatusTimelineCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>[]
        }
        delete: {
          args: Prisma.ComplaintStatusTimelineDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>
        }
        update: {
          args: Prisma.ComplaintStatusTimelineUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>
        }
        deleteMany: {
          args: Prisma.ComplaintStatusTimelineDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ComplaintStatusTimelineUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ComplaintStatusTimelineUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>[]
        }
        upsert: {
          args: Prisma.ComplaintStatusTimelineUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ComplaintStatusTimelinePayload>
        }
        aggregate: {
          args: Prisma.ComplaintStatusTimelineAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateComplaintStatusTimeline>
        }
        groupBy: {
          args: Prisma.ComplaintStatusTimelineGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ComplaintStatusTimelineGroupByOutputType>[]
        }
        count: {
          args: Prisma.ComplaintStatusTimelineCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ComplaintStatusTimelineCountAggregateOutputType> | number
        }
      }
    }
    Notice: {
      payload: Prisma.$NoticePayload<ExtArgs>
      fields: Prisma.NoticeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NoticeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NoticeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>
        }
        findFirst: {
          args: Prisma.NoticeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NoticeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>
        }
        findMany: {
          args: Prisma.NoticeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>[]
        }
        create: {
          args: Prisma.NoticeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>
        }
        createMany: {
          args: Prisma.NoticeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NoticeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>[]
        }
        delete: {
          args: Prisma.NoticeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>
        }
        update: {
          args: Prisma.NoticeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>
        }
        deleteMany: {
          args: Prisma.NoticeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NoticeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NoticeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>[]
        }
        upsert: {
          args: Prisma.NoticeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NoticePayload>
        }
        aggregate: {
          args: Prisma.NoticeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotice>
        }
        groupBy: {
          args: Prisma.NoticeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NoticeGroupByOutputType>[]
        }
        count: {
          args: Prisma.NoticeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NoticeCountAggregateOutputType> | number
        }
      }
    }
    NotificationLog: {
      payload: Prisma.$NotificationLogPayload<ExtArgs>
      fields: Prisma.NotificationLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NotificationLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NotificationLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>
        }
        findFirst: {
          args: Prisma.NotificationLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NotificationLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>
        }
        findMany: {
          args: Prisma.NotificationLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>[]
        }
        create: {
          args: Prisma.NotificationLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>
        }
        createMany: {
          args: Prisma.NotificationLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NotificationLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>[]
        }
        delete: {
          args: Prisma.NotificationLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>
        }
        update: {
          args: Prisma.NotificationLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>
        }
        deleteMany: {
          args: Prisma.NotificationLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NotificationLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NotificationLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>[]
        }
        upsert: {
          args: Prisma.NotificationLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationLogPayload>
        }
        aggregate: {
          args: Prisma.NotificationLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotificationLog>
        }
        groupBy: {
          args: Prisma.NotificationLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.NotificationLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationLogCountAggregateOutputType> | number
        }
      }
    }
    Performance: {
      payload: Prisma.$PerformancePayload<ExtArgs>
      fields: Prisma.PerformanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PerformanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PerformanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>
        }
        findFirst: {
          args: Prisma.PerformanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PerformanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>
        }
        findMany: {
          args: Prisma.PerformanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>[]
        }
        create: {
          args: Prisma.PerformanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>
        }
        createMany: {
          args: Prisma.PerformanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PerformanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>[]
        }
        delete: {
          args: Prisma.PerformanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>
        }
        update: {
          args: Prisma.PerformanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>
        }
        deleteMany: {
          args: Prisma.PerformanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PerformanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PerformanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>[]
        }
        upsert: {
          args: Prisma.PerformanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerformancePayload>
        }
        aggregate: {
          args: Prisma.PerformanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePerformance>
        }
        groupBy: {
          args: Prisma.PerformanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PerformanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.PerformanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PerformanceCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AcademicYearScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  type: 'type',
  isCurrent: 'isCurrent',
  description: 'description',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AcademicYearScalarFieldEnum = (typeof AcademicYearScalarFieldEnum)[keyof typeof AcademicYearScalarFieldEnum]


export const OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organizationSlug: 'organizationSlug',
  organizationLogo: 'organizationLogo',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  website: 'website',
  isActive: 'isActive',
  isPaid: 'isPaid',
  plan: 'plan',
  planStartedAt: 'planStartedAt',
  planExpiresAt: 'planExpiresAt',
  maxStudents: 'maxStudents',
  organizationType: 'organizationType',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  profileImage: 'profileImage',
  role: 'role',
  clerkId: 'clerkId',
  isActive: 'isActive',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const TeacherScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeCode: 'employeeCode',
  employmentStatus: 'employmentStatus',
  isActive: 'isActive',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


export const TeacherProfileScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  city: 'city',
  state: 'state',
  dateOfBirth: 'dateOfBirth',
  qualification: 'qualification',
  experienceInYears: 'experienceInYears',
  resumeUrl: 'resumeUrl',
  joinedAt: 'joinedAt',
  bio: 'bio',
  teachingPhilosophy: 'teachingPhilosophy',
  specializedSubjects: 'specializedSubjects',
  preferredGrades: 'preferredGrades',
  idProofUrl: 'idProofUrl',
  linkedinPortfolio: 'linkedinPortfolio',
  languagesKnown: 'languagesKnown',
  certificateUrls: 'certificateUrls'
} as const

export type TeacherProfileScalarFieldEnum = (typeof TeacherProfileScalarFieldEnum)[keyof typeof TeacherProfileScalarFieldEnum]


export const SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


export const TeachingAssignmentScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  organizationId: 'organizationId',
  academicYear: 'academicYear',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
} as const

export type TeachingAssignmentScalarFieldEnum = (typeof TeachingAssignmentScalarFieldEnum)[keyof typeof TeachingAssignmentScalarFieldEnum]


export const GradeScalarFieldEnum = {
  id: 'id',
  grade: 'grade',
  organizationId: 'organizationId'
} as const

export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


export const SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gradeId: 'gradeId',
  organizationId: 'organizationId',
  classTeacherId: 'classTeacherId'
} as const

export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


export const StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  motherName: 'motherName',
  fullName: 'fullName',
  dateOfBirth: 'dateOfBirth',
  profileImage: 'profileImage',
  rollNumber: 'rollNumber',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  email: 'email',
  emergencyContact: 'emergencyContact',
  gender: 'gender',
  sectionId: 'sectionId',
  gradeId: 'gradeId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


export const ParentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ParentScalarFieldEnum = (typeof ParentScalarFieldEnum)[keyof typeof ParentScalarFieldEnum]


export const ParentStudentScalarFieldEnum = {
  id: 'id',
  relationship: 'relationship',
  studentId: 'studentId',
  parentId: 'parentId',
  isPrimary: 'isPrimary'
} as const

export type ParentStudentScalarFieldEnum = (typeof ParentStudentScalarFieldEnum)[keyof typeof ParentStudentScalarFieldEnum]


export const StudentAttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  status: 'status',
  note: 'note',
  recordedBy: 'recordedBy',
  studentId: 'studentId',
  present: 'present',
  sectionId: 'sectionId',
  academicYearId: 'academicYearId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type StudentAttendanceScalarFieldEnum = (typeof StudentAttendanceScalarFieldEnum)[keyof typeof StudentAttendanceScalarFieldEnum]


export const StudentDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  documentUrl: 'documentUrl',
  studentId: 'studentId',
  verified: 'verified',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  rejected: 'rejected',
  rejectedBy: 'rejectedBy',
  rejectedAt: 'rejectedAt',
  rejectReason: 'rejectReason',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  note: 'note',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
} as const

export type StudentDocumentScalarFieldEnum = (typeof StudentDocumentScalarFieldEnum)[keyof typeof StudentDocumentScalarFieldEnum]


export const FeeScalarFieldEnum = {
  id: 'id',
  totalFee: 'totalFee',
  paidAmount: 'paidAmount',
  pendingAmount: 'pendingAmount',
  dueDate: 'dueDate',
  status: 'status',
  studentId: 'studentId',
  feeCategoryId: 'feeCategoryId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FeeScalarFieldEnum = (typeof FeeScalarFieldEnum)[keyof typeof FeeScalarFieldEnum]


export const FeePaymentScalarFieldEnum = {
  id: 'id',
  feeId: 'feeId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  receiptNumber: 'receiptNumber',
  note: 'note',
  transactionId: 'transactionId',
  payerId: 'payerId',
  platformFee: 'platformFee',
  recordedBy: 'recordedBy',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FeePaymentScalarFieldEnum = (typeof FeePaymentScalarFieldEnum)[keyof typeof FeePaymentScalarFieldEnum]


export const ScheduledJobScalarFieldEnum = {
  id: 'id',
  data: 'data',
  type: 'type',
  scheduledAt: 'scheduledAt',
  channels: 'channels',
  status: 'status',
  result: 'result',
  error: 'error',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
} as const

export type ScheduledJobScalarFieldEnum = (typeof ScheduledJobScalarFieldEnum)[keyof typeof ScheduledJobScalarFieldEnum]


export const FeeCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
} as const

export type FeeCategoryScalarFieldEnum = (typeof FeeCategoryScalarFieldEnum)[keyof typeof FeeCategoryScalarFieldEnum]


export const AcademicCalendarScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  type: 'type',
  reason: 'reason',
  isRecurring: 'isRecurring',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
} as const

export type AcademicCalendarScalarFieldEnum = (typeof AcademicCalendarScalarFieldEnum)[keyof typeof AcademicCalendarScalarFieldEnum]


export const AnonymousComplaintScalarFieldEnum = {
  id: 'id',
  trackingId: 'trackingId',
  category: 'category',
  severity: 'severity',
  subject: 'subject',
  description: 'description',
  evidenceUrls: 'evidenceUrls',
  submittedAt: 'submittedAt',
  currentStatus: 'currentStatus',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
} as const

export type AnonymousComplaintScalarFieldEnum = (typeof AnonymousComplaintScalarFieldEnum)[keyof typeof AnonymousComplaintScalarFieldEnum]


export const ComplaintStatusTimelineScalarFieldEnum = {
  id: 'id',
  complaintId: 'complaintId',
  note: 'note',
  status: 'status',
  changedBy: 'changedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ComplaintStatusTimelineScalarFieldEnum = (typeof ComplaintStatusTimelineScalarFieldEnum)[keyof typeof ComplaintStatusTimelineScalarFieldEnum]


export const NoticeScalarFieldEnum = {
  id: 'id',
  noticeType: 'noticeType',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  content: 'content',
  summary: 'summary',
  isNoticeApproved: 'isNoticeApproved',
  isDraft: 'isDraft',
  isPublished: 'isPublished',
  emailNotification: 'emailNotification',
  pushNotification: 'pushNotification',
  WhatsAppNotification: 'WhatsAppNotification',
  smsNotification: 'smsNotification',
  targetAudience: 'targetAudience',
  attachments: 'attachments',
  publishedBy: 'publishedBy',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  academicYearId: 'academicYearId'
} as const

export type NoticeScalarFieldEnum = (typeof NoticeScalarFieldEnum)[keyof typeof NoticeScalarFieldEnum]


export const NotificationLogScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  parentId: 'parentId',
  studentId: 'studentId',
  channel: 'channel',
  status: 'status',
  notificationType: 'notificationType',
  units: 'units',
  cost: 'cost',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type NotificationLogScalarFieldEnum = (typeof NotificationLogScalarFieldEnum)[keyof typeof NotificationLogScalarFieldEnum]


export const PerformanceScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  academicYearId: 'academicYearId',
  organizationId: 'organizationId',
  teacherId: 'teacherId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  evaluationTitle: 'evaluationTitle',
  evaluationType: 'evaluationType',
  evaluationDate: 'evaluationDate',
  maxMarks: 'maxMarks',
  obtainedMarks: 'obtainedMarks',
  gradeLabel: 'gradeLabel',
  remarks: 'remarks',
  isPassed: 'isPassed',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PerformanceScalarFieldEnum = (typeof PerformanceScalarFieldEnum)[keyof typeof PerformanceScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const AcademicYearOrderByRelevanceFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy'
} as const

export type AcademicYearOrderByRelevanceFieldEnum = (typeof AcademicYearOrderByRelevanceFieldEnum)[keyof typeof AcademicYearOrderByRelevanceFieldEnum]


export const OrganizationOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  organizationSlug: 'organizationSlug',
  organizationLogo: 'organizationLogo',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  website: 'website',
  createdBy: 'createdBy'
} as const

export type OrganizationOrderByRelevanceFieldEnum = (typeof OrganizationOrderByRelevanceFieldEnum)[keyof typeof OrganizationOrderByRelevanceFieldEnum]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  profileImage: 'profileImage',
  clerkId: 'clerkId',
  organizationId: 'organizationId'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const TeacherOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeCode: 'employeeCode',
  organizationId: 'organizationId'
} as const

export type TeacherOrderByRelevanceFieldEnum = (typeof TeacherOrderByRelevanceFieldEnum)[keyof typeof TeacherOrderByRelevanceFieldEnum]


export const TeacherProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  city: 'city',
  state: 'state',
  qualification: 'qualification',
  resumeUrl: 'resumeUrl',
  bio: 'bio',
  teachingPhilosophy: 'teachingPhilosophy',
  specializedSubjects: 'specializedSubjects',
  preferredGrades: 'preferredGrades',
  idProofUrl: 'idProofUrl',
  linkedinPortfolio: 'linkedinPortfolio',
  languagesKnown: 'languagesKnown',
  certificateUrls: 'certificateUrls'
} as const

export type TeacherProfileOrderByRelevanceFieldEnum = (typeof TeacherProfileOrderByRelevanceFieldEnum)[keyof typeof TeacherProfileOrderByRelevanceFieldEnum]


export const SubjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  organizationId: 'organizationId'
} as const

export type SubjectOrderByRelevanceFieldEnum = (typeof SubjectOrderByRelevanceFieldEnum)[keyof typeof SubjectOrderByRelevanceFieldEnum]


export const TeachingAssignmentOrderByRelevanceFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  organizationId: 'organizationId',
  academicYear: 'academicYear',
  academicYearId: 'academicYearId'
} as const

export type TeachingAssignmentOrderByRelevanceFieldEnum = (typeof TeachingAssignmentOrderByRelevanceFieldEnum)[keyof typeof TeachingAssignmentOrderByRelevanceFieldEnum]


export const GradeOrderByRelevanceFieldEnum = {
  id: 'id',
  grade: 'grade',
  organizationId: 'organizationId'
} as const

export type GradeOrderByRelevanceFieldEnum = (typeof GradeOrderByRelevanceFieldEnum)[keyof typeof GradeOrderByRelevanceFieldEnum]


export const SectionOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  gradeId: 'gradeId',
  organizationId: 'organizationId',
  classTeacherId: 'classTeacherId'
} as const

export type SectionOrderByRelevanceFieldEnum = (typeof SectionOrderByRelevanceFieldEnum)[keyof typeof SectionOrderByRelevanceFieldEnum]


export const StudentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  motherName: 'motherName',
  fullName: 'fullName',
  profileImage: 'profileImage',
  rollNumber: 'rollNumber',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  email: 'email',
  emergencyContact: 'emergencyContact',
  sectionId: 'sectionId',
  gradeId: 'gradeId',
  organizationId: 'organizationId'
} as const

export type StudentOrderByRelevanceFieldEnum = (typeof StudentOrderByRelevanceFieldEnum)[keyof typeof StudentOrderByRelevanceFieldEnum]


export const ParentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  whatsAppNumber: 'whatsAppNumber'
} as const

export type ParentOrderByRelevanceFieldEnum = (typeof ParentOrderByRelevanceFieldEnum)[keyof typeof ParentOrderByRelevanceFieldEnum]


export const ParentStudentOrderByRelevanceFieldEnum = {
  id: 'id',
  relationship: 'relationship',
  studentId: 'studentId',
  parentId: 'parentId'
} as const

export type ParentStudentOrderByRelevanceFieldEnum = (typeof ParentStudentOrderByRelevanceFieldEnum)[keyof typeof ParentStudentOrderByRelevanceFieldEnum]


export const StudentAttendanceOrderByRelevanceFieldEnum = {
  id: 'id',
  note: 'note',
  recordedBy: 'recordedBy',
  studentId: 'studentId',
  sectionId: 'sectionId',
  academicYearId: 'academicYearId'
} as const

export type StudentAttendanceOrderByRelevanceFieldEnum = (typeof StudentAttendanceOrderByRelevanceFieldEnum)[keyof typeof StudentAttendanceOrderByRelevanceFieldEnum]


export const StudentDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileType: 'fileType',
  documentUrl: 'documentUrl',
  studentId: 'studentId',
  verifiedBy: 'verifiedBy',
  rejectedBy: 'rejectedBy',
  rejectReason: 'rejectReason',
  uploadedBy: 'uploadedBy',
  note: 'note',
  organizationId: 'organizationId'
} as const

export type StudentDocumentOrderByRelevanceFieldEnum = (typeof StudentDocumentOrderByRelevanceFieldEnum)[keyof typeof StudentDocumentOrderByRelevanceFieldEnum]


export const FeeOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  feeCategoryId: 'feeCategoryId',
  organizationId: 'organizationId'
} as const

export type FeeOrderByRelevanceFieldEnum = (typeof FeeOrderByRelevanceFieldEnum)[keyof typeof FeeOrderByRelevanceFieldEnum]


export const FeePaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  feeId: 'feeId',
  receiptNumber: 'receiptNumber',
  note: 'note',
  transactionId: 'transactionId',
  payerId: 'payerId',
  recordedBy: 'recordedBy',
  organizationId: 'organizationId'
} as const

export type FeePaymentOrderByRelevanceFieldEnum = (typeof FeePaymentOrderByRelevanceFieldEnum)[keyof typeof FeePaymentOrderByRelevanceFieldEnum]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const ScheduledJobOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  error: 'error',
  createdBy: 'createdBy',
  organizationId: 'organizationId'
} as const

export type ScheduledJobOrderByRelevanceFieldEnum = (typeof ScheduledJobOrderByRelevanceFieldEnum)[keyof typeof ScheduledJobOrderByRelevanceFieldEnum]


export const FeeCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  organizationId: 'organizationId'
} as const

export type FeeCategoryOrderByRelevanceFieldEnum = (typeof FeeCategoryOrderByRelevanceFieldEnum)[keyof typeof FeeCategoryOrderByRelevanceFieldEnum]


export const AcademicCalendarOrderByRelevanceFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  reason: 'reason',
  createdBy: 'createdBy',
  academicYearId: 'academicYearId'
} as const

export type AcademicCalendarOrderByRelevanceFieldEnum = (typeof AcademicCalendarOrderByRelevanceFieldEnum)[keyof typeof AcademicCalendarOrderByRelevanceFieldEnum]


export const AnonymousComplaintOrderByRelevanceFieldEnum = {
  id: 'id',
  trackingId: 'trackingId',
  category: 'category',
  subject: 'subject',
  description: 'description',
  evidenceUrls: 'evidenceUrls',
  organizationId: 'organizationId',
  academicYearId: 'academicYearId'
} as const

export type AnonymousComplaintOrderByRelevanceFieldEnum = (typeof AnonymousComplaintOrderByRelevanceFieldEnum)[keyof typeof AnonymousComplaintOrderByRelevanceFieldEnum]


export const ComplaintStatusTimelineOrderByRelevanceFieldEnum = {
  id: 'id',
  complaintId: 'complaintId',
  note: 'note',
  changedBy: 'changedBy'
} as const

export type ComplaintStatusTimelineOrderByRelevanceFieldEnum = (typeof ComplaintStatusTimelineOrderByRelevanceFieldEnum)[keyof typeof ComplaintStatusTimelineOrderByRelevanceFieldEnum]


export const NoticeOrderByRelevanceFieldEnum = {
  id: 'id',
  noticeType: 'noticeType',
  title: 'title',
  content: 'content',
  summary: 'summary',
  targetAudience: 'targetAudience',
  publishedBy: 'publishedBy',
  organizationId: 'organizationId',
  academicYearId: 'academicYearId'
} as const

export type NoticeOrderByRelevanceFieldEnum = (typeof NoticeOrderByRelevanceFieldEnum)[keyof typeof NoticeOrderByRelevanceFieldEnum]


export const NotificationLogOrderByRelevanceFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  parentId: 'parentId',
  studentId: 'studentId'
} as const

export type NotificationLogOrderByRelevanceFieldEnum = (typeof NotificationLogOrderByRelevanceFieldEnum)[keyof typeof NotificationLogOrderByRelevanceFieldEnum]


export const PerformanceOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  academicYearId: 'academicYearId',
  organizationId: 'organizationId',
  teacherId: 'teacherId',
  gradeId: 'gradeId',
  sectionId: 'sectionId',
  evaluationTitle: 'evaluationTitle',
  gradeLabel: 'gradeLabel',
  remarks: 'remarks'
} as const

export type PerformanceOrderByRelevanceFieldEnum = (typeof PerformanceOrderByRelevanceFieldEnum)[keyof typeof PerformanceOrderByRelevanceFieldEnum]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'YearType'
 */
export type EnumYearTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YearType'>
    


/**
 * Reference to a field of type 'YearType[]'
 */
export type ListEnumYearTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YearType[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'PlanType'
 */
export type EnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType'>
    


/**
 * Reference to a field of type 'PlanType[]'
 */
export type ListEnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'OrganizationType'
 */
export type EnumOrganizationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrganizationType'>
    


/**
 * Reference to a field of type 'OrganizationType[]'
 */
export type ListEnumOrganizationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrganizationType[]'>
    


/**
 * Reference to a field of type 'Role'
 */
export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


/**
 * Reference to a field of type 'Role[]'
 */
export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


/**
 * Reference to a field of type 'EmploymentStatus'
 */
export type EnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus'>
    


/**
 * Reference to a field of type 'EmploymentStatus[]'
 */
export type ListEnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus[]'>
    


/**
 * Reference to a field of type 'AssignmentStatus'
 */
export type EnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus'>
    


/**
 * Reference to a field of type 'AssignmentStatus[]'
 */
export type ListEnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus[]'>
    


/**
 * Reference to a field of type 'Gender'
 */
export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


/**
 * Reference to a field of type 'Gender[]'
 */
export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


/**
 * Reference to a field of type 'AttendanceStatus'
 */
export type EnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus'>
    


/**
 * Reference to a field of type 'AttendanceStatus[]'
 */
export type ListEnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus[]'>
    


/**
 * Reference to a field of type 'DocumentType'
 */
export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


/**
 * Reference to a field of type 'DocumentType[]'
 */
export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'FeeStatus'
 */
export type EnumFeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeeStatus'>
    


/**
 * Reference to a field of type 'FeeStatus[]'
 */
export type ListEnumFeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeeStatus[]'>
    


/**
 * Reference to a field of type 'PaymentStatus'
 */
export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


/**
 * Reference to a field of type 'PaymentStatus[]'
 */
export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


/**
 * Reference to a field of type 'PaymentMethod'
 */
export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


/**
 * Reference to a field of type 'PaymentMethod[]'
 */
export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'scheduledJobType'
 */
export type EnumscheduledJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'scheduledJobType'>
    


/**
 * Reference to a field of type 'scheduledJobType[]'
 */
export type ListEnumscheduledJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'scheduledJobType[]'>
    


/**
 * Reference to a field of type 'NotificationChannel[]'
 */
export type ListEnumNotificationChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationChannel[]'>
    


/**
 * Reference to a field of type 'NotificationChannel'
 */
export type EnumNotificationChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationChannel'>
    


/**
 * Reference to a field of type 'CalendarEventType'
 */
export type EnumCalendarEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarEventType'>
    


/**
 * Reference to a field of type 'CalendarEventType[]'
 */
export type ListEnumCalendarEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarEventType[]'>
    


/**
 * Reference to a field of type 'Severity'
 */
export type EnumSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Severity'>
    


/**
 * Reference to a field of type 'Severity[]'
 */
export type ListEnumSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Severity[]'>
    


/**
 * Reference to a field of type 'ComplaintStatus'
 */
export type EnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus'>
    


/**
 * Reference to a field of type 'ComplaintStatus[]'
 */
export type ListEnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus[]'>
    


/**
 * Reference to a field of type 'NotificationStatus'
 */
export type EnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus'>
    


/**
 * Reference to a field of type 'NotificationStatus[]'
 */
export type ListEnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus[]'>
    


/**
 * Reference to a field of type 'NotificationType'
 */
export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


/**
 * Reference to a field of type 'NotificationType[]'
 */
export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


/**
 * Reference to a field of type 'EvaluationType'
 */
export type EnumEvaluationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EvaluationType'>
    


/**
 * Reference to a field of type 'EvaluationType[]'
 */
export type ListEnumEvaluationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EvaluationType[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  academicYear?: Prisma.AcademicYearOmit
  organization?: Prisma.OrganizationOmit
  user?: Prisma.UserOmit
  teacher?: Prisma.TeacherOmit
  teacherProfile?: Prisma.TeacherProfileOmit
  subject?: Prisma.SubjectOmit
  teachingAssignment?: Prisma.TeachingAssignmentOmit
  grade?: Prisma.GradeOmit
  section?: Prisma.SectionOmit
  student?: Prisma.StudentOmit
  parent?: Prisma.ParentOmit
  parentStudent?: Prisma.ParentStudentOmit
  studentAttendance?: Prisma.StudentAttendanceOmit
  studentDocument?: Prisma.StudentDocumentOmit
  fee?: Prisma.FeeOmit
  feePayment?: Prisma.FeePaymentOmit
  scheduledJob?: Prisma.ScheduledJobOmit
  feeCategory?: Prisma.FeeCategoryOmit
  academicCalendar?: Prisma.AcademicCalendarOmit
  anonymousComplaint?: Prisma.AnonymousComplaintOmit
  complaintStatusTimeline?: Prisma.ComplaintStatusTimelineOmit
  notice?: Prisma.NoticeOmit
  notificationLog?: Prisma.NotificationLogOmit
  performance?: Prisma.PerformanceOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

