
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "D:\\nexus\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "fullTextSearchPostgres"
    ],
    "sourceFilePath": "D:\\nexus\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client\" // (or \"prisma-client-js\") \n  output          = \"../generated/prisma\"\n  engineType      = \"client\"\n  previewFeatures = [\"fullTextSearchPostgres\"]\n}\n\n// , \"queryCompiler\", \"driverAdapters\"\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\nenum PlanType {\n  FREE\n  STANDARD\n  PREMIUM\n  ENTERPRISE\n}\n\nenum OrganizationType {\n  SCHOOL\n  COLLEGE\n  COACHING_CLASS\n  UNIVERSITY\n  KINDERGARTEN\n  TRAINING_INSTITUTE\n  OTHER\n}\n\nmodel AcademicYear {\n  id             String       @id @default(cuid())\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n\n  name      String // \"2024-25\", \"Batch Janâ€“May\", etc.\n  startDate DateTime\n  endDate   DateTime\n\n  type      YearType @default(ANNUAL)\n  isCurrent Boolean  @default(false)\n\n  // Meta Data\n  description        String?\n  complaints         AnonymousComplaint[]\n  notices            Notice[]\n  fees               Fee[]\n  teachingAssignment TeachingAssignment[]\n  studentAttendance  StudentAttendance[]\n  academicCalendar   AcademicCalendar[]\n  examSession        ExamSession[]\n\n  // FeeCategory\n  // StudentDocument\n  // ScheduledJob\n  // NotificationLog\n  // HallTicket\n  // ReportCard\n  // ExamResult\n  // ExamEnrollment\n  createdBy String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([organizationId, name])\n  @@index([organizationId, isCurrent])\n}\n\nenum YearType {\n  ANNUAL // For Schools (Aprilâ€“March)\n  SEMESTER // For Colleges/Universities\n  TRIMESTER // For IB/International Schools\n  BATCH // For Coaching/Training Programs\n}\n\nmodel Organization {\n  id               String  @id @default(cuid())\n  name             String?\n  organizationSlug String  @unique\n  organizationLogo String?\n\n  contactEmail String? // admin or billing contact\n  contactPhone String? // admin or billing contact\n  website      String?\n\n  isActive      Boolean   @default(true)\n  isPaid        Boolean   @default(false)\n  plan          PlanType  @default(FREE)\n  planStartedAt DateTime?\n  planExpiresAt DateTime?\n\n  // Limits (can be used to restrict features based on plan)\n  maxStudents      Int? // set limits per plan\n  organizationType OrganizationType?\n\n  users              User[]\n  notices            Notice[]\n  Student            Student[]\n  StudentDocument    StudentDocument[]\n  Grade              Grade[]\n  Section            Section[]\n  Fee                Fee[]\n  FeeCategory        FeeCategory[]\n  FeePayment         FeePayment[]\n  AcademicCalendar   AcademicCalendar[]\n  AnonymousComplaint AnonymousComplaint[]\n  Teacher            Teacher[]\n  Subject            Subject[]\n  TeachingAssignment TeachingAssignment[]\n  NotificationLog    NotificationLog[]\n  AcademicYear       AcademicYear[]\n  scheduledJob       ScheduledJob[]\n\n  createdBy  String?\n  createdAt  DateTime     @default(now())\n  updatedAt  DateTime     @updatedAt\n  exam       Exam[]\n  hallTicket HallTicket[]\n\n  @@index([id])\n  @@index([organizationSlug])\n}\n\nmodel User {\n  id           String  @id @default(cuid())\n  firstName    String\n  lastName     String\n  email        String  @unique\n  password     String?\n  profileImage String\n  role         Role    @default(STUDENT)\n  clerkId      String  @unique\n  isActive     Boolean @default(true)\n\n  organization   Organization? @relation(fields: [organizationId], references: [id])\n  organizationId String?\n\n  teacher Teacher?\n  student Student?\n  parent  Parent?\n\n  FeePayment FeePayment[]\n\n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  NotificationLog NotificationLog[]\n\n  @@index([id, clerkId])\n  @@index([organizationId])\n}\n\nmodel Grade {\n  id                 String               @id @default(cuid())\n  grade              String\n  organizationId     String\n  organization       Organization         @relation(fields: [organizationId], references: [id])\n  students           Student[]\n  section            Section[]\n  TeachingAssignment TeachingAssignment[]\n\n  @@index([organizationId, grade])\n}\n\nmodel Section {\n  id             String       @id @default(cuid())\n  name           String // e.g., \"A\", \"B\", \"C\"\n  gradeId        String\n  organizationId String\n  grade          Grade        @relation(fields: [gradeId], references: [id], onDelete: Cascade)\n  organization   Organization @relation(fields: [organizationId], references: [id])\n  classTeacherId String?\n  classTeacher   Teacher?     @relation(fields: [classTeacherId], references: [id])\n\n  students           Student[] // Students in this section\n  StudentAttendance  StudentAttendance[]\n  TeachingAssignment TeachingAssignment[]\n\n  @@unique([name, gradeId])\n  @@index([organizationId, name, gradeId])\n}\n\nmodel Teacher {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id])\n\n  employeeCode String? @unique\n\n  employmentStatus EmploymentStatus @default(ACTIVE)\n  isActive         Boolean          @default(true)\n\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n\n  createdAt          DateTime             @default(now())\n  updatedAt          DateTime             @updatedAt\n  profile            TeacherProfile?\n  TeachingAssignment TeachingAssignment[]\n  Section            Section[]\n  // leaves             Leave[]\n  // salaries           Salary[]\n\n  @@index([userId, isActive, employmentStatus, organizationId])\n}\n\nmodel TeacherProfile {\n  id        String  @id @default(cuid())\n  teacherId String  @unique\n  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)\n\n  contactEmail String\n  contactPhone String\n  address      String\n  city         String?\n  state        String?\n  dateOfBirth  DateTime\n\n  qualification     String\n  experienceInYears Int\n  resumeUrl         String?\n\n  joinedAt            DateTime\n  bio                 String?\n  teachingPhilosophy  String?\n  specializedSubjects String[]\n  preferredGrades     String[]\n  idProofUrl          String\n\n  linkedinPortfolio String?\n  languagesKnown    String[]\n  certificateUrls   String[]\n}\n\n// model TeacherAttendance {}\n// model TeacherFeedback {}\n// model TeacherSalary {}\n// model TeacherLeave {}\n// \nmodel Subject {\n  id             String @id @default(cuid())\n  name           String\n  code           String @unique\n  description    String\n  organizationId String\n\n  organization        Organization         @relation(fields: [organizationId], references: [id])\n  teachingAssignments TeachingAssignment[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  exam      Exam[]\n\n  @@index([organizationId, name, code])\n}\n\nmodel TeachingAssignment {\n  id             String @id @default(cuid())\n  teacherId      String\n  subjectId      String\n  gradeId        String\n  sectionId      String\n  organizationId String\n\n  academicYear String?\n  status       AssignmentStatus @default(PENDING)\n\n  // âœ… Complete relations\n  teacher      Teacher      @relation(fields: [teacherId], references: [id])\n  subject      Subject      @relation(fields: [subjectId], references: [id])\n  grade        Grade        @relation(fields: [gradeId], references: [id])\n  section      Section      @relation(fields: [sectionId], references: [id])\n  organization Organization @relation(fields: [organizationId], references: [id])\n\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])\n  academicYearId String?\n\n  // âœ… Proper unique constraint\n  @@unique([teacherId, subjectId, gradeId, sectionId, academicYearId])\n  @@index([teacherId])\n  @@index([subjectId, sectionId])\n  @@index([organizationId])\n}\n\nenum AssignmentStatus {\n  PENDING\n  ASSIGNED\n  COMPLETED\n  INACTIVE\n}\n\nmodel Student {\n  id     String @id @default(cuid())\n  user   User   @relation(fields: [userId], references: [id])\n  userId String @unique\n\n  firstName        String\n  lastName         String\n  middleName       String?\n  motherName       String?\n  fullName         String?\n  dateOfBirth      DateTime\n  profileImage     String?\n  rollNumber       String   @unique\n  phoneNumber      String\n  whatsAppNumber   String\n  email            String\n  emergencyContact String\n  gender           Gender\n\n  section   Section @relation(fields: [sectionId], references: [id])\n  sectionId String\n  gradeId   String\n  grade     Grade   @relation(fields: [gradeId], references: [id])\n\n  organization   Organization @relation(fields: [organizationId], references: [id])\n  organizationId String\n\n  Fee               Fee[]\n  parents           ParentStudent[]\n  StudentAttendance StudentAttendance[]\n  StudentDocument   StudentDocument[]\n  // assignments    Assignment[]\n  // complaints     Complaint[]\n\n  NotificationLog NotificationLog[]\n  reportCard      ReportCard[]\n  hallTicket      HallTicket[]\n  examResult      ExamResult[]\n\n  createdAt      DateTime         @default(now())\n  updatedAt      DateTime         @updatedAt\n  examEnrollment ExamEnrollment[]\n\n  @@unique([organizationId, rollNumber])\n  @@index([email]) // User lookup\n  @@index([phoneNumber])\n  @@index([rollNumber])\n  @@index([gradeId])\n  @@index([sectionId])\n}\n\nmodel Parent {\n  id     String  @id @default(cuid())\n  userId String? @unique\n  user   User?   @relation(fields: [userId], references: [id])\n\n  firstName      String\n  lastName       String\n  email          String @unique\n  phoneNumber    String\n  whatsAppNumber String\n\n  students ParentStudent[] // change to children\n\n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  NotificationLog NotificationLog[]\n}\n\nmodel ParentStudent {\n  id           String   @id @default(cuid())\n  relationship String\n  student      Student  @relation(fields: [studentId], references: [id])\n  studentId    String\n  parent       Parent   @relation(fields: [parentId], references: [id])\n  parentId     String\n  isPrimary    Boolean? @default(false)\n  // @@unique([studentId, parentId])\n\n  @@index([relationship])\n  @@index([parentId, studentId])\n}\n\nmodel StudentAttendance {\n  id String @id @default(cuid())\n\n  date       DateTime\n  status     AttendanceStatus\n  note       String?\n  recordedBy String\n\n  studentId String\n  present   Boolean @default(false)\n\n  sectionId String\n  section   Section @relation(fields: [sectionId], references: [id])\n\n  student        Student       @relation(fields: [studentId], references: [id])\n  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])\n  academicYearId String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([studentId, date])\n}\n\nmodel StudentDocument {\n  id String @id @default(cuid())\n\n  type        DocumentType\n  fileName    String?\n  fileSize    Int? // (in bytes)\n  fileType    String?\n  documentUrl String\n\n  student   Student @relation(fields: [studentId], references: [id])\n  studentId String\n\n  verified   Boolean   @default(false)\n  verifiedBy String? // Clerk ID or Admin ID who verified\n  verifiedAt DateTime?\n\n  rejected     Boolean   @default(false)\n  rejectedBy   String? // Clerk ID or Admin ID who verified\n  rejectedAt   DateTime?\n  rejectReason String?\n\n  uploadedBy String? // Clerk ID or Student/Parent ID (depends on who uploads)\n  uploadedAt DateTime @default(now())\n\n  note String?\n\n  isDeleted Boolean   @default(false) // Soft delete\n  deletedAt DateTime?\n\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n  Organization   Organization? @relation(fields: [organizationId], references: [id])\n  organizationId String\n\n  @@index([organizationId])\n  @@index([studentId, type])\n  @@index([verified, uploadedAt])\n}\n\nenum DocumentType {\n  AADHAAR\n  PAN\n  PASSPORT\n  BIRTH_CERTIFICATE\n  TRANSFER_CERTIFICATE\n  BANK_PASSBOOK\n  PARENT_ID\n  AGREEMENT\n}\n\nmodel Fee {\n  id             String       @id @default(cuid())\n  totalFee       Float\n  paidAmount     Float        @default(0)\n  pendingAmount  Float?\n  dueDate        DateTime\n  status         FeeStatus    @default(UNPAID)\n  studentId      String\n  student        Student      @relation(fields: [studentId], references: [id])\n  feeCategoryId  String\n  feeCategory    FeeCategory  @relation(fields: [feeCategoryId], references: [id])\n  Organization   Organization @relation(fields: [organizationId], references: [id])\n  organizationId String\n  payments       FeePayment[]\n\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])\n  academicYearId String?\n\n  @@index([studentId])\n  @@index([status])\n  @@index([dueDate])\n  @@index([organizationId])\n}\n\nmodel FeePayment {\n  id             String        @id @default(cuid())\n  feeId          String\n  fee            Fee           @relation(fields: [feeId], references: [id])\n  amount         Float\n  status         PaymentStatus @default(UNPAID)\n  paymentMethod  PaymentMethod\n  paymentDate    DateTime      @default(now())\n  receiptNumber  String        @unique\n  note           String?\n  transactionId  String? // From payment gateway (UPI ref, bank ref, etc.)\n  payerId        String\n  payer          User          @relation(fields: [payerId], references: [id])\n  platformFee    Float?\n  recordedBy     String? // Admin ID (optional, if needed) \n  organizationId String\n  organization   Organization  @relation(fields: [organizationId], references: [id])\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([feeId])\n  @@index([paymentMethod])\n  @@index([paymentDate])\n  @@index([payerId])\n  @@index([status])\n  @@index([organizationId])\n}\n\nenum PaymentMethod {\n  CASH\n  UPI\n  CARD\n  BANK_TRANSFER\n  CHEQUE\n  ONLINE\n}\n\nenum PaymentStatus {\n  PENDING\n  UNPAID\n  COMPLETED\n  FAILED\n  REFUNDED\n  CANCELLED\n}\n\nenum FeeStatus {\n  PAID\n  UNPAID\n  OVERDUE\n}\n\nmodel FeeCategory {\n  id             String       @id @default(cuid())\n  name           String // e.g., \"Yearly Fee\", \"Exam Fee\", \"Lab Fee\", etc.\n  description    String?\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  fees           Fee[]\n  Organization   Organization @relation(fields: [organizationId], references: [id])\n  organizationId String\n\n  @@unique([name, organizationId])\n  @@index([organizationId])\n}\n\nenum AttendanceStatus {\n  PRESENT\n  ABSENT\n  LATE\n  // Create After Stable Version\n  //   EXCUSED_ABSENT = 'EXCUSED_ABSENT',\n  // UNEXCUSED_ABSENT = 'UNEXCUSED_ABSENT',\n  // EARLY_DISMISSAL = 'EARLY_DISMISSAL',\n}\n\nmodel AcademicCalendar {\n  id             String       @id @default(cuid())\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n\n  // Event details\n  name      String // e.g., \"Diwali Break\", \"Emergency Closure\", \"Tech Fest\"\n  startDate DateTime // Start date of the holiday or event\n  endDate   DateTime // End date of the holiday or event\n\n  // Event categorization\n  type           CalendarEventType // PLANNED, SUDDEN, INSTITUTION_SPECIFIC\n  reason         String? // e.g., \"Festival\", \"Weather Emergency\", \"Exam Prep\"\n  isRecurring    Boolean           @default(false) // Whether the event repeats annually\n  createdBy      String // ID of the user who created the entry (admin/teacher)\n  createdAt      DateTime          @default(now())\n  updatedAt      DateTime          @updatedAt\n  academicYear   AcademicYear?     @relation(fields: [academicYearId], references: [id])\n  academicYearId String?\n\n  @@unique([organizationId, startDate, endDate]) // Prevent duplicate entries for the same date range\n  @@index([organizationId, startDate, endDate]) // Optimize queries for date ranges\n}\n\nenum CalendarEventType {\n  PLANNED // Standard holidays (e.g., festivals, semester breaks)\n  SUDDEN // Emergency closures (e.g., weather, strikes)\n  INSTITUTION_SPECIFIC // Custom events (e.g., college fests, coaching workshops)\n}\n\nmodel AnonymousComplaint {\n  id            String          @id @default(cuid())\n  trackingId    String          @unique\n  category      String\n  severity      Severity        @default(MEDIUM)\n  subject       String\n  description   String\n  evidenceUrls  String[]\n  submittedAt   DateTime        @default(now())\n  currentStatus ComplaintStatus @default(PENDING)\n\n  organizationId          String\n  organization            Organization              @relation(fields: [organizationId], references: [id])\n  createdAt               DateTime                  @default(now())\n  updatedAt               DateTime                  @updatedAt\n  ComplaintStatusTimeline ComplaintStatusTimeline[]\n  academicYear            AcademicYear?             @relation(fields: [academicYearId], references: [id])\n  academicYearId          String?\n}\n\nmodel ComplaintStatusTimeline {\n  id          String             @id @default(cuid())\n  complaintId String\n  note        String?\n  status      ComplaintStatus    @default(PENDING)\n  changedBy   String?\n  complaint   AnonymousComplaint @relation(fields: [complaintId], references: [id])\n  createdAt   DateTime           @default(now())\n  updatedAt   DateTime           @updatedAt\n\n  @@index([complaintId])\n}\n\nenum Severity {\n  LOW\n  MEDIUM\n  HIGH\n  CRITICAL\n}\n\nenum ComplaintStatus {\n  PENDING\n  RESOLVED\n  CLOSED\n  UNDER_REVIEW\n  INVESTIGATING\n  REJECTED\n}\n\nmodel Notice {\n  id String @id @default(cuid())\n\n  title   String\n  content String\n  summary String?\n\n  startDate DateTime\n  endDate   DateTime\n\n  noticeType NoticeType\n  priority   NoticePriority @default(MEDIUM)\n  status     NoticeStatus   @default(DRAFT)\n\n  createdBy   String // Teacher userId\n  approvedBy  String? // Admin userId\n  approvedAt  DateTime?\n  publishedBy String? // Who finally published (could be admin)\n  publishedAt DateTime?\n\n  isUrgent             Boolean @default(false)\n  emailNotification    Boolean @default(true)\n  pushNotification     Boolean @default(false)\n  whatsAppNotification Boolean @default(false)\n  smsNotification      Boolean @default(false)\n\n  targetAudience String[] // String[] Array of Target Audience\n  attachments    NoticeAttachment[]\n  notifications  NotificationLog[]\n\n  organization   Organization  @relation(fields: [organizationId], references: [id])\n  organizationId String\n  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])\n  academicYearId String?\n\n  // @@fulltext([title, content]) // For search\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([organizationId, status, noticeType])\n  @@index([noticeType, priority, status])\n  @@index([startDate, endDate])\n}\n\nmodel NoticeAttachment {\n  id       String @id @default(cuid())\n  noticeId String\n  notice   Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)\n\n  fileName   String\n  fileUrl    String\n  fileType   String // pdf, image/png, docx, etc.\n  fileSize   Int // in bytes\n  publicId   String\n  uploadedAt DateTime @default(now())\n}\n\nenum NoticeType {\n  GENERAL // plain circular\n  TRIP\n  EVENT // Annual Day, Sports Day\n  EXAM // Mid-term, practical, board\n  HOLIDAY // Diwali break, \n  DEADLINE // Fee last date, form submission\n  TIMETABLE // revised class schedule\n  RESULT // published marks / report-cards\n}\n\nenum NoticePriority {\n  LOW\n  MEDIUM\n  HIGH\n  URGENT\n}\n\nenum NoticeStatus {\n  DRAFT\n  PENDING_REVIEW // When publishAt is set\n  PUBLISHED\n  REJECTED\n  EXPIRED\n  ARCHIVED\n}\n\nmodel NotificationLog {\n  id             String       @id @default(cuid())\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n\n  // WHO received\n  userId    String? // optional Clerk/User ID (can be teacher, parent, etc.)\n  user      User?    @relation(fields: [userId], references: [id])\n  parentId  String? // optional: if linked to a parent directly`\n  parent    Parent?  @relation(fields: [parentId], references: [id])\n  studentId String? // optional: useful for linking fee/attendance alerts\n  student   Student? @relation(fields: [studentId], references: [id])\n\n  channel          NotificationChannel\n  status           NotificationStatus  @default(SENT)\n  notificationType NotificationType\n\n  notice   Notice? @relation(fields: [noticeId], references: [id])\n  noticeId String?\n\n  // Delivery details\n  errorMessage String?\n  retryCount   Int     @default(0)\n  maxRetries   Int     @default(3)\n  units        Int     @default(1) // optional, 1 per message, or set for bulk\n  cost         Float   @default(0)\n\n  sentAt    DateTime @default(now())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([organizationId, sentAt])\n  @@index([channel, status])\n  @@index([userId])\n}\n\nenum NotificationType {\n  NOTICE\n  FEE_REMINDER\n  ATTENDANCE_ALERT\n  DOCUMENT_REQUEST\n  GENERAL_ANNOUNCEMENT\n  Exam\n}\n\nenum NotificationChannel {\n  EMAIL\n  SMS\n  WHATSAPP\n  PUSH\n}\n\nenum NotificationStatus {\n  PENDING\n  SENT\n  FAILED\n  DELIVERED\n}\n\nmodel ScheduledJob {\n  id          String                @id @default(cuid())\n  data        Json\n  type        scheduledJobType\n  scheduledAt DateTime\n  executedAt  DateTime? // when processing started\n  completedAt DateTime? // when finished\n  channels    NotificationChannel[]\n\n  status String @default(\"PENDING\") // PENDING, PROCESSING, COMPLETED, FAILED\n\n  result Json?\n  error  String?\n\n  createdBy      String?\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n\n  @@index([organizationId, status])\n  @@index([scheduledAt])\n}\n\nenum scheduledJobType {\n  FEE_REMINDER\n  NOTICE\n  EXAM\n}\n\nenum Role {\n  ADMIN\n  TEACHER\n  STUDENT\n  PARENT\n}\n\nenum Gender {\n  MALE\n  FEMALE\n  OTHER\n}\n\nenum EmploymentStatus {\n  ACTIVE\n  ON_LEAVE\n  RESIGNED\n  RETIRED\n  TERMINATED\n  CONTRACTUAL\n  PROBATION\n  SUSPENDED\n}\n\nenum EvaluationType {\n  TEST\n  EXAM\n  ASSIGNMENT\n  PROJECT\n  PRACTICAL\n  QUIZ\n  ORAL\n  INTERNAL\n  FINAL\n  OTHER\n}\n\nenum ExamStatus {\n  UPCOMING //SCHEDULED   // âœ… Better than UPCOMING\n  LIVE\n  COMPLETED\n  CANCELLED\n  //  POSTPONED   // Rescheduled\n}\n\nenum StudentExamStatus {\n  ENROLLED // Default for all students\n  ATTENDED // Appeared for exam\n  ABSENT // Didn't appear\n  EXEMPT // Medical leave, etc.\n  DISQUALIFIED // Disciplinary action\n}\n\nenum ExamMode {\n  ONLINE\n  OFFLINE\n  PRACTICAL\n  VIVA\n  TAKE_HOME\n}\n\nmodel ExamSession {\n  id             String       @id @default(cuid())\n  title          String // \"Midterm 2024\"\n  description    String?\n  academicYearId String\n  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])\n  startDate      DateTime // Session Start\n  endDate        DateTime // Session End  \n  createdBy      String\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  exams       Exam[]\n  reportCards ReportCard[]\n  hallTickets HallTicket[]\n\n  @@unique([academicYearId, title])\n  @@index([academicYearId])\n  @@index([startDate, endDate])\n}\n\nmodel Exam {\n  id          String  @id @default(cuid())\n  title       String // \"Maths Midterm\"\n  description String?\n\n  examSessionId      String\n  examSession        ExamSession      @relation(fields: [examSessionId], references: [id])\n  subjectId          String\n  subject            Subject          @relation(fields: [subjectId], references: [id])\n  gradeId            String\n  sectionId          String\n  // batchId           String? // Only For coaching batches (link to Batch model if exists) \n  organizationId     String\n  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  maxMarks           Float\n  passingMarks       Float? // Optional threshold for pass/fail\n  weightage          Float?\n  evaluationType     EvaluationType\n  mode               ExamMode\n  status             ExamStatus       @default(UPCOMING)\n  instructions       String?\n  durationInMinutes  Int? // Minutes\n  venueMapUrl        String?\n  venue              String?\n  isResultsPublished Boolean          @default(false)\n  supervisors        String[] // Separate by comma \n  startDate          DateTime // Specific exam start (overrides session if needed)\n  endDate            DateTime\n  createdAt          DateTime         @default(now())\n  updatedAt          DateTime         @updatedAt\n  hallTickets        HallTicket[]\n  examResult         ExamResult[]\n  examEnrollment     ExamEnrollment[]\n\n  // @@unique([examSessionId, subjectId, gradeId, sectionId])\n  @@unique([examSessionId, gradeId, sectionId, subjectId, title])\n  @@index([organizationId, status])\n  @@index([gradeId, sectionId])\n  // @@index([batchId])\n  @@index([startDate, endDate])\n}\n\nmodel ExamEnrollment {\n  id              String            @id @default(cuid())\n  studentId       String\n  examId          String\n  status          StudentExamStatus @default(ENROLLED)\n  enrolledAt      DateTime          @default(now())\n  exemptionReason String? // Medical leave, etc.\n\n  student Student @relation(fields: [studentId], references: [id])\n  exam    Exam    @relation(fields: [examId], references: [id])\n\n  @@unique([studentId, examId])\n}\n\nmodel ExamResult {\n  id        String @id @default(cuid())\n  studentId String\n  examId    String\n\n  obtainedMarks      Float?\n  percentage         Float? // Auto-calculated\n  gradeLabel         String?\n  remarks            String?\n  isPassed           Boolean?\n  isAbsent           Boolean  @default(false)\n  isResultsPublished Boolean  @default(false)\n\n  student Student @relation(fields: [studentId], references: [id])\n  exam    Exam    @relation(fields: [examId], references: [id])\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([examId, studentId])\n  @@index([examId])\n  @@index([studentId])\n}\n\nmodel HallTicket {\n  id            String  @id @default(cuid())\n  studentId     String\n  examId        String?\n  examSessionId String?\n\n  pdfUrl         String // S3 link with student details, QR code\n  qrCode         String?\n  generatedAt    DateTime  @default(now())\n  downloadedAt   DateTime? // Track downloads\n  expiryDate     DateTime? // Post-exam expiry\n  organizationId String\n\n  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  exam         Exam?        @relation(fields: [examId], references: [id], onDelete: Cascade)\n  examSession  ExamSession? @relation(fields: [examSessionId], references: [id], onDelete: Cascade)\n  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n\n  @@unique([studentId, examId])\n  @@index([studentId, generatedAt])\n  @@index([organizationId])\n}\n\nmodel ReportCard {\n  id            String @id @default(cuid())\n  studentId     String\n  examSessionId String\n  // Academic Performance\n  totalMaxMarks Float // Sum of all exam max marks\n  totalObtained Float // Sum of obtained marks\n  percentage    Float // Auto-calculated\n  cgpa          Float? // If applicable\n\n  // Results\n  overallGrade String // A+, A, B+, etc.\n  resultStatus ResultStatus\n  classRank    Int? // Rank in class\n  gradeRank    Int? // Rank in grade\n\n  // Additional Details\n  attendancePercent Float? // Overall attendance\n  conductGrade      String? // A, B, C for conduct\n  remarks           String?\n  principalRemarks  String?\n\n  rank        Int? // Overall session rank\n  pdfUrl      String? // Generated PDF (e.g., S3 link)\n  generatedAt DateTime? // When PDF was created\n  student     Student     @relation(fields: [studentId], references: [id])\n  examSession ExamSession @relation(fields: [examSessionId], references: [id])\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([studentId, examSessionId])\n}\n\nenum ResultStatus {\n  PASSED\n  FAILED\n  PROMOTED // Promoted to next class despite failure\n  COMPARTMENT // Failed in some subjects\n  WITHHELD // Results withheld due to issues\n}\n\n// FeedBackCollection\n// \"TeacherFeedback\",          // Missing - for teachers to give student feedback\n// \"MonthlyAttendanceReport\",  // Missing - AI-generated monthly summary of attendance\n// \"FeedbackCategory\",         // Optional - categorize feedback (e.g., Academics, Behavior)\n// \"Assignment\",            // Not in schema - could be needed for academic tracking\n// \"AssignmentSubmission\"    // Not in schema - could be needed for academic tracking\n// LeaveManagement\n// Lead Management\n// Courses and Batches\n// Certificate Generator\n// Amazon Alexa  Integration\n\n// Teacher  : Salary / Payout, Leave Management, Assigned Leads , Profile , Write FeedBack , Give Assignments, Fill Exam Mark , Bio Attendance , \n// Parent : View Fee Receipts , Download Receipts , Pay Fees , Parent Profile , SMS Notification , WhatsApp Notification , Setting Page \n// Student : View Fee Receipts , Download Receipts , Pay Fees , Student Profile , SMS Notification , WhatsApp Notification , Setting Page , Dashboard\n// Admin : ALl Reports / AI Generated  View Fee Receipts , Download Receipts , Phonepay Payment Gateway Money , Admin Profile , SMS Notification , WhatsApp Notification , Setting Page , Organization Management\n\n// Student Bulk Import \n\n// Payout : Corporate Bank Account || IFC CODE  Branch || Verify by consorn bank || \n\n// model Leave {\n//   id           String     @id @default(cuid())\n//   startDate    DateTime\n//   endDate      DateTime\n//   reason       String\n//   status       LeaveStatus @default(PENDING)\n//   approvedBy   String?\n//   approvedAt   DateTime?\n//   rejectedNote String?\n\n//   teacher   Teacher? @relation(fields: [teacherId], references: [id])\n//   teacherId String?\n//   student   Student? @relation(fields: [studentId], references: [id])\n//   studentId String?\n\n//   academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])\n//   academicYearId String\n\n//   createdAt DateTime @default(now())\n//   updatedAt DateTime @updatedAt\n//   deletedAt DateTime?\n\n//   @@index([teacherId, startDate])\n//   @@index([studentId, startDate])\n// }\n",
  "inlineSchemaHash": "fc304a1c3721e93eaa1bd6fca9bb5b0801eab022c46e4fe61db5dd6a5b380cd4",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"AcademicYear\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"AcademicYearToOrganization\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"YearType\"},{\"name\":\"isCurrent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"complaints\",\"kind\":\"object\",\"type\":\"AnonymousComplaint\",\"relationName\":\"AcademicYearToAnonymousComplaint\"},{\"name\":\"notices\",\"kind\":\"object\",\"type\":\"Notice\",\"relationName\":\"AcademicYearToNotice\"},{\"name\":\"fees\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"AcademicYearToFee\"},{\"name\":\"teachingAssignment\",\"kind\":\"object\",\"type\":\"TeachingAssignment\",\"relationName\":\"AcademicYearToTeachingAssignment\"},{\"name\":\"studentAttendance\",\"kind\":\"object\",\"type\":\"StudentAttendance\",\"relationName\":\"AcademicYearToStudentAttendance\"},{\"name\":\"academicCalendar\",\"kind\":\"object\",\"type\":\"AcademicCalendar\",\"relationName\":\"AcademicCalendarToAcademicYear\"},{\"name\":\"examSession\",\"kind\":\"object\",\"type\":\"ExamSession\",\"relationName\":\"AcademicYearToExamSession\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Organization\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationSlug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationLogo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPaid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"plan\",\"kind\":\"enum\",\"type\":\"PlanType\"},{\"name\":\"planStartedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"planExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"maxStudents\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"organizationType\",\"kind\":\"enum\",\"type\":\"OrganizationType\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrganizationToUser\"},{\"name\":\"notices\",\"kind\":\"object\",\"type\":\"Notice\",\"relationName\":\"NoticeToOrganization\"},{\"name\":\"Student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"OrganizationToStudent\"},{\"name\":\"StudentDocument\",\"kind\":\"object\",\"type\":\"StudentDocument\",\"relationName\":\"OrganizationToStudentDocument\"},{\"name\":\"Grade\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"GradeToOrganization\"},{\"name\":\"Section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"OrganizationToSection\"},{\"name\":\"Fee\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"FeeToOrganization\"},{\"name\":\"FeeCategory\",\"kind\":\"object\",\"type\":\"FeeCategory\",\"relationName\":\"FeeCategoryToOrganization\"},{\"name\":\"FeePayment\",\"kind\":\"object\",\"type\":\"FeePayment\",\"relationName\":\"FeePaymentToOrganization\"},{\"name\":\"AcademicCalendar\",\"kind\":\"object\",\"type\":\"AcademicCalendar\",\"relationName\":\"AcademicCalendarToOrganization\"},{\"name\":\"AnonymousComplaint\",\"kind\":\"object\",\"type\":\"AnonymousComplaint\",\"relationName\":\"AnonymousComplaintToOrganization\"},{\"name\":\"Teacher\",\"kind\":\"object\",\"type\":\"Teacher\",\"relationName\":\"OrganizationToTeacher\"},{\"name\":\"Subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"OrganizationToSubject\"},{\"name\":\"TeachingAssignment\",\"kind\":\"object\",\"type\":\"TeachingAssignment\",\"relationName\":\"OrganizationToTeachingAssignment\"},{\"name\":\"NotificationLog\",\"kind\":\"object\",\"type\":\"NotificationLog\",\"relationName\":\"NotificationLogToOrganization\"},{\"name\":\"AcademicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToOrganization\"},{\"name\":\"scheduledJob\",\"kind\":\"object\",\"type\":\"ScheduledJob\",\"relationName\":\"OrganizationToScheduledJob\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToOrganization\"},{\"name\":\"hallTicket\",\"kind\":\"object\",\"type\":\"HallTicket\",\"relationName\":\"HallTicketToOrganization\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"clerkId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToUser\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"Teacher\",\"relationName\":\"TeacherToUser\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToUser\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Parent\",\"relationName\":\"ParentToUser\"},{\"name\":\"FeePayment\",\"kind\":\"object\",\"type\":\"FeePayment\",\"relationName\":\"FeePaymentToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"NotificationLog\",\"kind\":\"object\",\"type\":\"NotificationLog\",\"relationName\":\"NotificationLogToUser\"}],\"dbName\":null},\"Grade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"GradeToOrganization\"},{\"name\":\"students\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"GradeToStudent\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"GradeToSection\"},{\"name\":\"TeachingAssignment\",\"kind\":\"object\",\"type\":\"TeachingAssignment\",\"relationName\":\"GradeToTeachingAssignment\"}],\"dbName\":null},\"Section\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gradeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"GradeToSection\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToSection\"},{\"name\":\"classTeacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classTeacher\",\"kind\":\"object\",\"type\":\"Teacher\",\"relationName\":\"SectionToTeacher\"},{\"name\":\"students\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"SectionToStudent\"},{\"name\":\"StudentAttendance\",\"kind\":\"object\",\"type\":\"StudentAttendance\",\"relationName\":\"SectionToStudentAttendance\"},{\"name\":\"TeachingAssignment\",\"kind\":\"object\",\"type\":\"TeachingAssignment\",\"relationName\":\"SectionToTeachingAssignment\"}],\"dbName\":null},\"Teacher\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherToUser\"},{\"name\":\"employeeCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"employmentStatus\",\"kind\":\"enum\",\"type\":\"EmploymentStatus\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToTeacher\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"TeacherProfile\",\"relationName\":\"TeacherToTeacherProfile\"},{\"name\":\"TeachingAssignment\",\"kind\":\"object\",\"type\":\"TeachingAssignment\",\"relationName\":\"TeacherToTeachingAssignment\"},{\"name\":\"Section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToTeacher\"}],\"dbName\":null},\"TeacherProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"Teacher\",\"relationName\":\"TeacherToTeacherProfile\"},{\"name\":\"contactEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"qualification\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experienceInYears\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"resumeUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teachingPhilosophy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specializedSubjects\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredGrades\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idProofUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"linkedinPortfolio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"languagesKnown\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"certificateUrls\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Subject\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToSubject\"},{\"name\":\"teachingAssignments\",\"kind\":\"object\",\"type\":\"TeachingAssignment\",\"relationName\":\"SubjectToTeachingAssignment\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToSubject\"}],\"dbName\":null},\"TeachingAssignment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gradeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"academicYear\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AssignmentStatus\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"Teacher\",\"relationName\":\"TeacherToTeachingAssignment\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"SubjectToTeachingAssignment\"},{\"name\":\"grade\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"GradeToTeachingAssignment\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToTeachingAssignment\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToTeachingAssignment\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"AcademicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToTeachingAssignment\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Student\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"middleName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"motherName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profileImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rollNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"whatsAppNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emergencyContact\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToStudent\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gradeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"GradeToStudent\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToStudent\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Fee\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"FeeToStudent\"},{\"name\":\"parents\",\"kind\":\"object\",\"type\":\"ParentStudent\",\"relationName\":\"ParentStudentToStudent\"},{\"name\":\"StudentAttendance\",\"kind\":\"object\",\"type\":\"StudentAttendance\",\"relationName\":\"StudentToStudentAttendance\"},{\"name\":\"StudentDocument\",\"kind\":\"object\",\"type\":\"StudentDocument\",\"relationName\":\"StudentToStudentDocument\"},{\"name\":\"NotificationLog\",\"kind\":\"object\",\"type\":\"NotificationLog\",\"relationName\":\"NotificationLogToStudent\"},{\"name\":\"reportCard\",\"kind\":\"object\",\"type\":\"ReportCard\",\"relationName\":\"ReportCardToStudent\"},{\"name\":\"hallTicket\",\"kind\":\"object\",\"type\":\"HallTicket\",\"relationName\":\"HallTicketToStudent\"},{\"name\":\"examResult\",\"kind\":\"object\",\"type\":\"ExamResult\",\"relationName\":\"ExamResultToStudent\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"examEnrollment\",\"kind\":\"object\",\"type\":\"ExamEnrollment\",\"relationName\":\"ExamEnrollmentToStudent\"}],\"dbName\":null},\"Parent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ParentToUser\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"whatsAppNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"students\",\"kind\":\"object\",\"type\":\"ParentStudent\",\"relationName\":\"ParentToParentStudent\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"NotificationLog\",\"kind\":\"object\",\"type\":\"NotificationLog\",\"relationName\":\"NotificationLogToParent\"}],\"dbName\":null},\"ParentStudent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"relationship\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ParentStudentToStudent\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Parent\",\"relationName\":\"ParentToParentStudent\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPrimary\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"StudentAttendance\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AttendanceStatus\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recordedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"present\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToStudentAttendance\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentAttendance\"},{\"name\":\"academicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToStudentAttendance\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"StudentDocument\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"DocumentType\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fileType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentDocument\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"verifiedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"rejected\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rejectedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rejectedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"rejectReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToStudentDocument\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Fee\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalFee\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"paidAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"pendingAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FeeStatus\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"FeeToStudent\"},{\"name\":\"feeCategoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"feeCategory\",\"kind\":\"object\",\"type\":\"FeeCategory\",\"relationName\":\"FeeToFeeCategory\"},{\"name\":\"Organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"FeeToOrganization\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"FeePayment\",\"relationName\":\"FeeToFeePayment\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"academicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToFee\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"FeePayment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"feeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fee\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"FeeToFeePayment\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"paymentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"receiptNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FeePaymentToUser\"},{\"name\":\"platformFee\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"recordedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"FeePaymentToOrganization\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FeeCategory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"fees\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"FeeToFeeCategory\"},{\"name\":\"Organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"FeeCategoryToOrganization\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"AcademicCalendar\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"AcademicCalendarToOrganization\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"CalendarEventType\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRecurring\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"academicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicCalendarToAcademicYear\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"AnonymousComplaint\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"trackingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"severity\",\"kind\":\"enum\",\"type\":\"Severity\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"evidenceUrls\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"currentStatus\",\"kind\":\"enum\",\"type\":\"ComplaintStatus\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"AnonymousComplaintToOrganization\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ComplaintStatusTimeline\",\"kind\":\"object\",\"type\":\"ComplaintStatusTimeline\",\"relationName\":\"AnonymousComplaintToComplaintStatusTimeline\"},{\"name\":\"academicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToAnonymousComplaint\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"ComplaintStatusTimeline\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"complaintId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ComplaintStatus\"},{\"name\":\"changedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"complaint\",\"kind\":\"object\",\"type\":\"AnonymousComplaint\",\"relationName\":\"AnonymousComplaintToComplaintStatusTimeline\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"noticeType\",\"kind\":\"enum\",\"type\":\"NoticeType\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"NoticePriority\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"NoticeStatus\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"approvedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"approvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publishedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isUrgent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailNotification\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"pushNotification\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"whatsAppNotification\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"smsNotification\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"targetAudience\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"NoticeAttachment\",\"relationName\":\"NoticeToNoticeAttachment\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"NotificationLog\",\"relationName\":\"NoticeToNotificationLog\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"NoticeToOrganization\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"academicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToNotice\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"NoticeAttachment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"noticeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notice\",\"kind\":\"object\",\"type\":\"Notice\",\"relationName\":\"NoticeToNoticeAttachment\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"publicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"NotificationLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"NotificationLogToOrganization\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationLogToUser\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Parent\",\"relationName\":\"NotificationLogToParent\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"NotificationLogToStudent\"},{\"name\":\"channel\",\"kind\":\"enum\",\"type\":\"NotificationChannel\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"NotificationStatus\"},{\"name\":\"notificationType\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"notice\",\"kind\":\"object\",\"type\":\"Notice\",\"relationName\":\"NoticeToNotificationLog\"},{\"name\":\"noticeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"retryCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxRetries\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"units\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cost\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ScheduledJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"scheduledJobType\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"executedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"channels\",\"kind\":\"enum\",\"type\":\"NotificationChannel\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"result\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToScheduledJob\"}],\"dbName\":null},\"ExamSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"academicYearId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"academicYear\",\"kind\":\"object\",\"type\":\"AcademicYear\",\"relationName\":\"AcademicYearToExamSession\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToExamSession\"},{\"name\":\"reportCards\",\"kind\":\"object\",\"type\":\"ReportCard\",\"relationName\":\"ExamSessionToReportCard\"},{\"name\":\"hallTickets\",\"kind\":\"object\",\"type\":\"HallTicket\",\"relationName\":\"ExamSessionToHallTicket\"}],\"dbName\":null},\"Exam\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examSessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examSession\",\"kind\":\"object\",\"type\":\"ExamSession\",\"relationName\":\"ExamToExamSession\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"ExamToSubject\"},{\"name\":\"gradeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"ExamToOrganization\"},{\"name\":\"maxMarks\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"passingMarks\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"weightage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"evaluationType\",\"kind\":\"enum\",\"type\":\"EvaluationType\"},{\"name\":\"mode\",\"kind\":\"enum\",\"type\":\"ExamMode\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ExamStatus\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"durationInMinutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"venueMapUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venue\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isResultsPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"supervisors\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"hallTickets\",\"kind\":\"object\",\"type\":\"HallTicket\",\"relationName\":\"ExamToHallTicket\"},{\"name\":\"examResult\",\"kind\":\"object\",\"type\":\"ExamResult\",\"relationName\":\"ExamToExamResult\"},{\"name\":\"examEnrollment\",\"kind\":\"object\",\"type\":\"ExamEnrollment\",\"relationName\":\"ExamToExamEnrollment\"}],\"dbName\":null},\"ExamEnrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"StudentExamStatus\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"exemptionReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ExamEnrollmentToStudent\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToExamEnrollment\"}],\"dbName\":null},\"ExamResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"obtainedMarks\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"percentage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"gradeLabel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPassed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isAbsent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isResultsPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ExamResultToStudent\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToExamResult\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"HallTicket\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examSessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pdfUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"qrCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"generatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"downloadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiryDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"HallTicketToStudent\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToHallTicket\"},{\"name\":\"examSession\",\"kind\":\"object\",\"type\":\"ExamSession\",\"relationName\":\"ExamSessionToHallTicket\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"HallTicketToOrganization\"}],\"dbName\":null},\"ReportCard\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examSessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalMaxMarks\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalObtained\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"percentage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"cgpa\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"overallGrade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resultStatus\",\"kind\":\"enum\",\"type\":\"ResultStatus\"},{\"name\":\"classRank\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gradeRank\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attendancePercent\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"conductGrade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"principalRemarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rank\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"pdfUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"generatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ReportCardToStudent\"},{\"name\":\"examSession\",\"kind\":\"object\",\"type\":\"ExamSession\",\"relationName\":\"ExamSessionToReportCard\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AcademicYears
   * const academicYears = await prisma.academicYear.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AcademicYears
 * const academicYears = await prisma.academicYear.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.academicYear`: Exposes CRUD operations for the **AcademicYear** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicYears
    * const academicYears = await prisma.academicYear.findMany()
    * ```
    */
  get academicYear(): Prisma.AcademicYearDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.teacherProfile`: Exposes CRUD operations for the **TeacherProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherProfiles
    * const teacherProfiles = await prisma.teacherProfile.findMany()
    * ```
    */
  get teacherProfile(): Prisma.TeacherProfileDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.teachingAssignment`: Exposes CRUD operations for the **TeachingAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeachingAssignments
    * const teachingAssignments = await prisma.teachingAssignment.findMany()
    * ```
    */
  get teachingAssignment(): Prisma.TeachingAssignmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.parent`: Exposes CRUD operations for the **Parent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parents
    * const parents = await prisma.parent.findMany()
    * ```
    */
  get parent(): Prisma.ParentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.parentStudent`: Exposes CRUD operations for the **ParentStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParentStudents
    * const parentStudents = await prisma.parentStudent.findMany()
    * ```
    */
  get parentStudent(): Prisma.ParentStudentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.studentAttendance`: Exposes CRUD operations for the **StudentAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAttendances
    * const studentAttendances = await prisma.studentAttendance.findMany()
    * ```
    */
  get studentAttendance(): Prisma.StudentAttendanceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.studentDocument`: Exposes CRUD operations for the **StudentDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentDocuments
    * const studentDocuments = await prisma.studentDocument.findMany()
    * ```
    */
  get studentDocument(): Prisma.StudentDocumentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.fee`: Exposes CRUD operations for the **Fee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fees
    * const fees = await prisma.fee.findMany()
    * ```
    */
  get fee(): Prisma.FeeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.feePayment`: Exposes CRUD operations for the **FeePayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeePayments
    * const feePayments = await prisma.feePayment.findMany()
    * ```
    */
  get feePayment(): Prisma.FeePaymentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.feeCategory`: Exposes CRUD operations for the **FeeCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeCategories
    * const feeCategories = await prisma.feeCategory.findMany()
    * ```
    */
  get feeCategory(): Prisma.FeeCategoryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.academicCalendar`: Exposes CRUD operations for the **AcademicCalendar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicCalendars
    * const academicCalendars = await prisma.academicCalendar.findMany()
    * ```
    */
  get academicCalendar(): Prisma.AcademicCalendarDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.anonymousComplaint`: Exposes CRUD operations for the **AnonymousComplaint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnonymousComplaints
    * const anonymousComplaints = await prisma.anonymousComplaint.findMany()
    * ```
    */
  get anonymousComplaint(): Prisma.AnonymousComplaintDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.complaintStatusTimeline`: Exposes CRUD operations for the **ComplaintStatusTimeline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComplaintStatusTimelines
    * const complaintStatusTimelines = await prisma.complaintStatusTimeline.findMany()
    * ```
    */
  get complaintStatusTimeline(): Prisma.ComplaintStatusTimelineDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.notice`: Exposes CRUD operations for the **Notice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notices
    * const notices = await prisma.notice.findMany()
    * ```
    */
  get notice(): Prisma.NoticeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.noticeAttachment`: Exposes CRUD operations for the **NoticeAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NoticeAttachments
    * const noticeAttachments = await prisma.noticeAttachment.findMany()
    * ```
    */
  get noticeAttachment(): Prisma.NoticeAttachmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.notificationLog`: Exposes CRUD operations for the **NotificationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationLogs
    * const notificationLogs = await prisma.notificationLog.findMany()
    * ```
    */
  get notificationLog(): Prisma.NotificationLogDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.scheduledJob`: Exposes CRUD operations for the **ScheduledJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledJobs
    * const scheduledJobs = await prisma.scheduledJob.findMany()
    * ```
    */
  get scheduledJob(): Prisma.ScheduledJobDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.examSession`: Exposes CRUD operations for the **ExamSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamSessions
    * const examSessions = await prisma.examSession.findMany()
    * ```
    */
  get examSession(): Prisma.ExamSessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.examEnrollment`: Exposes CRUD operations for the **ExamEnrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamEnrollments
    * const examEnrollments = await prisma.examEnrollment.findMany()
    * ```
    */
  get examEnrollment(): Prisma.ExamEnrollmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.examResult`: Exposes CRUD operations for the **ExamResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamResults
    * const examResults = await prisma.examResult.findMany()
    * ```
    */
  get examResult(): Prisma.ExamResultDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.hallTicket`: Exposes CRUD operations for the **HallTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HallTickets
    * const hallTickets = await prisma.hallTicket.findMany()
    * ```
    */
  get hallTicket(): Prisma.HallTicketDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.reportCard`: Exposes CRUD operations for the **ReportCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportCards
    * const reportCards = await prisma.reportCard.findMany()
    * ```
    */
  get reportCard(): Prisma.ReportCardDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
