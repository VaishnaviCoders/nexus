
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ExamResult` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExamResult
 * 
 */
export type ExamResultModel = runtime.Types.Result.DefaultSelection<Prisma.$ExamResultPayload>

export type AggregateExamResult = {
  _count: ExamResultCountAggregateOutputType | null
  _avg: ExamResultAvgAggregateOutputType | null
  _sum: ExamResultSumAggregateOutputType | null
  _min: ExamResultMinAggregateOutputType | null
  _max: ExamResultMaxAggregateOutputType | null
}

export type ExamResultAvgAggregateOutputType = {
  obtainedMarks: number | null
  percentage: number | null
}

export type ExamResultSumAggregateOutputType = {
  obtainedMarks: number | null
  percentage: number | null
}

export type ExamResultMinAggregateOutputType = {
  id: string | null
  studentId: string | null
  examId: string | null
  obtainedMarks: number | null
  percentage: number | null
  gradeLabel: string | null
  remarks: string | null
  isPassed: boolean | null
  isAbsent: boolean | null
  isResultsPublished: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExamResultMaxAggregateOutputType = {
  id: string | null
  studentId: string | null
  examId: string | null
  obtainedMarks: number | null
  percentage: number | null
  gradeLabel: string | null
  remarks: string | null
  isPassed: boolean | null
  isAbsent: boolean | null
  isResultsPublished: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExamResultCountAggregateOutputType = {
  id: number
  studentId: number
  examId: number
  obtainedMarks: number
  percentage: number
  gradeLabel: number
  remarks: number
  isPassed: number
  isAbsent: number
  isResultsPublished: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExamResultAvgAggregateInputType = {
  obtainedMarks?: true
  percentage?: true
}

export type ExamResultSumAggregateInputType = {
  obtainedMarks?: true
  percentage?: true
}

export type ExamResultMinAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  obtainedMarks?: true
  percentage?: true
  gradeLabel?: true
  remarks?: true
  isPassed?: true
  isAbsent?: true
  isResultsPublished?: true
  createdAt?: true
  updatedAt?: true
}

export type ExamResultMaxAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  obtainedMarks?: true
  percentage?: true
  gradeLabel?: true
  remarks?: true
  isPassed?: true
  isAbsent?: true
  isResultsPublished?: true
  createdAt?: true
  updatedAt?: true
}

export type ExamResultCountAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  obtainedMarks?: true
  percentage?: true
  gradeLabel?: true
  remarks?: true
  isPassed?: true
  isAbsent?: true
  isResultsPublished?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExamResultAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExamResult to aggregate.
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamResults to fetch.
   */
  orderBy?: Prisma.ExamResultOrderByWithRelationInput | Prisma.ExamResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExamResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExamResults
  **/
  _count?: true | ExamResultCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExamResultAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExamResultSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExamResultMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExamResultMaxAggregateInputType
}

export type GetExamResultAggregateType<T extends ExamResultAggregateArgs> = {
      [P in keyof T & keyof AggregateExamResult]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExamResult[P]>
    : Prisma.GetScalarType<T[P], AggregateExamResult[P]>
}




export type ExamResultGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamResultWhereInput
  orderBy?: Prisma.ExamResultOrderByWithAggregationInput | Prisma.ExamResultOrderByWithAggregationInput[]
  by: Prisma.ExamResultScalarFieldEnum[] | Prisma.ExamResultScalarFieldEnum
  having?: Prisma.ExamResultScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExamResultCountAggregateInputType | true
  _avg?: ExamResultAvgAggregateInputType
  _sum?: ExamResultSumAggregateInputType
  _min?: ExamResultMinAggregateInputType
  _max?: ExamResultMaxAggregateInputType
}

export type ExamResultGroupByOutputType = {
  id: string
  studentId: string
  examId: string
  obtainedMarks: number | null
  percentage: number | null
  gradeLabel: string | null
  remarks: string | null
  isPassed: boolean | null
  isAbsent: boolean
  isResultsPublished: boolean
  createdAt: Date
  updatedAt: Date
  _count: ExamResultCountAggregateOutputType | null
  _avg: ExamResultAvgAggregateOutputType | null
  _sum: ExamResultSumAggregateOutputType | null
  _min: ExamResultMinAggregateOutputType | null
  _max: ExamResultMaxAggregateOutputType | null
}

type GetExamResultGroupByPayload<T extends ExamResultGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExamResultGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExamResultGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExamResultGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExamResultGroupByOutputType[P]>
      }
    >
  >



export type ExamResultWhereInput = {
  AND?: Prisma.ExamResultWhereInput | Prisma.ExamResultWhereInput[]
  OR?: Prisma.ExamResultWhereInput[]
  NOT?: Prisma.ExamResultWhereInput | Prisma.ExamResultWhereInput[]
  id?: Prisma.StringFilter<"ExamResult"> | string
  studentId?: Prisma.StringFilter<"ExamResult"> | string
  examId?: Prisma.StringFilter<"ExamResult"> | string
  obtainedMarks?: Prisma.FloatNullableFilter<"ExamResult"> | number | null
  percentage?: Prisma.FloatNullableFilter<"ExamResult"> | number | null
  gradeLabel?: Prisma.StringNullableFilter<"ExamResult"> | string | null
  remarks?: Prisma.StringNullableFilter<"ExamResult"> | string | null
  isPassed?: Prisma.BoolNullableFilter<"ExamResult"> | boolean | null
  isAbsent?: Prisma.BoolFilter<"ExamResult"> | boolean
  isResultsPublished?: Prisma.BoolFilter<"ExamResult"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ExamResult"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExamResult"> | Date | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamScalarRelationFilter, Prisma.ExamWhereInput>
}

export type ExamResultOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  obtainedMarks?: Prisma.SortOrderInput | Prisma.SortOrder
  percentage?: Prisma.SortOrderInput | Prisma.SortOrder
  gradeLabel?: Prisma.SortOrderInput | Prisma.SortOrder
  remarks?: Prisma.SortOrderInput | Prisma.SortOrder
  isPassed?: Prisma.SortOrderInput | Prisma.SortOrder
  isAbsent?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  student?: Prisma.StudentOrderByWithRelationInput
  exam?: Prisma.ExamOrderByWithRelationInput
  _relevance?: Prisma.ExamResultOrderByRelevanceInput
}

export type ExamResultWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  examId_studentId?: Prisma.ExamResultExamIdStudentIdCompoundUniqueInput
  AND?: Prisma.ExamResultWhereInput | Prisma.ExamResultWhereInput[]
  OR?: Prisma.ExamResultWhereInput[]
  NOT?: Prisma.ExamResultWhereInput | Prisma.ExamResultWhereInput[]
  studentId?: Prisma.StringFilter<"ExamResult"> | string
  examId?: Prisma.StringFilter<"ExamResult"> | string
  obtainedMarks?: Prisma.FloatNullableFilter<"ExamResult"> | number | null
  percentage?: Prisma.FloatNullableFilter<"ExamResult"> | number | null
  gradeLabel?: Prisma.StringNullableFilter<"ExamResult"> | string | null
  remarks?: Prisma.StringNullableFilter<"ExamResult"> | string | null
  isPassed?: Prisma.BoolNullableFilter<"ExamResult"> | boolean | null
  isAbsent?: Prisma.BoolFilter<"ExamResult"> | boolean
  isResultsPublished?: Prisma.BoolFilter<"ExamResult"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ExamResult"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExamResult"> | Date | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamScalarRelationFilter, Prisma.ExamWhereInput>
}, "id" | "examId_studentId">

export type ExamResultOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  obtainedMarks?: Prisma.SortOrderInput | Prisma.SortOrder
  percentage?: Prisma.SortOrderInput | Prisma.SortOrder
  gradeLabel?: Prisma.SortOrderInput | Prisma.SortOrder
  remarks?: Prisma.SortOrderInput | Prisma.SortOrder
  isPassed?: Prisma.SortOrderInput | Prisma.SortOrder
  isAbsent?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExamResultCountOrderByAggregateInput
  _avg?: Prisma.ExamResultAvgOrderByAggregateInput
  _max?: Prisma.ExamResultMaxOrderByAggregateInput
  _min?: Prisma.ExamResultMinOrderByAggregateInput
  _sum?: Prisma.ExamResultSumOrderByAggregateInput
}

export type ExamResultScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExamResultScalarWhereWithAggregatesInput | Prisma.ExamResultScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExamResultScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExamResultScalarWhereWithAggregatesInput | Prisma.ExamResultScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExamResult"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"ExamResult"> | string
  examId?: Prisma.StringWithAggregatesFilter<"ExamResult"> | string
  obtainedMarks?: Prisma.FloatNullableWithAggregatesFilter<"ExamResult"> | number | null
  percentage?: Prisma.FloatNullableWithAggregatesFilter<"ExamResult"> | number | null
  gradeLabel?: Prisma.StringNullableWithAggregatesFilter<"ExamResult"> | string | null
  remarks?: Prisma.StringNullableWithAggregatesFilter<"ExamResult"> | string | null
  isPassed?: Prisma.BoolNullableWithAggregatesFilter<"ExamResult"> | boolean | null
  isAbsent?: Prisma.BoolWithAggregatesFilter<"ExamResult"> | boolean
  isResultsPublished?: Prisma.BoolWithAggregatesFilter<"ExamResult"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ExamResult"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ExamResult"> | Date | string
}

export type ExamResultCreateInput = {
  id?: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutExamResultInput
  exam: Prisma.ExamCreateNestedOneWithoutExamResultInput
}

export type ExamResultUncheckedCreateInput = {
  id?: string
  studentId: string
  examId: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamResultUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutExamResultNestedInput
  exam?: Prisma.ExamUpdateOneRequiredWithoutExamResultNestedInput
}

export type ExamResultUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamResultCreateManyInput = {
  id?: string
  studentId: string
  examId: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamResultUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamResultUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamResultListRelationFilter = {
  every?: Prisma.ExamResultWhereInput
  some?: Prisma.ExamResultWhereInput
  none?: Prisma.ExamResultWhereInput
}

export type ExamResultOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExamResultOrderByRelevanceInput = {
  fields: Prisma.ExamResultOrderByRelevanceFieldEnum | Prisma.ExamResultOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ExamResultExamIdStudentIdCompoundUniqueInput = {
  examId: string
  studentId: string
}

export type ExamResultCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  obtainedMarks?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  gradeLabel?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  isPassed?: Prisma.SortOrder
  isAbsent?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamResultAvgOrderByAggregateInput = {
  obtainedMarks?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
}

export type ExamResultMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  obtainedMarks?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  gradeLabel?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  isPassed?: Prisma.SortOrder
  isAbsent?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamResultMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  obtainedMarks?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  gradeLabel?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  isPassed?: Prisma.SortOrder
  isAbsent?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamResultSumOrderByAggregateInput = {
  obtainedMarks?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
}

export type ExamResultCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutStudentInput, Prisma.ExamResultUncheckedCreateWithoutStudentInput> | Prisma.ExamResultCreateWithoutStudentInput[] | Prisma.ExamResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutStudentInput | Prisma.ExamResultCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ExamResultCreateManyStudentInputEnvelope
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
}

export type ExamResultUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutStudentInput, Prisma.ExamResultUncheckedCreateWithoutStudentInput> | Prisma.ExamResultCreateWithoutStudentInput[] | Prisma.ExamResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutStudentInput | Prisma.ExamResultCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ExamResultCreateManyStudentInputEnvelope
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
}

export type ExamResultUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutStudentInput, Prisma.ExamResultUncheckedCreateWithoutStudentInput> | Prisma.ExamResultCreateWithoutStudentInput[] | Prisma.ExamResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutStudentInput | Prisma.ExamResultCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ExamResultUpsertWithWhereUniqueWithoutStudentInput | Prisma.ExamResultUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ExamResultCreateManyStudentInputEnvelope
  set?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  disconnect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  delete?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  update?: Prisma.ExamResultUpdateWithWhereUniqueWithoutStudentInput | Prisma.ExamResultUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ExamResultUpdateManyWithWhereWithoutStudentInput | Prisma.ExamResultUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ExamResultScalarWhereInput | Prisma.ExamResultScalarWhereInput[]
}

export type ExamResultUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutStudentInput, Prisma.ExamResultUncheckedCreateWithoutStudentInput> | Prisma.ExamResultCreateWithoutStudentInput[] | Prisma.ExamResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutStudentInput | Prisma.ExamResultCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ExamResultUpsertWithWhereUniqueWithoutStudentInput | Prisma.ExamResultUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ExamResultCreateManyStudentInputEnvelope
  set?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  disconnect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  delete?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  update?: Prisma.ExamResultUpdateWithWhereUniqueWithoutStudentInput | Prisma.ExamResultUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ExamResultUpdateManyWithWhereWithoutStudentInput | Prisma.ExamResultUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ExamResultScalarWhereInput | Prisma.ExamResultScalarWhereInput[]
}

export type ExamResultCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutExamInput, Prisma.ExamResultUncheckedCreateWithoutExamInput> | Prisma.ExamResultCreateWithoutExamInput[] | Prisma.ExamResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutExamInput | Prisma.ExamResultCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.ExamResultCreateManyExamInputEnvelope
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
}

export type ExamResultUncheckedCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutExamInput, Prisma.ExamResultUncheckedCreateWithoutExamInput> | Prisma.ExamResultCreateWithoutExamInput[] | Prisma.ExamResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutExamInput | Prisma.ExamResultCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.ExamResultCreateManyExamInputEnvelope
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
}

export type ExamResultUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutExamInput, Prisma.ExamResultUncheckedCreateWithoutExamInput> | Prisma.ExamResultCreateWithoutExamInput[] | Prisma.ExamResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutExamInput | Prisma.ExamResultCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.ExamResultUpsertWithWhereUniqueWithoutExamInput | Prisma.ExamResultUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.ExamResultCreateManyExamInputEnvelope
  set?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  disconnect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  delete?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  update?: Prisma.ExamResultUpdateWithWhereUniqueWithoutExamInput | Prisma.ExamResultUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.ExamResultUpdateManyWithWhereWithoutExamInput | Prisma.ExamResultUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.ExamResultScalarWhereInput | Prisma.ExamResultScalarWhereInput[]
}

export type ExamResultUncheckedUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.ExamResultCreateWithoutExamInput, Prisma.ExamResultUncheckedCreateWithoutExamInput> | Prisma.ExamResultCreateWithoutExamInput[] | Prisma.ExamResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamResultCreateOrConnectWithoutExamInput | Prisma.ExamResultCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.ExamResultUpsertWithWhereUniqueWithoutExamInput | Prisma.ExamResultUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.ExamResultCreateManyExamInputEnvelope
  set?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  disconnect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  delete?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  connect?: Prisma.ExamResultWhereUniqueInput | Prisma.ExamResultWhereUniqueInput[]
  update?: Prisma.ExamResultUpdateWithWhereUniqueWithoutExamInput | Prisma.ExamResultUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.ExamResultUpdateManyWithWhereWithoutExamInput | Prisma.ExamResultUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.ExamResultScalarWhereInput | Prisma.ExamResultScalarWhereInput[]
}

export type ExamResultCreateWithoutStudentInput = {
  id?: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  exam: Prisma.ExamCreateNestedOneWithoutExamResultInput
}

export type ExamResultUncheckedCreateWithoutStudentInput = {
  id?: string
  examId: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamResultCreateOrConnectWithoutStudentInput = {
  where: Prisma.ExamResultWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamResultCreateWithoutStudentInput, Prisma.ExamResultUncheckedCreateWithoutStudentInput>
}

export type ExamResultCreateManyStudentInputEnvelope = {
  data: Prisma.ExamResultCreateManyStudentInput | Prisma.ExamResultCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type ExamResultUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ExamResultWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamResultUpdateWithoutStudentInput, Prisma.ExamResultUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.ExamResultCreateWithoutStudentInput, Prisma.ExamResultUncheckedCreateWithoutStudentInput>
}

export type ExamResultUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ExamResultWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamResultUpdateWithoutStudentInput, Prisma.ExamResultUncheckedUpdateWithoutStudentInput>
}

export type ExamResultUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ExamResultScalarWhereInput
  data: Prisma.XOR<Prisma.ExamResultUpdateManyMutationInput, Prisma.ExamResultUncheckedUpdateManyWithoutStudentInput>
}

export type ExamResultScalarWhereInput = {
  AND?: Prisma.ExamResultScalarWhereInput | Prisma.ExamResultScalarWhereInput[]
  OR?: Prisma.ExamResultScalarWhereInput[]
  NOT?: Prisma.ExamResultScalarWhereInput | Prisma.ExamResultScalarWhereInput[]
  id?: Prisma.StringFilter<"ExamResult"> | string
  studentId?: Prisma.StringFilter<"ExamResult"> | string
  examId?: Prisma.StringFilter<"ExamResult"> | string
  obtainedMarks?: Prisma.FloatNullableFilter<"ExamResult"> | number | null
  percentage?: Prisma.FloatNullableFilter<"ExamResult"> | number | null
  gradeLabel?: Prisma.StringNullableFilter<"ExamResult"> | string | null
  remarks?: Prisma.StringNullableFilter<"ExamResult"> | string | null
  isPassed?: Prisma.BoolNullableFilter<"ExamResult"> | boolean | null
  isAbsent?: Prisma.BoolFilter<"ExamResult"> | boolean
  isResultsPublished?: Prisma.BoolFilter<"ExamResult"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ExamResult"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExamResult"> | Date | string
}

export type ExamResultCreateWithoutExamInput = {
  id?: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutExamResultInput
}

export type ExamResultUncheckedCreateWithoutExamInput = {
  id?: string
  studentId: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamResultCreateOrConnectWithoutExamInput = {
  where: Prisma.ExamResultWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamResultCreateWithoutExamInput, Prisma.ExamResultUncheckedCreateWithoutExamInput>
}

export type ExamResultCreateManyExamInputEnvelope = {
  data: Prisma.ExamResultCreateManyExamInput | Prisma.ExamResultCreateManyExamInput[]
  skipDuplicates?: boolean
}

export type ExamResultUpsertWithWhereUniqueWithoutExamInput = {
  where: Prisma.ExamResultWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamResultUpdateWithoutExamInput, Prisma.ExamResultUncheckedUpdateWithoutExamInput>
  create: Prisma.XOR<Prisma.ExamResultCreateWithoutExamInput, Prisma.ExamResultUncheckedCreateWithoutExamInput>
}

export type ExamResultUpdateWithWhereUniqueWithoutExamInput = {
  where: Prisma.ExamResultWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamResultUpdateWithoutExamInput, Prisma.ExamResultUncheckedUpdateWithoutExamInput>
}

export type ExamResultUpdateManyWithWhereWithoutExamInput = {
  where: Prisma.ExamResultScalarWhereInput
  data: Prisma.XOR<Prisma.ExamResultUpdateManyMutationInput, Prisma.ExamResultUncheckedUpdateManyWithoutExamInput>
}

export type ExamResultCreateManyStudentInput = {
  id?: string
  examId: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamResultUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exam?: Prisma.ExamUpdateOneRequiredWithoutExamResultNestedInput
}

export type ExamResultUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamResultUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamResultCreateManyExamInput = {
  id?: string
  studentId: string
  obtainedMarks?: number | null
  percentage?: number | null
  gradeLabel?: string | null
  remarks?: string | null
  isPassed?: boolean | null
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamResultUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutExamResultNestedInput
}

export type ExamResultUncheckedUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamResultUncheckedUpdateManyWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  obtainedMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  gradeLabel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPassed?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  isAbsent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ExamResultSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  obtainedMarks?: boolean
  percentage?: boolean
  gradeLabel?: boolean
  remarks?: boolean
  isPassed?: boolean
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examResult"]>

export type ExamResultSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  obtainedMarks?: boolean
  percentage?: boolean
  gradeLabel?: boolean
  remarks?: boolean
  isPassed?: boolean
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examResult"]>

export type ExamResultSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  obtainedMarks?: boolean
  percentage?: boolean
  gradeLabel?: boolean
  remarks?: boolean
  isPassed?: boolean
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examResult"]>

export type ExamResultSelectScalar = {
  id?: boolean
  studentId?: boolean
  examId?: boolean
  obtainedMarks?: boolean
  percentage?: boolean
  gradeLabel?: boolean
  remarks?: boolean
  isPassed?: boolean
  isAbsent?: boolean
  isResultsPublished?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExamResultOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "studentId" | "examId" | "obtainedMarks" | "percentage" | "gradeLabel" | "remarks" | "isPassed" | "isAbsent" | "isResultsPublished" | "createdAt" | "updatedAt", ExtArgs["result"]["examResult"]>
export type ExamResultInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}
export type ExamResultIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}
export type ExamResultIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}

export type $ExamResultPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExamResult"
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>
    exam: Prisma.$ExamPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    studentId: string
    examId: string
    obtainedMarks: number | null
    percentage: number | null
    gradeLabel: string | null
    remarks: string | null
    isPassed: boolean | null
    isAbsent: boolean
    isResultsPublished: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["examResult"]>
  composites: {}
}

export type ExamResultGetPayload<S extends boolean | null | undefined | ExamResultDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExamResultPayload, S>

export type ExamResultCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExamResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExamResultCountAggregateInputType | true
  }

export interface ExamResultDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamResult'], meta: { name: 'ExamResult' } }
  /**
   * Find zero or one ExamResult that matches the filter.
   * @param {ExamResultFindUniqueArgs} args - Arguments to find a ExamResult
   * @example
   * // Get one ExamResult
   * const examResult = await prisma.examResult.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExamResultFindUniqueArgs>(args: Prisma.SelectSubset<T, ExamResultFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExamResult that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExamResultFindUniqueOrThrowArgs} args - Arguments to find a ExamResult
   * @example
   * // Get one ExamResult
   * const examResult = await prisma.examResult.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExamResultFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExamResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExamResult that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultFindFirstArgs} args - Arguments to find a ExamResult
   * @example
   * // Get one ExamResult
   * const examResult = await prisma.examResult.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExamResultFindFirstArgs>(args?: Prisma.SelectSubset<T, ExamResultFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExamResult that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultFindFirstOrThrowArgs} args - Arguments to find a ExamResult
   * @example
   * // Get one ExamResult
   * const examResult = await prisma.examResult.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExamResultFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExamResultFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExamResults that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExamResults
   * const examResults = await prisma.examResult.findMany()
   * 
   * // Get first 10 ExamResults
   * const examResults = await prisma.examResult.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const examResultWithIdOnly = await prisma.examResult.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExamResultFindManyArgs>(args?: Prisma.SelectSubset<T, ExamResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExamResult.
   * @param {ExamResultCreateArgs} args - Arguments to create a ExamResult.
   * @example
   * // Create one ExamResult
   * const ExamResult = await prisma.examResult.create({
   *   data: {
   *     // ... data to create a ExamResult
   *   }
   * })
   * 
   */
  create<T extends ExamResultCreateArgs>(args: Prisma.SelectSubset<T, ExamResultCreateArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExamResults.
   * @param {ExamResultCreateManyArgs} args - Arguments to create many ExamResults.
   * @example
   * // Create many ExamResults
   * const examResult = await prisma.examResult.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExamResultCreateManyArgs>(args?: Prisma.SelectSubset<T, ExamResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExamResults and returns the data saved in the database.
   * @param {ExamResultCreateManyAndReturnArgs} args - Arguments to create many ExamResults.
   * @example
   * // Create many ExamResults
   * const examResult = await prisma.examResult.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExamResults and only return the `id`
   * const examResultWithIdOnly = await prisma.examResult.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExamResultCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExamResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExamResult.
   * @param {ExamResultDeleteArgs} args - Arguments to delete one ExamResult.
   * @example
   * // Delete one ExamResult
   * const ExamResult = await prisma.examResult.delete({
   *   where: {
   *     // ... filter to delete one ExamResult
   *   }
   * })
   * 
   */
  delete<T extends ExamResultDeleteArgs>(args: Prisma.SelectSubset<T, ExamResultDeleteArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExamResult.
   * @param {ExamResultUpdateArgs} args - Arguments to update one ExamResult.
   * @example
   * // Update one ExamResult
   * const examResult = await prisma.examResult.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExamResultUpdateArgs>(args: Prisma.SelectSubset<T, ExamResultUpdateArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExamResults.
   * @param {ExamResultDeleteManyArgs} args - Arguments to filter ExamResults to delete.
   * @example
   * // Delete a few ExamResults
   * const { count } = await prisma.examResult.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExamResultDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExamResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExamResults.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExamResults
   * const examResult = await prisma.examResult.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExamResultUpdateManyArgs>(args: Prisma.SelectSubset<T, ExamResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExamResults and returns the data updated in the database.
   * @param {ExamResultUpdateManyAndReturnArgs} args - Arguments to update many ExamResults.
   * @example
   * // Update many ExamResults
   * const examResult = await prisma.examResult.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExamResults and only return the `id`
   * const examResultWithIdOnly = await prisma.examResult.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExamResultUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExamResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExamResult.
   * @param {ExamResultUpsertArgs} args - Arguments to update or create a ExamResult.
   * @example
   * // Update or create a ExamResult
   * const examResult = await prisma.examResult.upsert({
   *   create: {
   *     // ... data to create a ExamResult
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExamResult we want to update
   *   }
   * })
   */
  upsert<T extends ExamResultUpsertArgs>(args: Prisma.SelectSubset<T, ExamResultUpsertArgs<ExtArgs>>): Prisma.Prisma__ExamResultClient<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExamResults.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultCountArgs} args - Arguments to filter ExamResults to count.
   * @example
   * // Count the number of ExamResults
   * const count = await prisma.examResult.count({
   *   where: {
   *     // ... the filter for the ExamResults we want to count
   *   }
   * })
  **/
  count<T extends ExamResultCountArgs>(
    args?: Prisma.Subset<T, ExamResultCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExamResultCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExamResult.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExamResultAggregateArgs>(args: Prisma.Subset<T, ExamResultAggregateArgs>): Prisma.PrismaPromise<GetExamResultAggregateType<T>>

  /**
   * Group by ExamResult.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamResultGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExamResultGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExamResultGroupByArgs['orderBy'] }
      : { orderBy?: ExamResultGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExamResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExamResult model
 */
readonly fields: ExamResultFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExamResult.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExamResultClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  exam<T extends Prisma.ExamDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExamDefaultArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExamResult model
 */
export interface ExamResultFieldRefs {
  readonly id: Prisma.FieldRef<"ExamResult", 'String'>
  readonly studentId: Prisma.FieldRef<"ExamResult", 'String'>
  readonly examId: Prisma.FieldRef<"ExamResult", 'String'>
  readonly obtainedMarks: Prisma.FieldRef<"ExamResult", 'Float'>
  readonly percentage: Prisma.FieldRef<"ExamResult", 'Float'>
  readonly gradeLabel: Prisma.FieldRef<"ExamResult", 'String'>
  readonly remarks: Prisma.FieldRef<"ExamResult", 'String'>
  readonly isPassed: Prisma.FieldRef<"ExamResult", 'Boolean'>
  readonly isAbsent: Prisma.FieldRef<"ExamResult", 'Boolean'>
  readonly isResultsPublished: Prisma.FieldRef<"ExamResult", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"ExamResult", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ExamResult", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ExamResult findUnique
 */
export type ExamResultFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * Filter, which ExamResult to fetch.
   */
  where: Prisma.ExamResultWhereUniqueInput
}

/**
 * ExamResult findUniqueOrThrow
 */
export type ExamResultFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * Filter, which ExamResult to fetch.
   */
  where: Prisma.ExamResultWhereUniqueInput
}

/**
 * ExamResult findFirst
 */
export type ExamResultFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * Filter, which ExamResult to fetch.
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamResults to fetch.
   */
  orderBy?: Prisma.ExamResultOrderByWithRelationInput | Prisma.ExamResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExamResults.
   */
  cursor?: Prisma.ExamResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExamResults.
   */
  distinct?: Prisma.ExamResultScalarFieldEnum | Prisma.ExamResultScalarFieldEnum[]
}

/**
 * ExamResult findFirstOrThrow
 */
export type ExamResultFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * Filter, which ExamResult to fetch.
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamResults to fetch.
   */
  orderBy?: Prisma.ExamResultOrderByWithRelationInput | Prisma.ExamResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExamResults.
   */
  cursor?: Prisma.ExamResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExamResults.
   */
  distinct?: Prisma.ExamResultScalarFieldEnum | Prisma.ExamResultScalarFieldEnum[]
}

/**
 * ExamResult findMany
 */
export type ExamResultFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * Filter, which ExamResults to fetch.
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamResults to fetch.
   */
  orderBy?: Prisma.ExamResultOrderByWithRelationInput | Prisma.ExamResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExamResults.
   */
  cursor?: Prisma.ExamResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamResults.
   */
  skip?: number
  distinct?: Prisma.ExamResultScalarFieldEnum | Prisma.ExamResultScalarFieldEnum[]
}

/**
 * ExamResult create
 */
export type ExamResultCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * The data needed to create a ExamResult.
   */
  data: Prisma.XOR<Prisma.ExamResultCreateInput, Prisma.ExamResultUncheckedCreateInput>
}

/**
 * ExamResult createMany
 */
export type ExamResultCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExamResults.
   */
  data: Prisma.ExamResultCreateManyInput | Prisma.ExamResultCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExamResult createManyAndReturn
 */
export type ExamResultCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * The data used to create many ExamResults.
   */
  data: Prisma.ExamResultCreateManyInput | Prisma.ExamResultCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExamResult update
 */
export type ExamResultUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * The data needed to update a ExamResult.
   */
  data: Prisma.XOR<Prisma.ExamResultUpdateInput, Prisma.ExamResultUncheckedUpdateInput>
  /**
   * Choose, which ExamResult to update.
   */
  where: Prisma.ExamResultWhereUniqueInput
}

/**
 * ExamResult updateMany
 */
export type ExamResultUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExamResults.
   */
  data: Prisma.XOR<Prisma.ExamResultUpdateManyMutationInput, Prisma.ExamResultUncheckedUpdateManyInput>
  /**
   * Filter which ExamResults to update
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * Limit how many ExamResults to update.
   */
  limit?: number
}

/**
 * ExamResult updateManyAndReturn
 */
export type ExamResultUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * The data used to update ExamResults.
   */
  data: Prisma.XOR<Prisma.ExamResultUpdateManyMutationInput, Prisma.ExamResultUncheckedUpdateManyInput>
  /**
   * Filter which ExamResults to update
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * Limit how many ExamResults to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExamResult upsert
 */
export type ExamResultUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * The filter to search for the ExamResult to update in case it exists.
   */
  where: Prisma.ExamResultWhereUniqueInput
  /**
   * In case the ExamResult found by the `where` argument doesn't exist, create a new ExamResult with this data.
   */
  create: Prisma.XOR<Prisma.ExamResultCreateInput, Prisma.ExamResultUncheckedCreateInput>
  /**
   * In case the ExamResult was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExamResultUpdateInput, Prisma.ExamResultUncheckedUpdateInput>
}

/**
 * ExamResult delete
 */
export type ExamResultDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  /**
   * Filter which ExamResult to delete.
   */
  where: Prisma.ExamResultWhereUniqueInput
}

/**
 * ExamResult deleteMany
 */
export type ExamResultDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExamResults to delete
   */
  where?: Prisma.ExamResultWhereInput
  /**
   * Limit how many ExamResults to delete.
   */
  limit?: number
}

/**
 * ExamResult without action
 */
export type ExamResultDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
}
