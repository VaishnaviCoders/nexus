
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TeachingAssignment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TeachingAssignment
 * 
 */
export type TeachingAssignmentModel = runtime.Types.Result.DefaultSelection<Prisma.$TeachingAssignmentPayload>

export type AggregateTeachingAssignment = {
  _count: TeachingAssignmentCountAggregateOutputType | null
  _min: TeachingAssignmentMinAggregateOutputType | null
  _max: TeachingAssignmentMaxAggregateOutputType | null
}

export type TeachingAssignmentMinAggregateOutputType = {
  id: string | null
  teacherId: string | null
  subjectId: string | null
  gradeId: string | null
  sectionId: string | null
  organizationId: string | null
  status: $Enums.AssignmentStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type TeachingAssignmentMaxAggregateOutputType = {
  id: string | null
  teacherId: string | null
  subjectId: string | null
  gradeId: string | null
  sectionId: string | null
  organizationId: string | null
  status: $Enums.AssignmentStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type TeachingAssignmentCountAggregateOutputType = {
  id: number
  teacherId: number
  subjectId: number
  gradeId: number
  sectionId: number
  organizationId: number
  status: number
  createdAt: number
  updatedAt: number
  academicYearId: number
  _all: number
}


export type TeachingAssignmentMinAggregateInputType = {
  id?: true
  teacherId?: true
  subjectId?: true
  gradeId?: true
  sectionId?: true
  organizationId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type TeachingAssignmentMaxAggregateInputType = {
  id?: true
  teacherId?: true
  subjectId?: true
  gradeId?: true
  sectionId?: true
  organizationId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type TeachingAssignmentCountAggregateInputType = {
  id?: true
  teacherId?: true
  subjectId?: true
  gradeId?: true
  sectionId?: true
  organizationId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
  _all?: true
}

export type TeachingAssignmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeachingAssignment to aggregate.
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeachingAssignments to fetch.
   */
  orderBy?: Prisma.TeachingAssignmentOrderByWithRelationInput | Prisma.TeachingAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeachingAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeachingAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeachingAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeachingAssignments
  **/
  _count?: true | TeachingAssignmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeachingAssignmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeachingAssignmentMaxAggregateInputType
}

export type GetTeachingAssignmentAggregateType<T extends TeachingAssignmentAggregateArgs> = {
      [P in keyof T & keyof AggregateTeachingAssignment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeachingAssignment[P]>
    : Prisma.GetScalarType<T[P], AggregateTeachingAssignment[P]>
}




export type TeachingAssignmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeachingAssignmentWhereInput
  orderBy?: Prisma.TeachingAssignmentOrderByWithAggregationInput | Prisma.TeachingAssignmentOrderByWithAggregationInput[]
  by: Prisma.TeachingAssignmentScalarFieldEnum[] | Prisma.TeachingAssignmentScalarFieldEnum
  having?: Prisma.TeachingAssignmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeachingAssignmentCountAggregateInputType | true
  _min?: TeachingAssignmentMinAggregateInputType
  _max?: TeachingAssignmentMaxAggregateInputType
}

export type TeachingAssignmentGroupByOutputType = {
  id: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status: $Enums.AssignmentStatus
  createdAt: Date
  updatedAt: Date
  academicYearId: string | null
  _count: TeachingAssignmentCountAggregateOutputType | null
  _min: TeachingAssignmentMinAggregateOutputType | null
  _max: TeachingAssignmentMaxAggregateOutputType | null
}

type GetTeachingAssignmentGroupByPayload<T extends TeachingAssignmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeachingAssignmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeachingAssignmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeachingAssignmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeachingAssignmentGroupByOutputType[P]>
      }
    >
  >



export type TeachingAssignmentWhereInput = {
  AND?: Prisma.TeachingAssignmentWhereInput | Prisma.TeachingAssignmentWhereInput[]
  OR?: Prisma.TeachingAssignmentWhereInput[]
  NOT?: Prisma.TeachingAssignmentWhereInput | Prisma.TeachingAssignmentWhereInput[]
  id?: Prisma.StringFilter<"TeachingAssignment"> | string
  teacherId?: Prisma.StringFilter<"TeachingAssignment"> | string
  subjectId?: Prisma.StringFilter<"TeachingAssignment"> | string
  gradeId?: Prisma.StringFilter<"TeachingAssignment"> | string
  sectionId?: Prisma.StringFilter<"TeachingAssignment"> | string
  organizationId?: Prisma.StringFilter<"TeachingAssignment"> | string
  status?: Prisma.EnumAssignmentStatusFilter<"TeachingAssignment"> | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFilter<"TeachingAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeachingAssignment"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"TeachingAssignment"> | string | null
  teacher?: Prisma.XOR<Prisma.TeacherScalarRelationFilter, Prisma.TeacherWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  grade?: Prisma.XOR<Prisma.GradeScalarRelationFilter, Prisma.GradeWhereInput>
  section?: Prisma.XOR<Prisma.SectionScalarRelationFilter, Prisma.SectionWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}

export type TeachingAssignmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  teacher?: Prisma.TeacherOrderByWithRelationInput
  subject?: Prisma.SubjectOrderByWithRelationInput
  grade?: Prisma.GradeOrderByWithRelationInput
  section?: Prisma.SectionOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  _relevance?: Prisma.TeachingAssignmentOrderByRelevanceInput
}

export type TeachingAssignmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  teacherId_subjectId_gradeId_sectionId_academicYearId?: Prisma.TeachingAssignmentTeacherIdSubjectIdGradeIdSectionIdAcademicYearIdCompoundUniqueInput
  AND?: Prisma.TeachingAssignmentWhereInput | Prisma.TeachingAssignmentWhereInput[]
  OR?: Prisma.TeachingAssignmentWhereInput[]
  NOT?: Prisma.TeachingAssignmentWhereInput | Prisma.TeachingAssignmentWhereInput[]
  teacherId?: Prisma.StringFilter<"TeachingAssignment"> | string
  subjectId?: Prisma.StringFilter<"TeachingAssignment"> | string
  gradeId?: Prisma.StringFilter<"TeachingAssignment"> | string
  sectionId?: Prisma.StringFilter<"TeachingAssignment"> | string
  organizationId?: Prisma.StringFilter<"TeachingAssignment"> | string
  status?: Prisma.EnumAssignmentStatusFilter<"TeachingAssignment"> | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFilter<"TeachingAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeachingAssignment"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"TeachingAssignment"> | string | null
  teacher?: Prisma.XOR<Prisma.TeacherScalarRelationFilter, Prisma.TeacherWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  grade?: Prisma.XOR<Prisma.GradeScalarRelationFilter, Prisma.GradeWhereInput>
  section?: Prisma.XOR<Prisma.SectionScalarRelationFilter, Prisma.SectionWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}, "id" | "teacherId_subjectId_gradeId_sectionId_academicYearId">

export type TeachingAssignmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TeachingAssignmentCountOrderByAggregateInput
  _max?: Prisma.TeachingAssignmentMaxOrderByAggregateInput
  _min?: Prisma.TeachingAssignmentMinOrderByAggregateInput
}

export type TeachingAssignmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeachingAssignmentScalarWhereWithAggregatesInput | Prisma.TeachingAssignmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeachingAssignmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeachingAssignmentScalarWhereWithAggregatesInput | Prisma.TeachingAssignmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TeachingAssignment"> | string
  teacherId?: Prisma.StringWithAggregatesFilter<"TeachingAssignment"> | string
  subjectId?: Prisma.StringWithAggregatesFilter<"TeachingAssignment"> | string
  gradeId?: Prisma.StringWithAggregatesFilter<"TeachingAssignment"> | string
  sectionId?: Prisma.StringWithAggregatesFilter<"TeachingAssignment"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"TeachingAssignment"> | string
  status?: Prisma.EnumAssignmentStatusWithAggregatesFilter<"TeachingAssignment"> | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TeachingAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TeachingAssignment"> | Date | string
  academicYearId?: Prisma.StringNullableWithAggregatesFilter<"TeachingAssignment"> | string | null
}

export type TeachingAssignmentCreateInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.TeacherCreateNestedOneWithoutTeachingAssignmentInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeachingAssignmentsInput
  grade: Prisma.GradeCreateNestedOneWithoutTeachingAssignmentInput
  section: Prisma.SectionCreateNestedOneWithoutTeachingAssignmentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutTeachingAssignmentInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeachingAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  section?: Prisma.SectionUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentCreateManyInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeachingAssignmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentListRelationFilter = {
  every?: Prisma.TeachingAssignmentWhereInput
  some?: Prisma.TeachingAssignmentWhereInput
  none?: Prisma.TeachingAssignmentWhereInput
}

export type TeachingAssignmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TeachingAssignmentOrderByRelevanceInput = {
  fields: Prisma.TeachingAssignmentOrderByRelevanceFieldEnum | Prisma.TeachingAssignmentOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TeachingAssignmentTeacherIdSubjectIdGradeIdSectionIdAcademicYearIdCompoundUniqueInput = {
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  academicYearId: string
}

export type TeachingAssignmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type TeachingAssignmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type TeachingAssignmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type TeachingAssignmentCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput> | Prisma.TeachingAssignmentCreateWithoutAcademicYearInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput | Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyAcademicYearInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput> | Prisma.TeachingAssignmentCreateWithoutAcademicYearInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput | Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyAcademicYearInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput> | Prisma.TeachingAssignmentCreateWithoutAcademicYearInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput | Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyAcademicYearInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutAcademicYearInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput> | Prisma.TeachingAssignmentCreateWithoutAcademicYearInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput | Prisma.TeachingAssignmentCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyAcademicYearInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutAcademicYearInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput> | Prisma.TeachingAssignmentCreateWithoutOrganizationInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput | Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyOrganizationInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput> | Prisma.TeachingAssignmentCreateWithoutOrganizationInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput | Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyOrganizationInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput> | Prisma.TeachingAssignmentCreateWithoutOrganizationInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput | Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyOrganizationInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutOrganizationInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput> | Prisma.TeachingAssignmentCreateWithoutOrganizationInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput | Prisma.TeachingAssignmentCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyOrganizationInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutOrganizationInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentCreateNestedManyWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeachingAssignmentCreateWithoutTeacherInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyTeacherInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeachingAssignmentCreateWithoutTeacherInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyTeacherInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUpdateManyWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeachingAssignmentCreateWithoutTeacherInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutTeacherInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyTeacherInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutTeacherInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutTeacherInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutTeacherInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeachingAssignmentCreateWithoutTeacherInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeachingAssignmentCreateOrConnectWithoutTeacherInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutTeacherInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyTeacherInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutTeacherInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutTeacherInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutTeacherInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentCreateNestedManyWithoutGradeInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeachingAssignmentCreateWithoutGradeInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyGradeInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUncheckedCreateNestedManyWithoutGradeInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeachingAssignmentCreateWithoutGradeInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyGradeInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUpdateManyWithoutGradeNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeachingAssignmentCreateWithoutGradeInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutGradeInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutGradeInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyGradeInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutGradeInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutGradeInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutGradeInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutGradeInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentUncheckedUpdateManyWithoutGradeNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeachingAssignmentCreateWithoutGradeInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeachingAssignmentCreateOrConnectWithoutGradeInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutGradeInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutGradeInput[]
  createMany?: Prisma.TeachingAssignmentCreateManyGradeInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutGradeInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutGradeInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutGradeInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutGradeInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentCreateNestedManyWithoutSectionInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput> | Prisma.TeachingAssignmentCreateWithoutSectionInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySectionInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUncheckedCreateNestedManyWithoutSectionInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput> | Prisma.TeachingAssignmentCreateWithoutSectionInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySectionInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUpdateManyWithoutSectionNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput> | Prisma.TeachingAssignmentCreateWithoutSectionInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSectionInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSectionInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySectionInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSectionInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSectionInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSectionInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSectionInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentUncheckedUpdateManyWithoutSectionNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput> | Prisma.TeachingAssignmentCreateWithoutSectionInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSectionInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSectionInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSectionInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySectionInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSectionInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSectionInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSectionInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSectionInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeachingAssignmentCreateWithoutSubjectInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeachingAssignmentCreateWithoutSubjectInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
}

export type TeachingAssignmentUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeachingAssignmentCreateWithoutSubjectInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySubjectInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type TeachingAssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeachingAssignmentCreateWithoutSubjectInput[] | Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeachingAssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.TeachingAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.TeachingAssignmentCreateManySubjectInputEnvelope
  set?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  delete?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  connect?: Prisma.TeachingAssignmentWhereUniqueInput | Prisma.TeachingAssignmentWhereUniqueInput[]
  update?: Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.TeachingAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.TeachingAssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
}

export type EnumAssignmentStatusFieldUpdateOperationsInput = {
  set?: $Enums.AssignmentStatus
}

export type TeachingAssignmentCreateWithoutAcademicYearInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.TeacherCreateNestedOneWithoutTeachingAssignmentInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeachingAssignmentsInput
  grade: Prisma.GradeCreateNestedOneWithoutTeachingAssignmentInput
  section: Prisma.SectionCreateNestedOneWithoutTeachingAssignmentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeachingAssignmentCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput>
}

export type TeachingAssignmentCreateManyAcademicYearInputEnvelope = {
  data: Prisma.TeachingAssignmentCreateManyAcademicYearInput | Prisma.TeachingAssignmentCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type TeachingAssignmentUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedCreateWithoutAcademicYearInput>
}

export type TeachingAssignmentUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutAcademicYearInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutAcademicYearInput>
}

export type TeachingAssignmentUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.TeachingAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearInput>
}

export type TeachingAssignmentScalarWhereInput = {
  AND?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
  OR?: Prisma.TeachingAssignmentScalarWhereInput[]
  NOT?: Prisma.TeachingAssignmentScalarWhereInput | Prisma.TeachingAssignmentScalarWhereInput[]
  id?: Prisma.StringFilter<"TeachingAssignment"> | string
  teacherId?: Prisma.StringFilter<"TeachingAssignment"> | string
  subjectId?: Prisma.StringFilter<"TeachingAssignment"> | string
  gradeId?: Prisma.StringFilter<"TeachingAssignment"> | string
  sectionId?: Prisma.StringFilter<"TeachingAssignment"> | string
  organizationId?: Prisma.StringFilter<"TeachingAssignment"> | string
  status?: Prisma.EnumAssignmentStatusFilter<"TeachingAssignment"> | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFilter<"TeachingAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeachingAssignment"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"TeachingAssignment"> | string | null
}

export type TeachingAssignmentCreateWithoutOrganizationInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.TeacherCreateNestedOneWithoutTeachingAssignmentInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeachingAssignmentsInput
  grade: Prisma.GradeCreateNestedOneWithoutTeachingAssignmentInput
  section: Prisma.SectionCreateNestedOneWithoutTeachingAssignmentInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateWithoutOrganizationInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput>
}

export type TeachingAssignmentCreateManyOrganizationInputEnvelope = {
  data: Prisma.TeachingAssignmentCreateManyOrganizationInput | Prisma.TeachingAssignmentCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type TeachingAssignmentUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedCreateWithoutOrganizationInput>
}

export type TeachingAssignmentUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutOrganizationInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutOrganizationInput>
}

export type TeachingAssignmentUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.TeachingAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyWithoutOrganizationInput>
}

export type TeachingAssignmentCreateWithoutTeacherInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  subject: Prisma.SubjectCreateNestedOneWithoutTeachingAssignmentsInput
  grade: Prisma.GradeCreateNestedOneWithoutTeachingAssignmentInput
  section: Prisma.SectionCreateNestedOneWithoutTeachingAssignmentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutTeachingAssignmentInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateWithoutTeacherInput = {
  id?: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentCreateOrConnectWithoutTeacherInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput>
}

export type TeachingAssignmentCreateManyTeacherInputEnvelope = {
  data: Prisma.TeachingAssignmentCreateManyTeacherInput | Prisma.TeachingAssignmentCreateManyTeacherInput[]
  skipDuplicates?: boolean
}

export type TeachingAssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutTeacherInput>
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedCreateWithoutTeacherInput>
}

export type TeachingAssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutTeacherInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutTeacherInput>
}

export type TeachingAssignmentUpdateManyWithWhereWithoutTeacherInput = {
  where: Prisma.TeachingAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyWithoutTeacherInput>
}

export type TeachingAssignmentCreateWithoutGradeInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.TeacherCreateNestedOneWithoutTeachingAssignmentInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeachingAssignmentsInput
  section: Prisma.SectionCreateNestedOneWithoutTeachingAssignmentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutTeachingAssignmentInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateWithoutGradeInput = {
  id?: string
  teacherId: string
  subjectId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentCreateOrConnectWithoutGradeInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput>
}

export type TeachingAssignmentCreateManyGradeInputEnvelope = {
  data: Prisma.TeachingAssignmentCreateManyGradeInput | Prisma.TeachingAssignmentCreateManyGradeInput[]
  skipDuplicates?: boolean
}

export type TeachingAssignmentUpsertWithWhereUniqueWithoutGradeInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutGradeInput>
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedCreateWithoutGradeInput>
}

export type TeachingAssignmentUpdateWithWhereUniqueWithoutGradeInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutGradeInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutGradeInput>
}

export type TeachingAssignmentUpdateManyWithWhereWithoutGradeInput = {
  where: Prisma.TeachingAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyWithoutGradeInput>
}

export type TeachingAssignmentCreateWithoutSectionInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.TeacherCreateNestedOneWithoutTeachingAssignmentInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeachingAssignmentsInput
  grade: Prisma.GradeCreateNestedOneWithoutTeachingAssignmentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutTeachingAssignmentInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateWithoutSectionInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentCreateOrConnectWithoutSectionInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput>
}

export type TeachingAssignmentCreateManySectionInputEnvelope = {
  data: Prisma.TeachingAssignmentCreateManySectionInput | Prisma.TeachingAssignmentCreateManySectionInput[]
  skipDuplicates?: boolean
}

export type TeachingAssignmentUpsertWithWhereUniqueWithoutSectionInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutSectionInput>
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSectionInput>
}

export type TeachingAssignmentUpdateWithWhereUniqueWithoutSectionInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutSectionInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutSectionInput>
}

export type TeachingAssignmentUpdateManyWithWhereWithoutSectionInput = {
  where: Prisma.TeachingAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyWithoutSectionInput>
}

export type TeachingAssignmentCreateWithoutSubjectInput = {
  id?: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.TeacherCreateNestedOneWithoutTeachingAssignmentInput
  grade: Prisma.GradeCreateNestedOneWithoutTeachingAssignmentInput
  section: Prisma.SectionCreateNestedOneWithoutTeachingAssignmentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutTeachingAssignmentInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutTeachingAssignmentInput
}

export type TeachingAssignmentUncheckedCreateWithoutSubjectInput = {
  id?: string
  teacherId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentCreateOrConnectWithoutSubjectInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput>
}

export type TeachingAssignmentCreateManySubjectInputEnvelope = {
  data: Prisma.TeachingAssignmentCreateManySubjectInput | Prisma.TeachingAssignmentCreateManySubjectInput[]
  skipDuplicates?: boolean
}

export type TeachingAssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutSubjectInput>
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedCreateWithoutSubjectInput>
}

export type TeachingAssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.TeachingAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateWithoutSubjectInput, Prisma.TeachingAssignmentUncheckedUpdateWithoutSubjectInput>
}

export type TeachingAssignmentUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.TeachingAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyWithoutSubjectInput>
}

export type TeachingAssignmentCreateManyAcademicYearInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeachingAssignmentUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeachingAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  section?: Prisma.SectionUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeachingAssignmentCreateManyOrganizationInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  sectionId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeachingAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  section?: Prisma.SectionUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentCreateManyTeacherInput = {
  id?: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeachingAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  section?: Prisma.SectionUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentUncheckedUpdateManyWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentCreateManyGradeInput = {
  id?: string
  teacherId: string
  subjectId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateWithoutGradeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeachingAssignmentsNestedInput
  section?: Prisma.SectionUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateWithoutGradeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentUncheckedUpdateManyWithoutGradeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentCreateManySectionInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateWithoutSectionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeachingAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateWithoutSectionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentUncheckedUpdateManyWithoutSectionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentCreateManySubjectInput = {
  id?: string
  teacherId: string
  gradeId: string
  sectionId: string
  organizationId: string
  status?: $Enums.AssignmentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type TeachingAssignmentUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.TeacherUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  grade?: Prisma.GradeUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  section?: Prisma.SectionUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeachingAssignmentNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput
}

export type TeachingAssignmentUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TeachingAssignmentUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type TeachingAssignmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.GradeDefaultArgs<ExtArgs>
  section?: boolean | Prisma.SectionDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.TeachingAssignment$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["teachingAssignment"]>

export type TeachingAssignmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.GradeDefaultArgs<ExtArgs>
  section?: boolean | Prisma.SectionDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.TeachingAssignment$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["teachingAssignment"]>

export type TeachingAssignmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.GradeDefaultArgs<ExtArgs>
  section?: boolean | Prisma.SectionDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.TeachingAssignment$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["teachingAssignment"]>

export type TeachingAssignmentSelectScalar = {
  id?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
}

export type TeachingAssignmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "teacherId" | "subjectId" | "gradeId" | "sectionId" | "organizationId" | "status" | "createdAt" | "updatedAt" | "academicYearId", ExtArgs["result"]["teachingAssignment"]>
export type TeachingAssignmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.GradeDefaultArgs<ExtArgs>
  section?: boolean | Prisma.SectionDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.TeachingAssignment$academicYearArgs<ExtArgs>
}
export type TeachingAssignmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.GradeDefaultArgs<ExtArgs>
  section?: boolean | Prisma.SectionDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.TeachingAssignment$academicYearArgs<ExtArgs>
}
export type TeachingAssignmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teacher?: boolean | Prisma.TeacherDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.GradeDefaultArgs<ExtArgs>
  section?: boolean | Prisma.SectionDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.TeachingAssignment$academicYearArgs<ExtArgs>
}

export type $TeachingAssignmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeachingAssignment"
  objects: {
    teacher: Prisma.$TeacherPayload<ExtArgs>
    subject: Prisma.$SubjectPayload<ExtArgs>
    grade: Prisma.$GradePayload<ExtArgs>
    section: Prisma.$SectionPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
    academicYear: Prisma.$AcademicYearPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    teacherId: string
    subjectId: string
    gradeId: string
    sectionId: string
    organizationId: string
    status: $Enums.AssignmentStatus
    createdAt: Date
    updatedAt: Date
    academicYearId: string | null
  }, ExtArgs["result"]["teachingAssignment"]>
  composites: {}
}

export type TeachingAssignmentGetPayload<S extends boolean | null | undefined | TeachingAssignmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload, S>

export type TeachingAssignmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeachingAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeachingAssignmentCountAggregateInputType | true
  }

export interface TeachingAssignmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeachingAssignment'], meta: { name: 'TeachingAssignment' } }
  /**
   * Find zero or one TeachingAssignment that matches the filter.
   * @param {TeachingAssignmentFindUniqueArgs} args - Arguments to find a TeachingAssignment
   * @example
   * // Get one TeachingAssignment
   * const teachingAssignment = await prisma.teachingAssignment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeachingAssignmentFindUniqueArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeachingAssignment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeachingAssignmentFindUniqueOrThrowArgs} args - Arguments to find a TeachingAssignment
   * @example
   * // Get one TeachingAssignment
   * const teachingAssignment = await prisma.teachingAssignment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeachingAssignmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeachingAssignment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentFindFirstArgs} args - Arguments to find a TeachingAssignment
   * @example
   * // Get one TeachingAssignment
   * const teachingAssignment = await prisma.teachingAssignment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeachingAssignmentFindFirstArgs>(args?: Prisma.SelectSubset<T, TeachingAssignmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeachingAssignment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentFindFirstOrThrowArgs} args - Arguments to find a TeachingAssignment
   * @example
   * // Get one TeachingAssignment
   * const teachingAssignment = await prisma.teachingAssignment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeachingAssignmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeachingAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeachingAssignments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeachingAssignments
   * const teachingAssignments = await prisma.teachingAssignment.findMany()
   * 
   * // Get first 10 TeachingAssignments
   * const teachingAssignments = await prisma.teachingAssignment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teachingAssignmentWithIdOnly = await prisma.teachingAssignment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeachingAssignmentFindManyArgs>(args?: Prisma.SelectSubset<T, TeachingAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeachingAssignment.
   * @param {TeachingAssignmentCreateArgs} args - Arguments to create a TeachingAssignment.
   * @example
   * // Create one TeachingAssignment
   * const TeachingAssignment = await prisma.teachingAssignment.create({
   *   data: {
   *     // ... data to create a TeachingAssignment
   *   }
   * })
   * 
   */
  create<T extends TeachingAssignmentCreateArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentCreateArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeachingAssignments.
   * @param {TeachingAssignmentCreateManyArgs} args - Arguments to create many TeachingAssignments.
   * @example
   * // Create many TeachingAssignments
   * const teachingAssignment = await prisma.teachingAssignment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeachingAssignmentCreateManyArgs>(args?: Prisma.SelectSubset<T, TeachingAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeachingAssignments and returns the data saved in the database.
   * @param {TeachingAssignmentCreateManyAndReturnArgs} args - Arguments to create many TeachingAssignments.
   * @example
   * // Create many TeachingAssignments
   * const teachingAssignment = await prisma.teachingAssignment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeachingAssignments and only return the `id`
   * const teachingAssignmentWithIdOnly = await prisma.teachingAssignment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeachingAssignmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeachingAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeachingAssignment.
   * @param {TeachingAssignmentDeleteArgs} args - Arguments to delete one TeachingAssignment.
   * @example
   * // Delete one TeachingAssignment
   * const TeachingAssignment = await prisma.teachingAssignment.delete({
   *   where: {
   *     // ... filter to delete one TeachingAssignment
   *   }
   * })
   * 
   */
  delete<T extends TeachingAssignmentDeleteArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentDeleteArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeachingAssignment.
   * @param {TeachingAssignmentUpdateArgs} args - Arguments to update one TeachingAssignment.
   * @example
   * // Update one TeachingAssignment
   * const teachingAssignment = await prisma.teachingAssignment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeachingAssignmentUpdateArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentUpdateArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeachingAssignments.
   * @param {TeachingAssignmentDeleteManyArgs} args - Arguments to filter TeachingAssignments to delete.
   * @example
   * // Delete a few TeachingAssignments
   * const { count } = await prisma.teachingAssignment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeachingAssignmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeachingAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeachingAssignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeachingAssignments
   * const teachingAssignment = await prisma.teachingAssignment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeachingAssignmentUpdateManyArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeachingAssignments and returns the data updated in the database.
   * @param {TeachingAssignmentUpdateManyAndReturnArgs} args - Arguments to update many TeachingAssignments.
   * @example
   * // Update many TeachingAssignments
   * const teachingAssignment = await prisma.teachingAssignment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeachingAssignments and only return the `id`
   * const teachingAssignmentWithIdOnly = await prisma.teachingAssignment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeachingAssignmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeachingAssignment.
   * @param {TeachingAssignmentUpsertArgs} args - Arguments to update or create a TeachingAssignment.
   * @example
   * // Update or create a TeachingAssignment
   * const teachingAssignment = await prisma.teachingAssignment.upsert({
   *   create: {
   *     // ... data to create a TeachingAssignment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeachingAssignment we want to update
   *   }
   * })
   */
  upsert<T extends TeachingAssignmentUpsertArgs>(args: Prisma.SelectSubset<T, TeachingAssignmentUpsertArgs<ExtArgs>>): Prisma.Prisma__TeachingAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeachingAssignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentCountArgs} args - Arguments to filter TeachingAssignments to count.
   * @example
   * // Count the number of TeachingAssignments
   * const count = await prisma.teachingAssignment.count({
   *   where: {
   *     // ... the filter for the TeachingAssignments we want to count
   *   }
   * })
  **/
  count<T extends TeachingAssignmentCountArgs>(
    args?: Prisma.Subset<T, TeachingAssignmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeachingAssignmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeachingAssignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeachingAssignmentAggregateArgs>(args: Prisma.Subset<T, TeachingAssignmentAggregateArgs>): Prisma.PrismaPromise<GetTeachingAssignmentAggregateType<T>>

  /**
   * Group by TeachingAssignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeachingAssignmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeachingAssignmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeachingAssignmentGroupByArgs['orderBy'] }
      : { orderBy?: TeachingAssignmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeachingAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachingAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeachingAssignment model
 */
readonly fields: TeachingAssignmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeachingAssignment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeachingAssignmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  teacher<T extends Prisma.TeacherDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeacherDefaultArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>): Prisma.Prisma__SubjectClient<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  grade<T extends Prisma.GradeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GradeDefaultArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  section<T extends Prisma.SectionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SectionDefaultArgs<ExtArgs>>): Prisma.Prisma__SectionClient<runtime.Types.Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  academicYear<T extends Prisma.TeachingAssignment$academicYearArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeachingAssignment$academicYearArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeachingAssignment model
 */
export interface TeachingAssignmentFieldRefs {
  readonly id: Prisma.FieldRef<"TeachingAssignment", 'String'>
  readonly teacherId: Prisma.FieldRef<"TeachingAssignment", 'String'>
  readonly subjectId: Prisma.FieldRef<"TeachingAssignment", 'String'>
  readonly gradeId: Prisma.FieldRef<"TeachingAssignment", 'String'>
  readonly sectionId: Prisma.FieldRef<"TeachingAssignment", 'String'>
  readonly organizationId: Prisma.FieldRef<"TeachingAssignment", 'String'>
  readonly status: Prisma.FieldRef<"TeachingAssignment", 'AssignmentStatus'>
  readonly createdAt: Prisma.FieldRef<"TeachingAssignment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TeachingAssignment", 'DateTime'>
  readonly academicYearId: Prisma.FieldRef<"TeachingAssignment", 'String'>
}
    

// Custom InputTypes
/**
 * TeachingAssignment findUnique
 */
export type TeachingAssignmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeachingAssignment to fetch.
   */
  where: Prisma.TeachingAssignmentWhereUniqueInput
}

/**
 * TeachingAssignment findUniqueOrThrow
 */
export type TeachingAssignmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeachingAssignment to fetch.
   */
  where: Prisma.TeachingAssignmentWhereUniqueInput
}

/**
 * TeachingAssignment findFirst
 */
export type TeachingAssignmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeachingAssignment to fetch.
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeachingAssignments to fetch.
   */
  orderBy?: Prisma.TeachingAssignmentOrderByWithRelationInput | Prisma.TeachingAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeachingAssignments.
   */
  cursor?: Prisma.TeachingAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeachingAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeachingAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeachingAssignments.
   */
  distinct?: Prisma.TeachingAssignmentScalarFieldEnum | Prisma.TeachingAssignmentScalarFieldEnum[]
}

/**
 * TeachingAssignment findFirstOrThrow
 */
export type TeachingAssignmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeachingAssignment to fetch.
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeachingAssignments to fetch.
   */
  orderBy?: Prisma.TeachingAssignmentOrderByWithRelationInput | Prisma.TeachingAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeachingAssignments.
   */
  cursor?: Prisma.TeachingAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeachingAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeachingAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeachingAssignments.
   */
  distinct?: Prisma.TeachingAssignmentScalarFieldEnum | Prisma.TeachingAssignmentScalarFieldEnum[]
}

/**
 * TeachingAssignment findMany
 */
export type TeachingAssignmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeachingAssignments to fetch.
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeachingAssignments to fetch.
   */
  orderBy?: Prisma.TeachingAssignmentOrderByWithRelationInput | Prisma.TeachingAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeachingAssignments.
   */
  cursor?: Prisma.TeachingAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeachingAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeachingAssignments.
   */
  skip?: number
  distinct?: Prisma.TeachingAssignmentScalarFieldEnum | Prisma.TeachingAssignmentScalarFieldEnum[]
}

/**
 * TeachingAssignment create
 */
export type TeachingAssignmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * The data needed to create a TeachingAssignment.
   */
  data: Prisma.XOR<Prisma.TeachingAssignmentCreateInput, Prisma.TeachingAssignmentUncheckedCreateInput>
}

/**
 * TeachingAssignment createMany
 */
export type TeachingAssignmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeachingAssignments.
   */
  data: Prisma.TeachingAssignmentCreateManyInput | Prisma.TeachingAssignmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeachingAssignment createManyAndReturn
 */
export type TeachingAssignmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * The data used to create many TeachingAssignments.
   */
  data: Prisma.TeachingAssignmentCreateManyInput | Prisma.TeachingAssignmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TeachingAssignment update
 */
export type TeachingAssignmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * The data needed to update a TeachingAssignment.
   */
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateInput, Prisma.TeachingAssignmentUncheckedUpdateInput>
  /**
   * Choose, which TeachingAssignment to update.
   */
  where: Prisma.TeachingAssignmentWhereUniqueInput
}

/**
 * TeachingAssignment updateMany
 */
export type TeachingAssignmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeachingAssignments.
   */
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyInput>
  /**
   * Filter which TeachingAssignments to update
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * Limit how many TeachingAssignments to update.
   */
  limit?: number
}

/**
 * TeachingAssignment updateManyAndReturn
 */
export type TeachingAssignmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * The data used to update TeachingAssignments.
   */
  data: Prisma.XOR<Prisma.TeachingAssignmentUpdateManyMutationInput, Prisma.TeachingAssignmentUncheckedUpdateManyInput>
  /**
   * Filter which TeachingAssignments to update
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * Limit how many TeachingAssignments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TeachingAssignment upsert
 */
export type TeachingAssignmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * The filter to search for the TeachingAssignment to update in case it exists.
   */
  where: Prisma.TeachingAssignmentWhereUniqueInput
  /**
   * In case the TeachingAssignment found by the `where` argument doesn't exist, create a new TeachingAssignment with this data.
   */
  create: Prisma.XOR<Prisma.TeachingAssignmentCreateInput, Prisma.TeachingAssignmentUncheckedCreateInput>
  /**
   * In case the TeachingAssignment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeachingAssignmentUpdateInput, Prisma.TeachingAssignmentUncheckedUpdateInput>
}

/**
 * TeachingAssignment delete
 */
export type TeachingAssignmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  /**
   * Filter which TeachingAssignment to delete.
   */
  where: Prisma.TeachingAssignmentWhereUniqueInput
}

/**
 * TeachingAssignment deleteMany
 */
export type TeachingAssignmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeachingAssignments to delete
   */
  where?: Prisma.TeachingAssignmentWhereInput
  /**
   * Limit how many TeachingAssignments to delete.
   */
  limit?: number
}

/**
 * TeachingAssignment.academicYear
 */
export type TeachingAssignment$academicYearArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  where?: Prisma.AcademicYearWhereInput
}

/**
 * TeachingAssignment without action
 */
export type TeachingAssignmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
}
