
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Fee` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Fee
 * 
 */
export type FeeModel = runtime.Types.Result.DefaultSelection<Prisma.$FeePayload>

export type AggregateFee = {
  _count: FeeCountAggregateOutputType | null
  _avg: FeeAvgAggregateOutputType | null
  _sum: FeeSumAggregateOutputType | null
  _min: FeeMinAggregateOutputType | null
  _max: FeeMaxAggregateOutputType | null
}

export type FeeAvgAggregateOutputType = {
  totalFee: number | null
  paidAmount: number | null
  pendingAmount: number | null
}

export type FeeSumAggregateOutputType = {
  totalFee: number | null
  paidAmount: number | null
  pendingAmount: number | null
}

export type FeeMinAggregateOutputType = {
  id: string | null
  totalFee: number | null
  paidAmount: number | null
  pendingAmount: number | null
  dueDate: Date | null
  status: $Enums.FeeStatus | null
  studentId: string | null
  feeCategoryId: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type FeeMaxAggregateOutputType = {
  id: string | null
  totalFee: number | null
  paidAmount: number | null
  pendingAmount: number | null
  dueDate: Date | null
  status: $Enums.FeeStatus | null
  studentId: string | null
  feeCategoryId: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type FeeCountAggregateOutputType = {
  id: number
  totalFee: number
  paidAmount: number
  pendingAmount: number
  dueDate: number
  status: number
  studentId: number
  feeCategoryId: number
  organizationId: number
  createdAt: number
  updatedAt: number
  academicYearId: number
  _all: number
}


export type FeeAvgAggregateInputType = {
  totalFee?: true
  paidAmount?: true
  pendingAmount?: true
}

export type FeeSumAggregateInputType = {
  totalFee?: true
  paidAmount?: true
  pendingAmount?: true
}

export type FeeMinAggregateInputType = {
  id?: true
  totalFee?: true
  paidAmount?: true
  pendingAmount?: true
  dueDate?: true
  status?: true
  studentId?: true
  feeCategoryId?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type FeeMaxAggregateInputType = {
  id?: true
  totalFee?: true
  paidAmount?: true
  pendingAmount?: true
  dueDate?: true
  status?: true
  studentId?: true
  feeCategoryId?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type FeeCountAggregateInputType = {
  id?: true
  totalFee?: true
  paidAmount?: true
  pendingAmount?: true
  dueDate?: true
  status?: true
  studentId?: true
  feeCategoryId?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
  _all?: true
}

export type FeeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Fee to aggregate.
   */
  where?: Prisma.FeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fees to fetch.
   */
  orderBy?: Prisma.FeeOrderByWithRelationInput | Prisma.FeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Fees
  **/
  _count?: true | FeeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FeeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FeeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeeMaxAggregateInputType
}

export type GetFeeAggregateType<T extends FeeAggregateArgs> = {
      [P in keyof T & keyof AggregateFee]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFee[P]>
    : Prisma.GetScalarType<T[P], AggregateFee[P]>
}




export type FeeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeeWhereInput
  orderBy?: Prisma.FeeOrderByWithAggregationInput | Prisma.FeeOrderByWithAggregationInput[]
  by: Prisma.FeeScalarFieldEnum[] | Prisma.FeeScalarFieldEnum
  having?: Prisma.FeeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeeCountAggregateInputType | true
  _avg?: FeeAvgAggregateInputType
  _sum?: FeeSumAggregateInputType
  _min?: FeeMinAggregateInputType
  _max?: FeeMaxAggregateInputType
}

export type FeeGroupByOutputType = {
  id: string
  totalFee: number
  paidAmount: number
  pendingAmount: number | null
  dueDate: Date
  status: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  organizationId: string
  createdAt: Date
  updatedAt: Date
  academicYearId: string
  _count: FeeCountAggregateOutputType | null
  _avg: FeeAvgAggregateOutputType | null
  _sum: FeeSumAggregateOutputType | null
  _min: FeeMinAggregateOutputType | null
  _max: FeeMaxAggregateOutputType | null
}

type GetFeeGroupByPayload<T extends FeeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeeGroupByOutputType[P]>
      }
    >
  >



export type FeeWhereInput = {
  AND?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[]
  OR?: Prisma.FeeWhereInput[]
  NOT?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[]
  id?: Prisma.StringFilter<"Fee"> | string
  totalFee?: Prisma.FloatFilter<"Fee"> | number
  paidAmount?: Prisma.FloatFilter<"Fee"> | number
  pendingAmount?: Prisma.FloatNullableFilter<"Fee"> | number | null
  dueDate?: Prisma.DateTimeFilter<"Fee"> | Date | string
  status?: Prisma.EnumFeeStatusFilter<"Fee"> | $Enums.FeeStatus
  studentId?: Prisma.StringFilter<"Fee"> | string
  feeCategoryId?: Prisma.StringFilter<"Fee"> | string
  organizationId?: Prisma.StringFilter<"Fee"> | string
  createdAt?: Prisma.DateTimeFilter<"Fee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Fee"> | Date | string
  academicYearId?: Prisma.StringFilter<"Fee"> | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  feeCategory?: Prisma.XOR<Prisma.FeeCategoryScalarRelationFilter, Prisma.FeeCategoryWhereInput>
  Organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  payments?: Prisma.FeePaymentListRelationFilter
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
}

export type FeeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrderInput | Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  status?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  feeCategoryId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  student?: Prisma.StudentOrderByWithRelationInput
  feeCategory?: Prisma.FeeCategoryOrderByWithRelationInput
  Organization?: Prisma.OrganizationOrderByWithRelationInput
  payments?: Prisma.FeePaymentOrderByRelationAggregateInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  _relevance?: Prisma.FeeOrderByRelevanceInput
}

export type FeeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[]
  OR?: Prisma.FeeWhereInput[]
  NOT?: Prisma.FeeWhereInput | Prisma.FeeWhereInput[]
  totalFee?: Prisma.FloatFilter<"Fee"> | number
  paidAmount?: Prisma.FloatFilter<"Fee"> | number
  pendingAmount?: Prisma.FloatNullableFilter<"Fee"> | number | null
  dueDate?: Prisma.DateTimeFilter<"Fee"> | Date | string
  status?: Prisma.EnumFeeStatusFilter<"Fee"> | $Enums.FeeStatus
  studentId?: Prisma.StringFilter<"Fee"> | string
  feeCategoryId?: Prisma.StringFilter<"Fee"> | string
  organizationId?: Prisma.StringFilter<"Fee"> | string
  createdAt?: Prisma.DateTimeFilter<"Fee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Fee"> | Date | string
  academicYearId?: Prisma.StringFilter<"Fee"> | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  feeCategory?: Prisma.XOR<Prisma.FeeCategoryScalarRelationFilter, Prisma.FeeCategoryWhereInput>
  Organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  payments?: Prisma.FeePaymentListRelationFilter
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
}, "id">

export type FeeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrderInput | Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  status?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  feeCategoryId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  _count?: Prisma.FeeCountOrderByAggregateInput
  _avg?: Prisma.FeeAvgOrderByAggregateInput
  _max?: Prisma.FeeMaxOrderByAggregateInput
  _min?: Prisma.FeeMinOrderByAggregateInput
  _sum?: Prisma.FeeSumOrderByAggregateInput
}

export type FeeScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeeScalarWhereWithAggregatesInput | Prisma.FeeScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeeScalarWhereWithAggregatesInput | Prisma.FeeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Fee"> | string
  totalFee?: Prisma.FloatWithAggregatesFilter<"Fee"> | number
  paidAmount?: Prisma.FloatWithAggregatesFilter<"Fee"> | number
  pendingAmount?: Prisma.FloatNullableWithAggregatesFilter<"Fee"> | number | null
  dueDate?: Prisma.DateTimeWithAggregatesFilter<"Fee"> | Date | string
  status?: Prisma.EnumFeeStatusWithAggregatesFilter<"Fee"> | $Enums.FeeStatus
  studentId?: Prisma.StringWithAggregatesFilter<"Fee"> | string
  feeCategoryId?: Prisma.StringWithAggregatesFilter<"Fee"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Fee"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Fee"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Fee"> | Date | string
  academicYearId?: Prisma.StringWithAggregatesFilter<"Fee"> | string
}

export type FeeCreateInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutFeeInput
  feeCategory: Prisma.FeeCategoryCreateNestedOneWithoutFeesInput
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeInput
  payments?: Prisma.FeePaymentCreateNestedManyWithoutFeeInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutFeesInput
}

export type FeeUncheckedCreateInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
  payments?: Prisma.FeePaymentUncheckedCreateNestedManyWithoutFeeInput
}

export type FeeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutFeeNestedInput
  feeCategory?: Prisma.FeeCategoryUpdateOneRequiredWithoutFeesNestedInput
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeNestedInput
  payments?: Prisma.FeePaymentUpdateManyWithoutFeeNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutFeesNestedInput
}

export type FeeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.FeePaymentUncheckedUpdateManyWithoutFeeNestedInput
}

export type FeeCreateManyInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
}

export type FeeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeeListRelationFilter = {
  every?: Prisma.FeeWhereInput
  some?: Prisma.FeeWhereInput
  none?: Prisma.FeeWhereInput
}

export type FeeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeeOrderByRelevanceInput = {
  fields: Prisma.FeeOrderByRelevanceFieldEnum | Prisma.FeeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FeeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  status?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  feeCategoryId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type FeeAvgOrderByAggregateInput = {
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrder
}

export type FeeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  status?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  feeCategoryId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type FeeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  status?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  feeCategoryId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type FeeSumOrderByAggregateInput = {
  totalFee?: Prisma.SortOrder
  paidAmount?: Prisma.SortOrder
  pendingAmount?: Prisma.SortOrder
}

export type FeeScalarRelationFilter = {
  is?: Prisma.FeeWhereInput
  isNot?: Prisma.FeeWhereInput
}

export type FeeCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutAcademicYearInput, Prisma.FeeUncheckedCreateWithoutAcademicYearInput> | Prisma.FeeCreateWithoutAcademicYearInput[] | Prisma.FeeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutAcademicYearInput | Prisma.FeeCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.FeeCreateManyAcademicYearInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutAcademicYearInput, Prisma.FeeUncheckedCreateWithoutAcademicYearInput> | Prisma.FeeCreateWithoutAcademicYearInput[] | Prisma.FeeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutAcademicYearInput | Prisma.FeeCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.FeeCreateManyAcademicYearInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutAcademicYearInput, Prisma.FeeUncheckedCreateWithoutAcademicYearInput> | Prisma.FeeCreateWithoutAcademicYearInput[] | Prisma.FeeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutAcademicYearInput | Prisma.FeeCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.FeeUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.FeeCreateManyAcademicYearInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.FeeUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutAcademicYearInput | Prisma.FeeUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutAcademicYearInput, Prisma.FeeUncheckedCreateWithoutAcademicYearInput> | Prisma.FeeCreateWithoutAcademicYearInput[] | Prisma.FeeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutAcademicYearInput | Prisma.FeeCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.FeeUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.FeeCreateManyAcademicYearInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.FeeUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutAcademicYearInput | Prisma.FeeUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutOrganizationInput, Prisma.FeeUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCreateWithoutOrganizationInput[] | Prisma.FeeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutOrganizationInput | Prisma.FeeCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.FeeCreateManyOrganizationInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutOrganizationInput, Prisma.FeeUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCreateWithoutOrganizationInput[] | Prisma.FeeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutOrganizationInput | Prisma.FeeCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.FeeCreateManyOrganizationInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutOrganizationInput, Prisma.FeeUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCreateWithoutOrganizationInput[] | Prisma.FeeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutOrganizationInput | Prisma.FeeCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.FeeUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.FeeCreateManyOrganizationInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.FeeUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutOrganizationInput | Prisma.FeeUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutOrganizationInput, Prisma.FeeUncheckedCreateWithoutOrganizationInput> | Prisma.FeeCreateWithoutOrganizationInput[] | Prisma.FeeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutOrganizationInput | Prisma.FeeCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.FeeUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.FeeCreateManyOrganizationInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.FeeUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutOrganizationInput | Prisma.FeeUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutStudentInput, Prisma.FeeUncheckedCreateWithoutStudentInput> | Prisma.FeeCreateWithoutStudentInput[] | Prisma.FeeUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutStudentInput | Prisma.FeeCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.FeeCreateManyStudentInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutStudentInput, Prisma.FeeUncheckedCreateWithoutStudentInput> | Prisma.FeeCreateWithoutStudentInput[] | Prisma.FeeUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutStudentInput | Prisma.FeeCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.FeeCreateManyStudentInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutStudentInput, Prisma.FeeUncheckedCreateWithoutStudentInput> | Prisma.FeeCreateWithoutStudentInput[] | Prisma.FeeUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutStudentInput | Prisma.FeeCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutStudentInput | Prisma.FeeUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.FeeCreateManyStudentInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutStudentInput | Prisma.FeeUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutStudentInput | Prisma.FeeUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutStudentInput, Prisma.FeeUncheckedCreateWithoutStudentInput> | Prisma.FeeCreateWithoutStudentInput[] | Prisma.FeeUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutStudentInput | Prisma.FeeCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutStudentInput | Prisma.FeeUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.FeeCreateManyStudentInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutStudentInput | Prisma.FeeUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutStudentInput | Prisma.FeeUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumFeeStatusFieldUpdateOperationsInput = {
  set?: $Enums.FeeStatus
}

export type FeeCreateNestedOneWithoutPaymentsInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutPaymentsInput, Prisma.FeeUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutPaymentsInput
  connect?: Prisma.FeeWhereUniqueInput
}

export type FeeUpdateOneRequiredWithoutPaymentsNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutPaymentsInput, Prisma.FeeUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutPaymentsInput
  upsert?: Prisma.FeeUpsertWithoutPaymentsInput
  connect?: Prisma.FeeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FeeUpdateToOneWithWhereWithoutPaymentsInput, Prisma.FeeUpdateWithoutPaymentsInput>, Prisma.FeeUncheckedUpdateWithoutPaymentsInput>
}

export type FeeCreateNestedManyWithoutFeeCategoryInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutFeeCategoryInput, Prisma.FeeUncheckedCreateWithoutFeeCategoryInput> | Prisma.FeeCreateWithoutFeeCategoryInput[] | Prisma.FeeUncheckedCreateWithoutFeeCategoryInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutFeeCategoryInput | Prisma.FeeCreateOrConnectWithoutFeeCategoryInput[]
  createMany?: Prisma.FeeCreateManyFeeCategoryInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUncheckedCreateNestedManyWithoutFeeCategoryInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutFeeCategoryInput, Prisma.FeeUncheckedCreateWithoutFeeCategoryInput> | Prisma.FeeCreateWithoutFeeCategoryInput[] | Prisma.FeeUncheckedCreateWithoutFeeCategoryInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutFeeCategoryInput | Prisma.FeeCreateOrConnectWithoutFeeCategoryInput[]
  createMany?: Prisma.FeeCreateManyFeeCategoryInputEnvelope
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
}

export type FeeUpdateManyWithoutFeeCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutFeeCategoryInput, Prisma.FeeUncheckedCreateWithoutFeeCategoryInput> | Prisma.FeeCreateWithoutFeeCategoryInput[] | Prisma.FeeUncheckedCreateWithoutFeeCategoryInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutFeeCategoryInput | Prisma.FeeCreateOrConnectWithoutFeeCategoryInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutFeeCategoryInput | Prisma.FeeUpsertWithWhereUniqueWithoutFeeCategoryInput[]
  createMany?: Prisma.FeeCreateManyFeeCategoryInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutFeeCategoryInput | Prisma.FeeUpdateWithWhereUniqueWithoutFeeCategoryInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutFeeCategoryInput | Prisma.FeeUpdateManyWithWhereWithoutFeeCategoryInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeUncheckedUpdateManyWithoutFeeCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.FeeCreateWithoutFeeCategoryInput, Prisma.FeeUncheckedCreateWithoutFeeCategoryInput> | Prisma.FeeCreateWithoutFeeCategoryInput[] | Prisma.FeeUncheckedCreateWithoutFeeCategoryInput[]
  connectOrCreate?: Prisma.FeeCreateOrConnectWithoutFeeCategoryInput | Prisma.FeeCreateOrConnectWithoutFeeCategoryInput[]
  upsert?: Prisma.FeeUpsertWithWhereUniqueWithoutFeeCategoryInput | Prisma.FeeUpsertWithWhereUniqueWithoutFeeCategoryInput[]
  createMany?: Prisma.FeeCreateManyFeeCategoryInputEnvelope
  set?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  disconnect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  delete?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  connect?: Prisma.FeeWhereUniqueInput | Prisma.FeeWhereUniqueInput[]
  update?: Prisma.FeeUpdateWithWhereUniqueWithoutFeeCategoryInput | Prisma.FeeUpdateWithWhereUniqueWithoutFeeCategoryInput[]
  updateMany?: Prisma.FeeUpdateManyWithWhereWithoutFeeCategoryInput | Prisma.FeeUpdateManyWithWhereWithoutFeeCategoryInput[]
  deleteMany?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
}

export type FeeCreateWithoutAcademicYearInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutFeeInput
  feeCategory: Prisma.FeeCategoryCreateNestedOneWithoutFeesInput
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeInput
  payments?: Prisma.FeePaymentCreateNestedManyWithoutFeeInput
}

export type FeeUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  payments?: Prisma.FeePaymentUncheckedCreateNestedManyWithoutFeeInput
}

export type FeeCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.FeeWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCreateWithoutAcademicYearInput, Prisma.FeeUncheckedCreateWithoutAcademicYearInput>
}

export type FeeCreateManyAcademicYearInputEnvelope = {
  data: Prisma.FeeCreateManyAcademicYearInput | Prisma.FeeCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type FeeUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.FeeWhereUniqueInput
  update: Prisma.XOR<Prisma.FeeUpdateWithoutAcademicYearInput, Prisma.FeeUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.FeeCreateWithoutAcademicYearInput, Prisma.FeeUncheckedCreateWithoutAcademicYearInput>
}

export type FeeUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.FeeWhereUniqueInput
  data: Prisma.XOR<Prisma.FeeUpdateWithoutAcademicYearInput, Prisma.FeeUncheckedUpdateWithoutAcademicYearInput>
}

export type FeeUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.FeeScalarWhereInput
  data: Prisma.XOR<Prisma.FeeUpdateManyMutationInput, Prisma.FeeUncheckedUpdateManyWithoutAcademicYearInput>
}

export type FeeScalarWhereInput = {
  AND?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
  OR?: Prisma.FeeScalarWhereInput[]
  NOT?: Prisma.FeeScalarWhereInput | Prisma.FeeScalarWhereInput[]
  id?: Prisma.StringFilter<"Fee"> | string
  totalFee?: Prisma.FloatFilter<"Fee"> | number
  paidAmount?: Prisma.FloatFilter<"Fee"> | number
  pendingAmount?: Prisma.FloatNullableFilter<"Fee"> | number | null
  dueDate?: Prisma.DateTimeFilter<"Fee"> | Date | string
  status?: Prisma.EnumFeeStatusFilter<"Fee"> | $Enums.FeeStatus
  studentId?: Prisma.StringFilter<"Fee"> | string
  feeCategoryId?: Prisma.StringFilter<"Fee"> | string
  organizationId?: Prisma.StringFilter<"Fee"> | string
  createdAt?: Prisma.DateTimeFilter<"Fee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Fee"> | Date | string
  academicYearId?: Prisma.StringFilter<"Fee"> | string
}

export type FeeCreateWithoutOrganizationInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutFeeInput
  feeCategory: Prisma.FeeCategoryCreateNestedOneWithoutFeesInput
  payments?: Prisma.FeePaymentCreateNestedManyWithoutFeeInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutFeesInput
}

export type FeeUncheckedCreateWithoutOrganizationInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
  payments?: Prisma.FeePaymentUncheckedCreateNestedManyWithoutFeeInput
}

export type FeeCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.FeeWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCreateWithoutOrganizationInput, Prisma.FeeUncheckedCreateWithoutOrganizationInput>
}

export type FeeCreateManyOrganizationInputEnvelope = {
  data: Prisma.FeeCreateManyOrganizationInput | Prisma.FeeCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type FeeUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.FeeWhereUniqueInput
  update: Prisma.XOR<Prisma.FeeUpdateWithoutOrganizationInput, Prisma.FeeUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.FeeCreateWithoutOrganizationInput, Prisma.FeeUncheckedCreateWithoutOrganizationInput>
}

export type FeeUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.FeeWhereUniqueInput
  data: Prisma.XOR<Prisma.FeeUpdateWithoutOrganizationInput, Prisma.FeeUncheckedUpdateWithoutOrganizationInput>
}

export type FeeUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.FeeScalarWhereInput
  data: Prisma.XOR<Prisma.FeeUpdateManyMutationInput, Prisma.FeeUncheckedUpdateManyWithoutOrganizationInput>
}

export type FeeCreateWithoutStudentInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  feeCategory: Prisma.FeeCategoryCreateNestedOneWithoutFeesInput
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeInput
  payments?: Prisma.FeePaymentCreateNestedManyWithoutFeeInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutFeesInput
}

export type FeeUncheckedCreateWithoutStudentInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
  payments?: Prisma.FeePaymentUncheckedCreateNestedManyWithoutFeeInput
}

export type FeeCreateOrConnectWithoutStudentInput = {
  where: Prisma.FeeWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCreateWithoutStudentInput, Prisma.FeeUncheckedCreateWithoutStudentInput>
}

export type FeeCreateManyStudentInputEnvelope = {
  data: Prisma.FeeCreateManyStudentInput | Prisma.FeeCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type FeeUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.FeeWhereUniqueInput
  update: Prisma.XOR<Prisma.FeeUpdateWithoutStudentInput, Prisma.FeeUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.FeeCreateWithoutStudentInput, Prisma.FeeUncheckedCreateWithoutStudentInput>
}

export type FeeUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.FeeWhereUniqueInput
  data: Prisma.XOR<Prisma.FeeUpdateWithoutStudentInput, Prisma.FeeUncheckedUpdateWithoutStudentInput>
}

export type FeeUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.FeeScalarWhereInput
  data: Prisma.XOR<Prisma.FeeUpdateManyMutationInput, Prisma.FeeUncheckedUpdateManyWithoutStudentInput>
}

export type FeeCreateWithoutPaymentsInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutFeeInput
  feeCategory: Prisma.FeeCategoryCreateNestedOneWithoutFeesInput
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutFeesInput
}

export type FeeUncheckedCreateWithoutPaymentsInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
}

export type FeeCreateOrConnectWithoutPaymentsInput = {
  where: Prisma.FeeWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCreateWithoutPaymentsInput, Prisma.FeeUncheckedCreateWithoutPaymentsInput>
}

export type FeeUpsertWithoutPaymentsInput = {
  update: Prisma.XOR<Prisma.FeeUpdateWithoutPaymentsInput, Prisma.FeeUncheckedUpdateWithoutPaymentsInput>
  create: Prisma.XOR<Prisma.FeeCreateWithoutPaymentsInput, Prisma.FeeUncheckedCreateWithoutPaymentsInput>
  where?: Prisma.FeeWhereInput
}

export type FeeUpdateToOneWithWhereWithoutPaymentsInput = {
  where?: Prisma.FeeWhereInput
  data: Prisma.XOR<Prisma.FeeUpdateWithoutPaymentsInput, Prisma.FeeUncheckedUpdateWithoutPaymentsInput>
}

export type FeeUpdateWithoutPaymentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutFeeNestedInput
  feeCategory?: Prisma.FeeCategoryUpdateOneRequiredWithoutFeesNestedInput
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutFeesNestedInput
}

export type FeeUncheckedUpdateWithoutPaymentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeeCreateWithoutFeeCategoryInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutFeeInput
  Organization: Prisma.OrganizationCreateNestedOneWithoutFeeInput
  payments?: Prisma.FeePaymentCreateNestedManyWithoutFeeInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutFeesInput
}

export type FeeUncheckedCreateWithoutFeeCategoryInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
  payments?: Prisma.FeePaymentUncheckedCreateNestedManyWithoutFeeInput
}

export type FeeCreateOrConnectWithoutFeeCategoryInput = {
  where: Prisma.FeeWhereUniqueInput
  create: Prisma.XOR<Prisma.FeeCreateWithoutFeeCategoryInput, Prisma.FeeUncheckedCreateWithoutFeeCategoryInput>
}

export type FeeCreateManyFeeCategoryInputEnvelope = {
  data: Prisma.FeeCreateManyFeeCategoryInput | Prisma.FeeCreateManyFeeCategoryInput[]
  skipDuplicates?: boolean
}

export type FeeUpsertWithWhereUniqueWithoutFeeCategoryInput = {
  where: Prisma.FeeWhereUniqueInput
  update: Prisma.XOR<Prisma.FeeUpdateWithoutFeeCategoryInput, Prisma.FeeUncheckedUpdateWithoutFeeCategoryInput>
  create: Prisma.XOR<Prisma.FeeCreateWithoutFeeCategoryInput, Prisma.FeeUncheckedCreateWithoutFeeCategoryInput>
}

export type FeeUpdateWithWhereUniqueWithoutFeeCategoryInput = {
  where: Prisma.FeeWhereUniqueInput
  data: Prisma.XOR<Prisma.FeeUpdateWithoutFeeCategoryInput, Prisma.FeeUncheckedUpdateWithoutFeeCategoryInput>
}

export type FeeUpdateManyWithWhereWithoutFeeCategoryInput = {
  where: Prisma.FeeScalarWhereInput
  data: Prisma.XOR<Prisma.FeeUpdateManyMutationInput, Prisma.FeeUncheckedUpdateManyWithoutFeeCategoryInput>
}

export type FeeCreateManyAcademicYearInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeeUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutFeeNestedInput
  feeCategory?: Prisma.FeeCategoryUpdateOneRequiredWithoutFeesNestedInput
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeNestedInput
  payments?: Prisma.FeePaymentUpdateManyWithoutFeeNestedInput
}

export type FeeUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payments?: Prisma.FeePaymentUncheckedUpdateManyWithoutFeeNestedInput
}

export type FeeUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeeCreateManyOrganizationInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  feeCategoryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
}

export type FeeUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutFeeNestedInput
  feeCategory?: Prisma.FeeCategoryUpdateOneRequiredWithoutFeesNestedInput
  payments?: Prisma.FeePaymentUpdateManyWithoutFeeNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutFeesNestedInput
}

export type FeeUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.FeePaymentUncheckedUpdateManyWithoutFeeNestedInput
}

export type FeeUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeeCreateManyStudentInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  feeCategoryId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
}

export type FeeUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feeCategory?: Prisma.FeeCategoryUpdateOneRequiredWithoutFeesNestedInput
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeNestedInput
  payments?: Prisma.FeePaymentUpdateManyWithoutFeeNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutFeesNestedInput
}

export type FeeUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.FeePaymentUncheckedUpdateManyWithoutFeeNestedInput
}

export type FeeUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  feeCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeeCreateManyFeeCategoryInput = {
  id?: string
  totalFee: number
  paidAmount?: number
  pendingAmount?: number | null
  dueDate: Date | string
  status?: $Enums.FeeStatus
  studentId: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
}

export type FeeUpdateWithoutFeeCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutFeeNestedInput
  Organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeeNestedInput
  payments?: Prisma.FeePaymentUpdateManyWithoutFeeNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutFeesNestedInput
}

export type FeeUncheckedUpdateWithoutFeeCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.FeePaymentUncheckedUpdateManyWithoutFeeNestedInput
}

export type FeeUncheckedUpdateManyWithoutFeeCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalFee?: Prisma.FloatFieldUpdateOperationsInput | number
  paidAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  pendingAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumFeeStatusFieldUpdateOperationsInput | $Enums.FeeStatus
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type FeeCountOutputType
 */

export type FeeCountOutputType = {
  payments: number
}

export type FeeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payments?: boolean | FeeCountOutputTypeCountPaymentsArgs
}

/**
 * FeeCountOutputType without action
 */
export type FeeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeeCountOutputType
   */
  select?: Prisma.FeeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FeeCountOutputType without action
 */
export type FeeCountOutputTypeCountPaymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeePaymentWhereInput
}


export type FeeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalFee?: boolean
  paidAmount?: boolean
  pendingAmount?: boolean
  dueDate?: boolean
  status?: boolean
  studentId?: boolean
  feeCategoryId?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  feeCategory?: boolean | Prisma.FeeCategoryDefaultArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  payments?: boolean | Prisma.Fee$paymentsArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.FeeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fee"]>

export type FeeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalFee?: boolean
  paidAmount?: boolean
  pendingAmount?: boolean
  dueDate?: boolean
  status?: boolean
  studentId?: boolean
  feeCategoryId?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  feeCategory?: boolean | Prisma.FeeCategoryDefaultArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fee"]>

export type FeeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalFee?: boolean
  paidAmount?: boolean
  pendingAmount?: boolean
  dueDate?: boolean
  status?: boolean
  studentId?: boolean
  feeCategoryId?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  feeCategory?: boolean | Prisma.FeeCategoryDefaultArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fee"]>

export type FeeSelectScalar = {
  id?: boolean
  totalFee?: boolean
  paidAmount?: boolean
  pendingAmount?: boolean
  dueDate?: boolean
  status?: boolean
  studentId?: boolean
  feeCategoryId?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
}

export type FeeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "totalFee" | "paidAmount" | "pendingAmount" | "dueDate" | "status" | "studentId" | "feeCategoryId" | "organizationId" | "createdAt" | "updatedAt" | "academicYearId", ExtArgs["result"]["fee"]>
export type FeeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  feeCategory?: boolean | Prisma.FeeCategoryDefaultArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  payments?: boolean | Prisma.Fee$paymentsArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.FeeCountOutputTypeDefaultArgs<ExtArgs>
}
export type FeeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  feeCategory?: boolean | Prisma.FeeCategoryDefaultArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}
export type FeeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  feeCategory?: boolean | Prisma.FeeCategoryDefaultArgs<ExtArgs>
  Organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}

export type $FeePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Fee"
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>
    feeCategory: Prisma.$FeeCategoryPayload<ExtArgs>
    Organization: Prisma.$OrganizationPayload<ExtArgs>
    payments: Prisma.$FeePaymentPayload<ExtArgs>[]
    academicYear: Prisma.$AcademicYearPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    totalFee: number
    paidAmount: number
    pendingAmount: number | null
    dueDate: Date
    status: $Enums.FeeStatus
    studentId: string
    feeCategoryId: string
    organizationId: string
    createdAt: Date
    updatedAt: Date
    academicYearId: string
  }, ExtArgs["result"]["fee"]>
  composites: {}
}

export type FeeGetPayload<S extends boolean | null | undefined | FeeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeePayload, S>

export type FeeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeeCountAggregateInputType | true
  }

export interface FeeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fee'], meta: { name: 'Fee' } }
  /**
   * Find zero or one Fee that matches the filter.
   * @param {FeeFindUniqueArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeeFindUniqueArgs>(args: Prisma.SelectSubset<T, FeeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Fee that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeeFindUniqueOrThrowArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fee that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeFindFirstArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeeFindFirstArgs>(args?: Prisma.SelectSubset<T, FeeFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fee that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeFindFirstOrThrowArgs} args - Arguments to find a Fee
   * @example
   * // Get one Fee
   * const fee = await prisma.fee.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Fees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Fees
   * const fees = await prisma.fee.findMany()
   * 
   * // Get first 10 Fees
   * const fees = await prisma.fee.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const feeWithIdOnly = await prisma.fee.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeeFindManyArgs>(args?: Prisma.SelectSubset<T, FeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Fee.
   * @param {FeeCreateArgs} args - Arguments to create a Fee.
   * @example
   * // Create one Fee
   * const Fee = await prisma.fee.create({
   *   data: {
   *     // ... data to create a Fee
   *   }
   * })
   * 
   */
  create<T extends FeeCreateArgs>(args: Prisma.SelectSubset<T, FeeCreateArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Fees.
   * @param {FeeCreateManyArgs} args - Arguments to create many Fees.
   * @example
   * // Create many Fees
   * const fee = await prisma.fee.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeeCreateManyArgs>(args?: Prisma.SelectSubset<T, FeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Fees and returns the data saved in the database.
   * @param {FeeCreateManyAndReturnArgs} args - Arguments to create many Fees.
   * @example
   * // Create many Fees
   * const fee = await prisma.fee.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Fees and only return the `id`
   * const feeWithIdOnly = await prisma.fee.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Fee.
   * @param {FeeDeleteArgs} args - Arguments to delete one Fee.
   * @example
   * // Delete one Fee
   * const Fee = await prisma.fee.delete({
   *   where: {
   *     // ... filter to delete one Fee
   *   }
   * })
   * 
   */
  delete<T extends FeeDeleteArgs>(args: Prisma.SelectSubset<T, FeeDeleteArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Fee.
   * @param {FeeUpdateArgs} args - Arguments to update one Fee.
   * @example
   * // Update one Fee
   * const fee = await prisma.fee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeeUpdateArgs>(args: Prisma.SelectSubset<T, FeeUpdateArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Fees.
   * @param {FeeDeleteManyArgs} args - Arguments to filter Fees to delete.
   * @example
   * // Delete a few Fees
   * const { count } = await prisma.fee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeeDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Fees
   * const fee = await prisma.fee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeeUpdateManyArgs>(args: Prisma.SelectSubset<T, FeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fees and returns the data updated in the database.
   * @param {FeeUpdateManyAndReturnArgs} args - Arguments to update many Fees.
   * @example
   * // Update many Fees
   * const fee = await prisma.fee.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Fees and only return the `id`
   * const feeWithIdOnly = await prisma.fee.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Fee.
   * @param {FeeUpsertArgs} args - Arguments to update or create a Fee.
   * @example
   * // Update or create a Fee
   * const fee = await prisma.fee.upsert({
   *   create: {
   *     // ... data to create a Fee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fee we want to update
   *   }
   * })
   */
  upsert<T extends FeeUpsertArgs>(args: Prisma.SelectSubset<T, FeeUpsertArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Fees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeCountArgs} args - Arguments to filter Fees to count.
   * @example
   * // Count the number of Fees
   * const count = await prisma.fee.count({
   *   where: {
   *     // ... the filter for the Fees we want to count
   *   }
   * })
  **/
  count<T extends FeeCountArgs>(
    args?: Prisma.Subset<T, FeeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Fee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeeAggregateArgs>(args: Prisma.Subset<T, FeeAggregateArgs>): Prisma.PrismaPromise<GetFeeAggregateType<T>>

  /**
   * Group by Fee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeeGroupByArgs['orderBy'] }
      : { orderBy?: FeeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Fee model
 */
readonly fields: FeeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Fee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  feeCategory<T extends Prisma.FeeCategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FeeCategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__FeeCategoryClient<runtime.Types.Result.GetResult<Prisma.$FeeCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  payments<T extends Prisma.Fee$paymentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Fee$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  academicYear<T extends Prisma.AcademicYearDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYearDefaultArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Fee model
 */
export interface FeeFieldRefs {
  readonly id: Prisma.FieldRef<"Fee", 'String'>
  readonly totalFee: Prisma.FieldRef<"Fee", 'Float'>
  readonly paidAmount: Prisma.FieldRef<"Fee", 'Float'>
  readonly pendingAmount: Prisma.FieldRef<"Fee", 'Float'>
  readonly dueDate: Prisma.FieldRef<"Fee", 'DateTime'>
  readonly status: Prisma.FieldRef<"Fee", 'FeeStatus'>
  readonly studentId: Prisma.FieldRef<"Fee", 'String'>
  readonly feeCategoryId: Prisma.FieldRef<"Fee", 'String'>
  readonly organizationId: Prisma.FieldRef<"Fee", 'String'>
  readonly createdAt: Prisma.FieldRef<"Fee", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Fee", 'DateTime'>
  readonly academicYearId: Prisma.FieldRef<"Fee", 'String'>
}
    

// Custom InputTypes
/**
 * Fee findUnique
 */
export type FeeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * Filter, which Fee to fetch.
   */
  where: Prisma.FeeWhereUniqueInput
}

/**
 * Fee findUniqueOrThrow
 */
export type FeeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * Filter, which Fee to fetch.
   */
  where: Prisma.FeeWhereUniqueInput
}

/**
 * Fee findFirst
 */
export type FeeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * Filter, which Fee to fetch.
   */
  where?: Prisma.FeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fees to fetch.
   */
  orderBy?: Prisma.FeeOrderByWithRelationInput | Prisma.FeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Fees.
   */
  cursor?: Prisma.FeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Fees.
   */
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[]
}

/**
 * Fee findFirstOrThrow
 */
export type FeeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * Filter, which Fee to fetch.
   */
  where?: Prisma.FeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fees to fetch.
   */
  orderBy?: Prisma.FeeOrderByWithRelationInput | Prisma.FeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Fees.
   */
  cursor?: Prisma.FeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Fees.
   */
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[]
}

/**
 * Fee findMany
 */
export type FeeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * Filter, which Fees to fetch.
   */
  where?: Prisma.FeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fees to fetch.
   */
  orderBy?: Prisma.FeeOrderByWithRelationInput | Prisma.FeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Fees.
   */
  cursor?: Prisma.FeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fees.
   */
  skip?: number
  distinct?: Prisma.FeeScalarFieldEnum | Prisma.FeeScalarFieldEnum[]
}

/**
 * Fee create
 */
export type FeeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * The data needed to create a Fee.
   */
  data: Prisma.XOR<Prisma.FeeCreateInput, Prisma.FeeUncheckedCreateInput>
}

/**
 * Fee createMany
 */
export type FeeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Fees.
   */
  data: Prisma.FeeCreateManyInput | Prisma.FeeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Fee createManyAndReturn
 */
export type FeeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * The data used to create many Fees.
   */
  data: Prisma.FeeCreateManyInput | Prisma.FeeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Fee update
 */
export type FeeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * The data needed to update a Fee.
   */
  data: Prisma.XOR<Prisma.FeeUpdateInput, Prisma.FeeUncheckedUpdateInput>
  /**
   * Choose, which Fee to update.
   */
  where: Prisma.FeeWhereUniqueInput
}

/**
 * Fee updateMany
 */
export type FeeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Fees.
   */
  data: Prisma.XOR<Prisma.FeeUpdateManyMutationInput, Prisma.FeeUncheckedUpdateManyInput>
  /**
   * Filter which Fees to update
   */
  where?: Prisma.FeeWhereInput
  /**
   * Limit how many Fees to update.
   */
  limit?: number
}

/**
 * Fee updateManyAndReturn
 */
export type FeeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * The data used to update Fees.
   */
  data: Prisma.XOR<Prisma.FeeUpdateManyMutationInput, Prisma.FeeUncheckedUpdateManyInput>
  /**
   * Filter which Fees to update
   */
  where?: Prisma.FeeWhereInput
  /**
   * Limit how many Fees to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Fee upsert
 */
export type FeeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * The filter to search for the Fee to update in case it exists.
   */
  where: Prisma.FeeWhereUniqueInput
  /**
   * In case the Fee found by the `where` argument doesn't exist, create a new Fee with this data.
   */
  create: Prisma.XOR<Prisma.FeeCreateInput, Prisma.FeeUncheckedCreateInput>
  /**
   * In case the Fee was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeeUpdateInput, Prisma.FeeUncheckedUpdateInput>
}

/**
 * Fee delete
 */
export type FeeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
  /**
   * Filter which Fee to delete.
   */
  where: Prisma.FeeWhereUniqueInput
}

/**
 * Fee deleteMany
 */
export type FeeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Fees to delete
   */
  where?: Prisma.FeeWhereInput
  /**
   * Limit how many Fees to delete.
   */
  limit?: number
}

/**
 * Fee.payments
 */
export type Fee$paymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  where?: Prisma.FeePaymentWhereInput
  orderBy?: Prisma.FeePaymentOrderByWithRelationInput | Prisma.FeePaymentOrderByWithRelationInput[]
  cursor?: Prisma.FeePaymentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FeePaymentScalarFieldEnum | Prisma.FeePaymentScalarFieldEnum[]
}

/**
 * Fee without action
 */
export type FeeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fee
   */
  select?: Prisma.FeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fee
   */
  omit?: Prisma.FeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeeInclude<ExtArgs> | null
}
