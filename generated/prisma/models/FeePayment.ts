
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FeePayment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FeePayment
 * 
 */
export type FeePaymentModel = runtime.Types.Result.DefaultSelection<Prisma.$FeePaymentPayload>

export type AggregateFeePayment = {
  _count: FeePaymentCountAggregateOutputType | null
  _avg: FeePaymentAvgAggregateOutputType | null
  _sum: FeePaymentSumAggregateOutputType | null
  _min: FeePaymentMinAggregateOutputType | null
  _max: FeePaymentMaxAggregateOutputType | null
}

export type FeePaymentAvgAggregateOutputType = {
  amount: number | null
  platformFee: number | null
}

export type FeePaymentSumAggregateOutputType = {
  amount: number | null
  platformFee: number | null
}

export type FeePaymentMinAggregateOutputType = {
  id: string | null
  feeId: string | null
  amount: number | null
  status: $Enums.PaymentStatus | null
  paymentMethod: $Enums.PaymentMethod | null
  paymentDate: Date | null
  receiptNumber: string | null
  note: string | null
  transactionId: string | null
  payerId: string | null
  platformFee: number | null
  recordedBy: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeePaymentMaxAggregateOutputType = {
  id: string | null
  feeId: string | null
  amount: number | null
  status: $Enums.PaymentStatus | null
  paymentMethod: $Enums.PaymentMethod | null
  paymentDate: Date | null
  receiptNumber: string | null
  note: string | null
  transactionId: string | null
  payerId: string | null
  platformFee: number | null
  recordedBy: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeePaymentCountAggregateOutputType = {
  id: number
  feeId: number
  amount: number
  status: number
  paymentMethod: number
  paymentDate: number
  receiptNumber: number
  note: number
  transactionId: number
  payerId: number
  platformFee: number
  recordedBy: number
  organizationId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FeePaymentAvgAggregateInputType = {
  amount?: true
  platformFee?: true
}

export type FeePaymentSumAggregateInputType = {
  amount?: true
  platformFee?: true
}

export type FeePaymentMinAggregateInputType = {
  id?: true
  feeId?: true
  amount?: true
  status?: true
  paymentMethod?: true
  paymentDate?: true
  receiptNumber?: true
  note?: true
  transactionId?: true
  payerId?: true
  platformFee?: true
  recordedBy?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type FeePaymentMaxAggregateInputType = {
  id?: true
  feeId?: true
  amount?: true
  status?: true
  paymentMethod?: true
  paymentDate?: true
  receiptNumber?: true
  note?: true
  transactionId?: true
  payerId?: true
  platformFee?: true
  recordedBy?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type FeePaymentCountAggregateInputType = {
  id?: true
  feeId?: true
  amount?: true
  status?: true
  paymentMethod?: true
  paymentDate?: true
  receiptNumber?: true
  note?: true
  transactionId?: true
  payerId?: true
  platformFee?: true
  recordedBy?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FeePaymentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeePayment to aggregate.
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeePayments to fetch.
   */
  orderBy?: Prisma.FeePaymentOrderByWithRelationInput | Prisma.FeePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeePayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FeePayments
  **/
  _count?: true | FeePaymentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FeePaymentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FeePaymentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeePaymentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeePaymentMaxAggregateInputType
}

export type GetFeePaymentAggregateType<T extends FeePaymentAggregateArgs> = {
      [P in keyof T & keyof AggregateFeePayment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeePayment[P]>
    : Prisma.GetScalarType<T[P], AggregateFeePayment[P]>
}




export type FeePaymentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeePaymentWhereInput
  orderBy?: Prisma.FeePaymentOrderByWithAggregationInput | Prisma.FeePaymentOrderByWithAggregationInput[]
  by: Prisma.FeePaymentScalarFieldEnum[] | Prisma.FeePaymentScalarFieldEnum
  having?: Prisma.FeePaymentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeePaymentCountAggregateInputType | true
  _avg?: FeePaymentAvgAggregateInputType
  _sum?: FeePaymentSumAggregateInputType
  _min?: FeePaymentMinAggregateInputType
  _max?: FeePaymentMaxAggregateInputType
}

export type FeePaymentGroupByOutputType = {
  id: string
  feeId: string
  amount: number
  status: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate: Date
  receiptNumber: string
  note: string | null
  transactionId: string | null
  payerId: string
  platformFee: number | null
  recordedBy: string | null
  organizationId: string
  createdAt: Date
  updatedAt: Date
  _count: FeePaymentCountAggregateOutputType | null
  _avg: FeePaymentAvgAggregateOutputType | null
  _sum: FeePaymentSumAggregateOutputType | null
  _min: FeePaymentMinAggregateOutputType | null
  _max: FeePaymentMaxAggregateOutputType | null
}

type GetFeePaymentGroupByPayload<T extends FeePaymentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeePaymentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeePaymentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeePaymentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeePaymentGroupByOutputType[P]>
      }
    >
  > 



export type FeePaymentWhereInput = {
  AND?: Prisma.FeePaymentWhereInput | Prisma.FeePaymentWhereInput[]
  OR?: Prisma.FeePaymentWhereInput[]
  NOT?: Prisma.FeePaymentWhereInput | Prisma.FeePaymentWhereInput[]
  id?: Prisma.StringFilter<"FeePayment"> | string
  feeId?: Prisma.StringFilter<"FeePayment"> | string
  amount?: Prisma.FloatFilter<"FeePayment"> | number
  status?: Prisma.EnumPaymentStatusFilter<"FeePayment"> | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFilter<"FeePayment"> | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  receiptNumber?: Prisma.StringFilter<"FeePayment"> | string
  note?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  transactionId?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  payerId?: Prisma.StringFilter<"FeePayment"> | string
  platformFee?: Prisma.FloatNullableFilter<"FeePayment"> | number | null
  recordedBy?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  organizationId?: Prisma.StringFilter<"FeePayment"> | string
  createdAt?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  fee?: Prisma.XOR<Prisma.FeeScalarRelationFilter, Prisma.FeeWhereInput>
  payer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}

export type FeePaymentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  feeId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  receiptNumber?: Prisma.SortOrder
  note?: Prisma.SortOrderInput | Prisma.SortOrder
  transactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  payerId?: Prisma.SortOrder
  platformFee?: Prisma.SortOrderInput | Prisma.SortOrder
  recordedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  fee?: Prisma.FeeOrderByWithRelationInput
  payer?: Prisma.UserOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  _relevance?: Prisma.FeePaymentOrderByRelevanceInput
}

export type FeePaymentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  receiptNumber?: string
  AND?: Prisma.FeePaymentWhereInput | Prisma.FeePaymentWhereInput[]
  OR?: Prisma.FeePaymentWhereInput[]
  NOT?: Prisma.FeePaymentWhereInput | Prisma.FeePaymentWhereInput[]
  feeId?: Prisma.StringFilter<"FeePayment"> | string
  amount?: Prisma.FloatFilter<"FeePayment"> | number
  status?: Prisma.EnumPaymentStatusFilter<"FeePayment"> | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFilter<"FeePayment"> | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  note?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  transactionId?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  payerId?: Prisma.StringFilter<"FeePayment"> | string
  platformFee?: Prisma.FloatNullableFilter<"FeePayment"> | number | null
  recordedBy?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  organizationId?: Prisma.StringFilter<"FeePayment"> | string
  createdAt?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  fee?: Prisma.XOR<Prisma.FeeScalarRelationFilter, Prisma.FeeWhereInput>
  payer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}, "id" | "receiptNumber">

export type FeePaymentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  feeId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  receiptNumber?: Prisma.SortOrder
  note?: Prisma.SortOrderInput | Prisma.SortOrder
  transactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  payerId?: Prisma.SortOrder
  platformFee?: Prisma.SortOrderInput | Prisma.SortOrder
  recordedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FeePaymentCountOrderByAggregateInput
  _avg?: Prisma.FeePaymentAvgOrderByAggregateInput
  _max?: Prisma.FeePaymentMaxOrderByAggregateInput
  _min?: Prisma.FeePaymentMinOrderByAggregateInput
  _sum?: Prisma.FeePaymentSumOrderByAggregateInput
}

export type FeePaymentScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeePaymentScalarWhereWithAggregatesInput | Prisma.FeePaymentScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeePaymentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeePaymentScalarWhereWithAggregatesInput | Prisma.FeePaymentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FeePayment"> | string
  feeId?: Prisma.StringWithAggregatesFilter<"FeePayment"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"FeePayment"> | number
  status?: Prisma.EnumPaymentStatusWithAggregatesFilter<"FeePayment"> | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodWithAggregatesFilter<"FeePayment"> | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeWithAggregatesFilter<"FeePayment"> | Date | string
  receiptNumber?: Prisma.StringWithAggregatesFilter<"FeePayment"> | string
  note?: Prisma.StringNullableWithAggregatesFilter<"FeePayment"> | string | null
  transactionId?: Prisma.StringNullableWithAggregatesFilter<"FeePayment"> | string | null
  payerId?: Prisma.StringWithAggregatesFilter<"FeePayment"> | string
  platformFee?: Prisma.FloatNullableWithAggregatesFilter<"FeePayment"> | number | null
  recordedBy?: Prisma.StringNullableWithAggregatesFilter<"FeePayment"> | string | null
  organizationId?: Prisma.StringWithAggregatesFilter<"FeePayment"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FeePayment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FeePayment"> | Date | string
}

export type FeePaymentCreateInput = {
  id?: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  platformFee?: number | null
  recordedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fee: Prisma.FeeCreateNestedOneWithoutPaymentsInput
  payer: Prisma.UserCreateNestedOneWithoutFeePaymentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutFeePaymentInput
}

export type FeePaymentUncheckedCreateInput = {
  id?: string
  feeId: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  payerId: string
  platformFee?: number | null
  recordedBy?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fee?: Prisma.FeeUpdateOneRequiredWithoutPaymentsNestedInput
  payer?: Prisma.UserUpdateOneRequiredWithoutFeePaymentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeePaymentNestedInput
}

export type FeePaymentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feeId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payerId?: Prisma.StringFieldUpdateOperationsInput | string
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentCreateManyInput = {
  id?: string
  feeId: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  payerId: string
  platformFee?: number | null
  recordedBy?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feeId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payerId?: Prisma.StringFieldUpdateOperationsInput | string
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentListRelationFilter = {
  every?: Prisma.FeePaymentWhereInput
  some?: Prisma.FeePaymentWhereInput
  none?: Prisma.FeePaymentWhereInput
}

export type FeePaymentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeePaymentOrderByRelevanceInput = {
  fields: Prisma.FeePaymentOrderByRelevanceFieldEnum | Prisma.FeePaymentOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FeePaymentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  feeId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  receiptNumber?: Prisma.SortOrder
  note?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  payerId?: Prisma.SortOrder
  platformFee?: Prisma.SortOrder
  recordedBy?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeePaymentAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
  platformFee?: Prisma.SortOrder
}

export type FeePaymentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  feeId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  receiptNumber?: Prisma.SortOrder
  note?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  payerId?: Prisma.SortOrder
  platformFee?: Prisma.SortOrder
  recordedBy?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeePaymentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  feeId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  receiptNumber?: Prisma.SortOrder
  note?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  payerId?: Prisma.SortOrder
  platformFee?: Prisma.SortOrder
  recordedBy?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeePaymentSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
  platformFee?: Prisma.SortOrder
}

export type FeePaymentCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutOrganizationInput, Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput> | Prisma.FeePaymentCreateWithoutOrganizationInput[] | Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput | Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.FeePaymentCreateManyOrganizationInputEnvelope
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
}

export type FeePaymentUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutOrganizationInput, Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput> | Prisma.FeePaymentCreateWithoutOrganizationInput[] | Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput | Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.FeePaymentCreateManyOrganizationInputEnvelope
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
}

export type FeePaymentUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutOrganizationInput, Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput> | Prisma.FeePaymentCreateWithoutOrganizationInput[] | Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput | Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.FeePaymentUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.FeePaymentUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.FeePaymentCreateManyOrganizationInputEnvelope
  set?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  disconnect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  delete?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  update?: Prisma.FeePaymentUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.FeePaymentUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.FeePaymentUpdateManyWithWhereWithoutOrganizationInput | Prisma.FeePaymentUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
}

export type FeePaymentUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutOrganizationInput, Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput> | Prisma.FeePaymentCreateWithoutOrganizationInput[] | Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput | Prisma.FeePaymentCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.FeePaymentUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.FeePaymentUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.FeePaymentCreateManyOrganizationInputEnvelope
  set?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  disconnect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  delete?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  update?: Prisma.FeePaymentUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.FeePaymentUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.FeePaymentUpdateManyWithWhereWithoutOrganizationInput | Prisma.FeePaymentUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
}

export type FeePaymentCreateNestedManyWithoutPayerInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutPayerInput, Prisma.FeePaymentUncheckedCreateWithoutPayerInput> | Prisma.FeePaymentCreateWithoutPayerInput[] | Prisma.FeePaymentUncheckedCreateWithoutPayerInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutPayerInput | Prisma.FeePaymentCreateOrConnectWithoutPayerInput[]
  createMany?: Prisma.FeePaymentCreateManyPayerInputEnvelope
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
}

export type FeePaymentUncheckedCreateNestedManyWithoutPayerInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutPayerInput, Prisma.FeePaymentUncheckedCreateWithoutPayerInput> | Prisma.FeePaymentCreateWithoutPayerInput[] | Prisma.FeePaymentUncheckedCreateWithoutPayerInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutPayerInput | Prisma.FeePaymentCreateOrConnectWithoutPayerInput[]
  createMany?: Prisma.FeePaymentCreateManyPayerInputEnvelope
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
}

export type FeePaymentUpdateManyWithoutPayerNestedInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutPayerInput, Prisma.FeePaymentUncheckedCreateWithoutPayerInput> | Prisma.FeePaymentCreateWithoutPayerInput[] | Prisma.FeePaymentUncheckedCreateWithoutPayerInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutPayerInput | Prisma.FeePaymentCreateOrConnectWithoutPayerInput[]
  upsert?: Prisma.FeePaymentUpsertWithWhereUniqueWithoutPayerInput | Prisma.FeePaymentUpsertWithWhereUniqueWithoutPayerInput[]
  createMany?: Prisma.FeePaymentCreateManyPayerInputEnvelope
  set?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  disconnect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  delete?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  update?: Prisma.FeePaymentUpdateWithWhereUniqueWithoutPayerInput | Prisma.FeePaymentUpdateWithWhereUniqueWithoutPayerInput[]
  updateMany?: Prisma.FeePaymentUpdateManyWithWhereWithoutPayerInput | Prisma.FeePaymentUpdateManyWithWhereWithoutPayerInput[]
  deleteMany?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
}

export type FeePaymentUncheckedUpdateManyWithoutPayerNestedInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutPayerInput, Prisma.FeePaymentUncheckedCreateWithoutPayerInput> | Prisma.FeePaymentCreateWithoutPayerInput[] | Prisma.FeePaymentUncheckedCreateWithoutPayerInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutPayerInput | Prisma.FeePaymentCreateOrConnectWithoutPayerInput[]
  upsert?: Prisma.FeePaymentUpsertWithWhereUniqueWithoutPayerInput | Prisma.FeePaymentUpsertWithWhereUniqueWithoutPayerInput[]
  createMany?: Prisma.FeePaymentCreateManyPayerInputEnvelope
  set?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  disconnect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  delete?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  update?: Prisma.FeePaymentUpdateWithWhereUniqueWithoutPayerInput | Prisma.FeePaymentUpdateWithWhereUniqueWithoutPayerInput[]
  updateMany?: Prisma.FeePaymentUpdateManyWithWhereWithoutPayerInput | Prisma.FeePaymentUpdateManyWithWhereWithoutPayerInput[]
  deleteMany?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
}

export type FeePaymentCreateNestedManyWithoutFeeInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutFeeInput, Prisma.FeePaymentUncheckedCreateWithoutFeeInput> | Prisma.FeePaymentCreateWithoutFeeInput[] | Prisma.FeePaymentUncheckedCreateWithoutFeeInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutFeeInput | Prisma.FeePaymentCreateOrConnectWithoutFeeInput[]
  createMany?: Prisma.FeePaymentCreateManyFeeInputEnvelope
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
}

export type FeePaymentUncheckedCreateNestedManyWithoutFeeInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutFeeInput, Prisma.FeePaymentUncheckedCreateWithoutFeeInput> | Prisma.FeePaymentCreateWithoutFeeInput[] | Prisma.FeePaymentUncheckedCreateWithoutFeeInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutFeeInput | Prisma.FeePaymentCreateOrConnectWithoutFeeInput[]
  createMany?: Prisma.FeePaymentCreateManyFeeInputEnvelope
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
}

export type FeePaymentUpdateManyWithoutFeeNestedInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutFeeInput, Prisma.FeePaymentUncheckedCreateWithoutFeeInput> | Prisma.FeePaymentCreateWithoutFeeInput[] | Prisma.FeePaymentUncheckedCreateWithoutFeeInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutFeeInput | Prisma.FeePaymentCreateOrConnectWithoutFeeInput[]
  upsert?: Prisma.FeePaymentUpsertWithWhereUniqueWithoutFeeInput | Prisma.FeePaymentUpsertWithWhereUniqueWithoutFeeInput[]
  createMany?: Prisma.FeePaymentCreateManyFeeInputEnvelope
  set?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  disconnect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  delete?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  update?: Prisma.FeePaymentUpdateWithWhereUniqueWithoutFeeInput | Prisma.FeePaymentUpdateWithWhereUniqueWithoutFeeInput[]
  updateMany?: Prisma.FeePaymentUpdateManyWithWhereWithoutFeeInput | Prisma.FeePaymentUpdateManyWithWhereWithoutFeeInput[]
  deleteMany?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
}

export type FeePaymentUncheckedUpdateManyWithoutFeeNestedInput = {
  create?: Prisma.XOR<Prisma.FeePaymentCreateWithoutFeeInput, Prisma.FeePaymentUncheckedCreateWithoutFeeInput> | Prisma.FeePaymentCreateWithoutFeeInput[] | Prisma.FeePaymentUncheckedCreateWithoutFeeInput[]
  connectOrCreate?: Prisma.FeePaymentCreateOrConnectWithoutFeeInput | Prisma.FeePaymentCreateOrConnectWithoutFeeInput[]
  upsert?: Prisma.FeePaymentUpsertWithWhereUniqueWithoutFeeInput | Prisma.FeePaymentUpsertWithWhereUniqueWithoutFeeInput[]
  createMany?: Prisma.FeePaymentCreateManyFeeInputEnvelope
  set?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  disconnect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  delete?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  connect?: Prisma.FeePaymentWhereUniqueInput | Prisma.FeePaymentWhereUniqueInput[]
  update?: Prisma.FeePaymentUpdateWithWhereUniqueWithoutFeeInput | Prisma.FeePaymentUpdateWithWhereUniqueWithoutFeeInput[]
  updateMany?: Prisma.FeePaymentUpdateManyWithWhereWithoutFeeInput | Prisma.FeePaymentUpdateManyWithWhereWithoutFeeInput[]
  deleteMany?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
}

export type EnumPaymentStatusFieldUpdateOperationsInput = {
  set?: $Enums.PaymentStatus
}

export type EnumPaymentMethodFieldUpdateOperationsInput = {
  set?: $Enums.PaymentMethod
}

export type FeePaymentCreateWithoutOrganizationInput = {
  id?: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  platformFee?: number | null
  recordedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fee: Prisma.FeeCreateNestedOneWithoutPaymentsInput
  payer: Prisma.UserCreateNestedOneWithoutFeePaymentInput
}

export type FeePaymentUncheckedCreateWithoutOrganizationInput = {
  id?: string
  feeId: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  payerId: string
  platformFee?: number | null
  recordedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.FeePaymentCreateWithoutOrganizationInput, Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput>
}

export type FeePaymentCreateManyOrganizationInputEnvelope = {
  data: Prisma.FeePaymentCreateManyOrganizationInput | Prisma.FeePaymentCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type FeePaymentUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.FeePaymentUpdateWithoutOrganizationInput, Prisma.FeePaymentUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.FeePaymentCreateWithoutOrganizationInput, Prisma.FeePaymentUncheckedCreateWithoutOrganizationInput>
}

export type FeePaymentUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.FeePaymentUpdateWithoutOrganizationInput, Prisma.FeePaymentUncheckedUpdateWithoutOrganizationInput>
}

export type FeePaymentUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.FeePaymentScalarWhereInput
  data: Prisma.XOR<Prisma.FeePaymentUpdateManyMutationInput, Prisma.FeePaymentUncheckedUpdateManyWithoutOrganizationInput>
}

export type FeePaymentScalarWhereInput = {
  AND?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
  OR?: Prisma.FeePaymentScalarWhereInput[]
  NOT?: Prisma.FeePaymentScalarWhereInput | Prisma.FeePaymentScalarWhereInput[]
  id?: Prisma.StringFilter<"FeePayment"> | string
  feeId?: Prisma.StringFilter<"FeePayment"> | string
  amount?: Prisma.FloatFilter<"FeePayment"> | number
  status?: Prisma.EnumPaymentStatusFilter<"FeePayment"> | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFilter<"FeePayment"> | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  receiptNumber?: Prisma.StringFilter<"FeePayment"> | string
  note?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  transactionId?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  payerId?: Prisma.StringFilter<"FeePayment"> | string
  platformFee?: Prisma.FloatNullableFilter<"FeePayment"> | number | null
  recordedBy?: Prisma.StringNullableFilter<"FeePayment"> | string | null
  organizationId?: Prisma.StringFilter<"FeePayment"> | string
  createdAt?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeePayment"> | Date | string
}

export type FeePaymentCreateWithoutPayerInput = {
  id?: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  platformFee?: number | null
  recordedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fee: Prisma.FeeCreateNestedOneWithoutPaymentsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutFeePaymentInput
}

export type FeePaymentUncheckedCreateWithoutPayerInput = {
  id?: string
  feeId: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  platformFee?: number | null
  recordedBy?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentCreateOrConnectWithoutPayerInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.FeePaymentCreateWithoutPayerInput, Prisma.FeePaymentUncheckedCreateWithoutPayerInput>
}

export type FeePaymentCreateManyPayerInputEnvelope = {
  data: Prisma.FeePaymentCreateManyPayerInput | Prisma.FeePaymentCreateManyPayerInput[]
  skipDuplicates?: boolean
}

export type FeePaymentUpsertWithWhereUniqueWithoutPayerInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.FeePaymentUpdateWithoutPayerInput, Prisma.FeePaymentUncheckedUpdateWithoutPayerInput>
  create: Prisma.XOR<Prisma.FeePaymentCreateWithoutPayerInput, Prisma.FeePaymentUncheckedCreateWithoutPayerInput>
}

export type FeePaymentUpdateWithWhereUniqueWithoutPayerInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.FeePaymentUpdateWithoutPayerInput, Prisma.FeePaymentUncheckedUpdateWithoutPayerInput>
}

export type FeePaymentUpdateManyWithWhereWithoutPayerInput = {
  where: Prisma.FeePaymentScalarWhereInput
  data: Prisma.XOR<Prisma.FeePaymentUpdateManyMutationInput, Prisma.FeePaymentUncheckedUpdateManyWithoutPayerInput>
}

export type FeePaymentCreateWithoutFeeInput = {
  id?: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  platformFee?: number | null
  recordedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  payer: Prisma.UserCreateNestedOneWithoutFeePaymentInput
  organization: Prisma.OrganizationCreateNestedOneWithoutFeePaymentInput
}

export type FeePaymentUncheckedCreateWithoutFeeInput = {
  id?: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  payerId: string
  platformFee?: number | null
  recordedBy?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentCreateOrConnectWithoutFeeInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.FeePaymentCreateWithoutFeeInput, Prisma.FeePaymentUncheckedCreateWithoutFeeInput>
}

export type FeePaymentCreateManyFeeInputEnvelope = {
  data: Prisma.FeePaymentCreateManyFeeInput | Prisma.FeePaymentCreateManyFeeInput[]
  skipDuplicates?: boolean
}

export type FeePaymentUpsertWithWhereUniqueWithoutFeeInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.FeePaymentUpdateWithoutFeeInput, Prisma.FeePaymentUncheckedUpdateWithoutFeeInput>
  create: Prisma.XOR<Prisma.FeePaymentCreateWithoutFeeInput, Prisma.FeePaymentUncheckedCreateWithoutFeeInput>
}

export type FeePaymentUpdateWithWhereUniqueWithoutFeeInput = {
  where: Prisma.FeePaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.FeePaymentUpdateWithoutFeeInput, Prisma.FeePaymentUncheckedUpdateWithoutFeeInput>
}

export type FeePaymentUpdateManyWithWhereWithoutFeeInput = {
  where: Prisma.FeePaymentScalarWhereInput
  data: Prisma.XOR<Prisma.FeePaymentUpdateManyMutationInput, Prisma.FeePaymentUncheckedUpdateManyWithoutFeeInput>
}

export type FeePaymentCreateManyOrganizationInput = {
  id?: string
  feeId: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  payerId: string
  platformFee?: number | null
  recordedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fee?: Prisma.FeeUpdateOneRequiredWithoutPaymentsNestedInput
  payer?: Prisma.UserUpdateOneRequiredWithoutFeePaymentNestedInput
}

export type FeePaymentUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feeId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payerId?: Prisma.StringFieldUpdateOperationsInput | string
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feeId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payerId?: Prisma.StringFieldUpdateOperationsInput | string
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentCreateManyPayerInput = {
  id?: string
  feeId: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  platformFee?: number | null
  recordedBy?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentUpdateWithoutPayerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fee?: Prisma.FeeUpdateOneRequiredWithoutPaymentsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeePaymentNestedInput
}

export type FeePaymentUncheckedUpdateWithoutPayerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feeId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentUncheckedUpdateManyWithoutPayerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feeId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentCreateManyFeeInput = {
  id?: string
  amount: number
  status?: $Enums.PaymentStatus
  paymentMethod: $Enums.PaymentMethod
  paymentDate?: Date | string
  receiptNumber: string
  note?: string | null
  transactionId?: string | null
  payerId: string
  platformFee?: number | null
  recordedBy?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeePaymentUpdateWithoutFeeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payer?: Prisma.UserUpdateOneRequiredWithoutFeePaymentNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutFeePaymentNestedInput
}

export type FeePaymentUncheckedUpdateWithoutFeeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payerId?: Prisma.StringFieldUpdateOperationsInput | string
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeePaymentUncheckedUpdateManyWithoutFeeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiptNumber?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payerId?: Prisma.StringFieldUpdateOperationsInput | string
  platformFee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  recordedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FeePaymentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  feeId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  paymentDate?: boolean
  receiptNumber?: boolean
  note?: boolean
  transactionId?: boolean
  payerId?: boolean
  platformFee?: boolean
  recordedBy?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>
  payer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feePayment"]>

export type FeePaymentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  feeId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  paymentDate?: boolean
  receiptNumber?: boolean
  note?: boolean
  transactionId?: boolean
  payerId?: boolean
  platformFee?: boolean
  recordedBy?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>
  payer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feePayment"]>

export type FeePaymentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  feeId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  paymentDate?: boolean
  receiptNumber?: boolean
  note?: boolean
  transactionId?: boolean
  payerId?: boolean
  platformFee?: boolean
  recordedBy?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>
  payer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feePayment"]>

export type FeePaymentSelectScalar = {
  id?: boolean
  feeId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  paymentDate?: boolean
  receiptNumber?: boolean
  note?: boolean
  transactionId?: boolean
  payerId?: boolean
  platformFee?: boolean
  recordedBy?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FeePaymentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "feeId" | "amount" | "status" | "paymentMethod" | "paymentDate" | "receiptNumber" | "note" | "transactionId" | "payerId" | "platformFee" | "recordedBy" | "organizationId" | "createdAt" | "updatedAt", ExtArgs["result"]["feePayment"]>
export type FeePaymentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>
  payer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type FeePaymentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>
  payer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type FeePaymentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fee?: boolean | Prisma.FeeDefaultArgs<ExtArgs>
  payer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $FeePaymentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FeePayment"
  objects: {
    fee: Prisma.$FeePayload<ExtArgs>
    payer: Prisma.$UserPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    feeId: string
    amount: number
    status: $Enums.PaymentStatus
    paymentMethod: $Enums.PaymentMethod
    paymentDate: Date
    receiptNumber: string
    note: string | null
    transactionId: string | null
    payerId: string
    platformFee: number | null
    recordedBy: string | null
    organizationId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["feePayment"]>
  composites: {}
}

export type FeePaymentGetPayload<S extends boolean | null | undefined | FeePaymentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload, S>

export type FeePaymentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeePaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeePaymentCountAggregateInputType | true
  }

export interface FeePaymentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeePayment'], meta: { name: 'FeePayment' } }
  /**
   * Find zero or one FeePayment that matches the filter.
   * @param {FeePaymentFindUniqueArgs} args - Arguments to find a FeePayment
   * @example
   * // Get one FeePayment
   * const feePayment = await prisma.feePayment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeePaymentFindUniqueArgs>(args: Prisma.SelectSubset<T, FeePaymentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FeePayment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeePaymentFindUniqueOrThrowArgs} args - Arguments to find a FeePayment
   * @example
   * // Get one FeePayment
   * const feePayment = await prisma.feePayment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeePaymentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeePaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeePayment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentFindFirstArgs} args - Arguments to find a FeePayment
   * @example
   * // Get one FeePayment
   * const feePayment = await prisma.feePayment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeePaymentFindFirstArgs>(args?: Prisma.SelectSubset<T, FeePaymentFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeePayment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentFindFirstOrThrowArgs} args - Arguments to find a FeePayment
   * @example
   * // Get one FeePayment
   * const feePayment = await prisma.feePayment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeePaymentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeePaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FeePayments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeePayments
   * const feePayments = await prisma.feePayment.findMany()
   * 
   * // Get first 10 FeePayments
   * const feePayments = await prisma.feePayment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const feePaymentWithIdOnly = await prisma.feePayment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeePaymentFindManyArgs>(args?: Prisma.SelectSubset<T, FeePaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FeePayment.
   * @param {FeePaymentCreateArgs} args - Arguments to create a FeePayment.
   * @example
   * // Create one FeePayment
   * const FeePayment = await prisma.feePayment.create({
   *   data: {
   *     // ... data to create a FeePayment
   *   }
   * })
   * 
   */
  create<T extends FeePaymentCreateArgs>(args: Prisma.SelectSubset<T, FeePaymentCreateArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FeePayments.
   * @param {FeePaymentCreateManyArgs} args - Arguments to create many FeePayments.
   * @example
   * // Create many FeePayments
   * const feePayment = await prisma.feePayment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeePaymentCreateManyArgs>(args?: Prisma.SelectSubset<T, FeePaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeePayments and returns the data saved in the database.
   * @param {FeePaymentCreateManyAndReturnArgs} args - Arguments to create many FeePayments.
   * @example
   * // Create many FeePayments
   * const feePayment = await prisma.feePayment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FeePayments and only return the `id`
   * const feePaymentWithIdOnly = await prisma.feePayment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeePaymentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeePaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FeePayment.
   * @param {FeePaymentDeleteArgs} args - Arguments to delete one FeePayment.
   * @example
   * // Delete one FeePayment
   * const FeePayment = await prisma.feePayment.delete({
   *   where: {
   *     // ... filter to delete one FeePayment
   *   }
   * })
   * 
   */
  delete<T extends FeePaymentDeleteArgs>(args: Prisma.SelectSubset<T, FeePaymentDeleteArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FeePayment.
   * @param {FeePaymentUpdateArgs} args - Arguments to update one FeePayment.
   * @example
   * // Update one FeePayment
   * const feePayment = await prisma.feePayment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeePaymentUpdateArgs>(args: Prisma.SelectSubset<T, FeePaymentUpdateArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FeePayments.
   * @param {FeePaymentDeleteManyArgs} args - Arguments to filter FeePayments to delete.
   * @example
   * // Delete a few FeePayments
   * const { count } = await prisma.feePayment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeePaymentDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeePaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeePayments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeePayments
   * const feePayment = await prisma.feePayment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeePaymentUpdateManyArgs>(args: Prisma.SelectSubset<T, FeePaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeePayments and returns the data updated in the database.
   * @param {FeePaymentUpdateManyAndReturnArgs} args - Arguments to update many FeePayments.
   * @example
   * // Update many FeePayments
   * const feePayment = await prisma.feePayment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FeePayments and only return the `id`
   * const feePaymentWithIdOnly = await prisma.feePayment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeePaymentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeePaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FeePayment.
   * @param {FeePaymentUpsertArgs} args - Arguments to update or create a FeePayment.
   * @example
   * // Update or create a FeePayment
   * const feePayment = await prisma.feePayment.upsert({
   *   create: {
   *     // ... data to create a FeePayment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeePayment we want to update
   *   }
   * })
   */
  upsert<T extends FeePaymentUpsertArgs>(args: Prisma.SelectSubset<T, FeePaymentUpsertArgs<ExtArgs>>): Prisma.Prisma__FeePaymentClient<runtime.Types.Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FeePayments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentCountArgs} args - Arguments to filter FeePayments to count.
   * @example
   * // Count the number of FeePayments
   * const count = await prisma.feePayment.count({
   *   where: {
   *     // ... the filter for the FeePayments we want to count
   *   }
   * })
  **/
  count<T extends FeePaymentCountArgs>(
    args?: Prisma.Subset<T, FeePaymentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeePaymentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeePayment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeePaymentAggregateArgs>(args: Prisma.Subset<T, FeePaymentAggregateArgs>): Prisma.PrismaPromise<GetFeePaymentAggregateType<T>>

  /**
   * Group by FeePayment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeePaymentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeePaymentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeePaymentGroupByArgs['orderBy'] }
      : { orderBy?: FeePaymentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeePaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeePaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FeePayment model
 */
readonly fields: FeePaymentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FeePayment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeePaymentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  fee<T extends Prisma.FeeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FeeDefaultArgs<ExtArgs>>): Prisma.Prisma__FeeClient<runtime.Types.Result.GetResult<Prisma.$FeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  payer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FeePayment model
 */
export interface FeePaymentFieldRefs {
  readonly id: Prisma.FieldRef<"FeePayment", 'String'>
  readonly feeId: Prisma.FieldRef<"FeePayment", 'String'>
  readonly amount: Prisma.FieldRef<"FeePayment", 'Float'>
  readonly status: Prisma.FieldRef<"FeePayment", 'PaymentStatus'>
  readonly paymentMethod: Prisma.FieldRef<"FeePayment", 'PaymentMethod'>
  readonly paymentDate: Prisma.FieldRef<"FeePayment", 'DateTime'>
  readonly receiptNumber: Prisma.FieldRef<"FeePayment", 'String'>
  readonly note: Prisma.FieldRef<"FeePayment", 'String'>
  readonly transactionId: Prisma.FieldRef<"FeePayment", 'String'>
  readonly payerId: Prisma.FieldRef<"FeePayment", 'String'>
  readonly platformFee: Prisma.FieldRef<"FeePayment", 'Float'>
  readonly recordedBy: Prisma.FieldRef<"FeePayment", 'String'>
  readonly organizationId: Prisma.FieldRef<"FeePayment", 'String'>
  readonly createdAt: Prisma.FieldRef<"FeePayment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FeePayment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FeePayment findUnique
 */
export type FeePaymentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * Filter, which FeePayment to fetch.
   */
  where: Prisma.FeePaymentWhereUniqueInput
}

/**
 * FeePayment findUniqueOrThrow
 */
export type FeePaymentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * Filter, which FeePayment to fetch.
   */
  where: Prisma.FeePaymentWhereUniqueInput
}

/**
 * FeePayment findFirst
 */
export type FeePaymentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * Filter, which FeePayment to fetch.
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeePayments to fetch.
   */
  orderBy?: Prisma.FeePaymentOrderByWithRelationInput | Prisma.FeePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeePayments.
   */
  cursor?: Prisma.FeePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeePayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeePayments.
   */
  distinct?: Prisma.FeePaymentScalarFieldEnum | Prisma.FeePaymentScalarFieldEnum[]
}

/**
 * FeePayment findFirstOrThrow
 */
export type FeePaymentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * Filter, which FeePayment to fetch.
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeePayments to fetch.
   */
  orderBy?: Prisma.FeePaymentOrderByWithRelationInput | Prisma.FeePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeePayments.
   */
  cursor?: Prisma.FeePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeePayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeePayments.
   */
  distinct?: Prisma.FeePaymentScalarFieldEnum | Prisma.FeePaymentScalarFieldEnum[]
}

/**
 * FeePayment findMany
 */
export type FeePaymentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * Filter, which FeePayments to fetch.
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeePayments to fetch.
   */
  orderBy?: Prisma.FeePaymentOrderByWithRelationInput | Prisma.FeePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FeePayments.
   */
  cursor?: Prisma.FeePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeePayments.
   */
  skip?: number
  distinct?: Prisma.FeePaymentScalarFieldEnum | Prisma.FeePaymentScalarFieldEnum[]
}

/**
 * FeePayment create
 */
export type FeePaymentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * The data needed to create a FeePayment.
   */
  data: Prisma.XOR<Prisma.FeePaymentCreateInput, Prisma.FeePaymentUncheckedCreateInput>
}

/**
 * FeePayment createMany
 */
export type FeePaymentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FeePayments.
   */
  data: Prisma.FeePaymentCreateManyInput | Prisma.FeePaymentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeePayment createManyAndReturn
 */
export type FeePaymentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * The data used to create many FeePayments.
   */
  data: Prisma.FeePaymentCreateManyInput | Prisma.FeePaymentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeePayment update
 */
export type FeePaymentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * The data needed to update a FeePayment.
   */
  data: Prisma.XOR<Prisma.FeePaymentUpdateInput, Prisma.FeePaymentUncheckedUpdateInput>
  /**
   * Choose, which FeePayment to update.
   */
  where: Prisma.FeePaymentWhereUniqueInput
}

/**
 * FeePayment updateMany
 */
export type FeePaymentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FeePayments.
   */
  data: Prisma.XOR<Prisma.FeePaymentUpdateManyMutationInput, Prisma.FeePaymentUncheckedUpdateManyInput>
  /**
   * Filter which FeePayments to update
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * Limit how many FeePayments to update.
   */
  limit?: number
}

/**
 * FeePayment updateManyAndReturn
 */
export type FeePaymentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * The data used to update FeePayments.
   */
  data: Prisma.XOR<Prisma.FeePaymentUpdateManyMutationInput, Prisma.FeePaymentUncheckedUpdateManyInput>
  /**
   * Filter which FeePayments to update
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * Limit how many FeePayments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeePayment upsert
 */
export type FeePaymentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * The filter to search for the FeePayment to update in case it exists.
   */
  where: Prisma.FeePaymentWhereUniqueInput
  /**
   * In case the FeePayment found by the `where` argument doesn't exist, create a new FeePayment with this data.
   */
  create: Prisma.XOR<Prisma.FeePaymentCreateInput, Prisma.FeePaymentUncheckedCreateInput>
  /**
   * In case the FeePayment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeePaymentUpdateInput, Prisma.FeePaymentUncheckedUpdateInput>
}

/**
 * FeePayment delete
 */
export type FeePaymentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
  /**
   * Filter which FeePayment to delete.
   */
  where: Prisma.FeePaymentWhereUniqueInput
}

/**
 * FeePayment deleteMany
 */
export type FeePaymentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeePayments to delete
   */
  where?: Prisma.FeePaymentWhereInput
  /**
   * Limit how many FeePayments to delete.
   */
  limit?: number
}

/**
 * FeePayment without action
 */
export type FeePaymentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeePayment
   */
  select?: Prisma.FeePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeePayment
   */
  omit?: Prisma.FeePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeePaymentInclude<ExtArgs> | null
}
