
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `LeadActivity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LeadActivity
 * 
 */
export type LeadActivityModel = runtime.Types.Result.DefaultSelection<Prisma.$LeadActivityPayload>

export type AggregateLeadActivity = {
  _count: LeadActivityCountAggregateOutputType | null
  _min: LeadActivityMinAggregateOutputType | null
  _max: LeadActivityMaxAggregateOutputType | null
}

export type LeadActivityMinAggregateOutputType = {
  id: string | null
  leadId: string | null
  type: $Enums.ActivityType | null
  title: string | null
  description: string | null
  outcome: string | null
  performedById: string | null
  performedAt: Date | null
  followUpDate: Date | null
  followUpNote: string | null
  createdAt: Date | null
}

export type LeadActivityMaxAggregateOutputType = {
  id: string | null
  leadId: string | null
  type: $Enums.ActivityType | null
  title: string | null
  description: string | null
  outcome: string | null
  performedById: string | null
  performedAt: Date | null
  followUpDate: Date | null
  followUpNote: string | null
  createdAt: Date | null
}

export type LeadActivityCountAggregateOutputType = {
  id: number
  leadId: number
  type: number
  title: number
  description: number
  outcome: number
  performedById: number
  performedAt: number
  followUpDate: number
  followUpNote: number
  createdAt: number
  _all: number
}


export type LeadActivityMinAggregateInputType = {
  id?: true
  leadId?: true
  type?: true
  title?: true
  description?: true
  outcome?: true
  performedById?: true
  performedAt?: true
  followUpDate?: true
  followUpNote?: true
  createdAt?: true
}

export type LeadActivityMaxAggregateInputType = {
  id?: true
  leadId?: true
  type?: true
  title?: true
  description?: true
  outcome?: true
  performedById?: true
  performedAt?: true
  followUpDate?: true
  followUpNote?: true
  createdAt?: true
}

export type LeadActivityCountAggregateInputType = {
  id?: true
  leadId?: true
  type?: true
  title?: true
  description?: true
  outcome?: true
  performedById?: true
  performedAt?: true
  followUpDate?: true
  followUpNote?: true
  createdAt?: true
  _all?: true
}

export type LeadActivityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LeadActivity to aggregate.
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeadActivities to fetch.
   */
  orderBy?: Prisma.LeadActivityOrderByWithRelationInput | Prisma.LeadActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LeadActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeadActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeadActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LeadActivities
  **/
  _count?: true | LeadActivityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeadActivityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeadActivityMaxAggregateInputType
}

export type GetLeadActivityAggregateType<T extends LeadActivityAggregateArgs> = {
      [P in keyof T & keyof AggregateLeadActivity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeadActivity[P]>
    : Prisma.GetScalarType<T[P], AggregateLeadActivity[P]>
}




export type LeadActivityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LeadActivityWhereInput
  orderBy?: Prisma.LeadActivityOrderByWithAggregationInput | Prisma.LeadActivityOrderByWithAggregationInput[]
  by: Prisma.LeadActivityScalarFieldEnum[] | Prisma.LeadActivityScalarFieldEnum
  having?: Prisma.LeadActivityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeadActivityCountAggregateInputType | true
  _min?: LeadActivityMinAggregateInputType
  _max?: LeadActivityMaxAggregateInputType
}

export type LeadActivityGroupByOutputType = {
  id: string
  leadId: string
  type: $Enums.ActivityType
  title: string
  description: string | null
  outcome: string | null
  performedById: string | null
  performedAt: Date
  followUpDate: Date | null
  followUpNote: string | null
  createdAt: Date
  _count: LeadActivityCountAggregateOutputType | null
  _min: LeadActivityMinAggregateOutputType | null
  _max: LeadActivityMaxAggregateOutputType | null
}

type GetLeadActivityGroupByPayload<T extends LeadActivityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeadActivityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeadActivityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeadActivityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeadActivityGroupByOutputType[P]>
      }
    >
  >



export type LeadActivityWhereInput = {
  AND?: Prisma.LeadActivityWhereInput | Prisma.LeadActivityWhereInput[]
  OR?: Prisma.LeadActivityWhereInput[]
  NOT?: Prisma.LeadActivityWhereInput | Prisma.LeadActivityWhereInput[]
  id?: Prisma.StringFilter<"LeadActivity"> | string
  leadId?: Prisma.StringFilter<"LeadActivity"> | string
  type?: Prisma.EnumActivityTypeFilter<"LeadActivity"> | $Enums.ActivityType
  title?: Prisma.StringFilter<"LeadActivity"> | string
  description?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  outcome?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  performedById?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  performedAt?: Prisma.DateTimeFilter<"LeadActivity"> | Date | string
  followUpDate?: Prisma.DateTimeNullableFilter<"LeadActivity"> | Date | string | null
  followUpNote?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"LeadActivity"> | Date | string
  lead?: Prisma.XOR<Prisma.LeadScalarRelationFilter, Prisma.LeadWhereInput>
}

export type LeadActivityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  outcome?: Prisma.SortOrderInput | Prisma.SortOrder
  performedById?: Prisma.SortOrderInput | Prisma.SortOrder
  performedAt?: Prisma.SortOrder
  followUpDate?: Prisma.SortOrderInput | Prisma.SortOrder
  followUpNote?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  lead?: Prisma.LeadOrderByWithRelationInput
  _relevance?: Prisma.LeadActivityOrderByRelevanceInput
}

export type LeadActivityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LeadActivityWhereInput | Prisma.LeadActivityWhereInput[]
  OR?: Prisma.LeadActivityWhereInput[]
  NOT?: Prisma.LeadActivityWhereInput | Prisma.LeadActivityWhereInput[]
  leadId?: Prisma.StringFilter<"LeadActivity"> | string
  type?: Prisma.EnumActivityTypeFilter<"LeadActivity"> | $Enums.ActivityType
  title?: Prisma.StringFilter<"LeadActivity"> | string
  description?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  outcome?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  performedById?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  performedAt?: Prisma.DateTimeFilter<"LeadActivity"> | Date | string
  followUpDate?: Prisma.DateTimeNullableFilter<"LeadActivity"> | Date | string | null
  followUpNote?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"LeadActivity"> | Date | string
  lead?: Prisma.XOR<Prisma.LeadScalarRelationFilter, Prisma.LeadWhereInput>
}, "id">

export type LeadActivityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  outcome?: Prisma.SortOrderInput | Prisma.SortOrder
  performedById?: Prisma.SortOrderInput | Prisma.SortOrder
  performedAt?: Prisma.SortOrder
  followUpDate?: Prisma.SortOrderInput | Prisma.SortOrder
  followUpNote?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.LeadActivityCountOrderByAggregateInput
  _max?: Prisma.LeadActivityMaxOrderByAggregateInput
  _min?: Prisma.LeadActivityMinOrderByAggregateInput
}

export type LeadActivityScalarWhereWithAggregatesInput = {
  AND?: Prisma.LeadActivityScalarWhereWithAggregatesInput | Prisma.LeadActivityScalarWhereWithAggregatesInput[]
  OR?: Prisma.LeadActivityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LeadActivityScalarWhereWithAggregatesInput | Prisma.LeadActivityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LeadActivity"> | string
  leadId?: Prisma.StringWithAggregatesFilter<"LeadActivity"> | string
  type?: Prisma.EnumActivityTypeWithAggregatesFilter<"LeadActivity"> | $Enums.ActivityType
  title?: Prisma.StringWithAggregatesFilter<"LeadActivity"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"LeadActivity"> | string | null
  outcome?: Prisma.StringNullableWithAggregatesFilter<"LeadActivity"> | string | null
  performedById?: Prisma.StringNullableWithAggregatesFilter<"LeadActivity"> | string | null
  performedAt?: Prisma.DateTimeWithAggregatesFilter<"LeadActivity"> | Date | string
  followUpDate?: Prisma.DateTimeNullableWithAggregatesFilter<"LeadActivity"> | Date | string | null
  followUpNote?: Prisma.StringNullableWithAggregatesFilter<"LeadActivity"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LeadActivity"> | Date | string
}

export type LeadActivityCreateInput = {
  id?: string
  type: $Enums.ActivityType
  title: string
  description?: string | null
  outcome?: string | null
  performedById?: string | null
  performedAt?: Date | string
  followUpDate?: Date | string | null
  followUpNote?: string | null
  createdAt?: Date | string
  lead: Prisma.LeadCreateNestedOneWithoutActivitiesInput
}

export type LeadActivityUncheckedCreateInput = {
  id?: string
  leadId: string
  type: $Enums.ActivityType
  title: string
  description?: string | null
  outcome?: string | null
  performedById?: string | null
  performedAt?: Date | string
  followUpDate?: Date | string | null
  followUpNote?: string | null
  createdAt?: Date | string
}

export type LeadActivityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lead?: Prisma.LeadUpdateOneRequiredWithoutActivitiesNestedInput
}

export type LeadActivityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeadActivityCreateManyInput = {
  id?: string
  leadId: string
  type: $Enums.ActivityType
  title: string
  description?: string | null
  outcome?: string | null
  performedById?: string | null
  performedAt?: Date | string
  followUpDate?: Date | string | null
  followUpNote?: string | null
  createdAt?: Date | string
}

export type LeadActivityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeadActivityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeadActivityListRelationFilter = {
  every?: Prisma.LeadActivityWhereInput
  some?: Prisma.LeadActivityWhereInput
  none?: Prisma.LeadActivityWhereInput
}

export type LeadActivityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LeadActivityOrderByRelevanceInput = {
  fields: Prisma.LeadActivityOrderByRelevanceFieldEnum | Prisma.LeadActivityOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type LeadActivityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  outcome?: Prisma.SortOrder
  performedById?: Prisma.SortOrder
  performedAt?: Prisma.SortOrder
  followUpDate?: Prisma.SortOrder
  followUpNote?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type LeadActivityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  outcome?: Prisma.SortOrder
  performedById?: Prisma.SortOrder
  performedAt?: Prisma.SortOrder
  followUpDate?: Prisma.SortOrder
  followUpNote?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type LeadActivityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  outcome?: Prisma.SortOrder
  performedById?: Prisma.SortOrder
  performedAt?: Prisma.SortOrder
  followUpDate?: Prisma.SortOrder
  followUpNote?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type LeadActivityCreateNestedManyWithoutLeadInput = {
  create?: Prisma.XOR<Prisma.LeadActivityCreateWithoutLeadInput, Prisma.LeadActivityUncheckedCreateWithoutLeadInput> | Prisma.LeadActivityCreateWithoutLeadInput[] | Prisma.LeadActivityUncheckedCreateWithoutLeadInput[]
  connectOrCreate?: Prisma.LeadActivityCreateOrConnectWithoutLeadInput | Prisma.LeadActivityCreateOrConnectWithoutLeadInput[]
  createMany?: Prisma.LeadActivityCreateManyLeadInputEnvelope
  connect?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
}

export type LeadActivityUncheckedCreateNestedManyWithoutLeadInput = {
  create?: Prisma.XOR<Prisma.LeadActivityCreateWithoutLeadInput, Prisma.LeadActivityUncheckedCreateWithoutLeadInput> | Prisma.LeadActivityCreateWithoutLeadInput[] | Prisma.LeadActivityUncheckedCreateWithoutLeadInput[]
  connectOrCreate?: Prisma.LeadActivityCreateOrConnectWithoutLeadInput | Prisma.LeadActivityCreateOrConnectWithoutLeadInput[]
  createMany?: Prisma.LeadActivityCreateManyLeadInputEnvelope
  connect?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
}

export type LeadActivityUpdateManyWithoutLeadNestedInput = {
  create?: Prisma.XOR<Prisma.LeadActivityCreateWithoutLeadInput, Prisma.LeadActivityUncheckedCreateWithoutLeadInput> | Prisma.LeadActivityCreateWithoutLeadInput[] | Prisma.LeadActivityUncheckedCreateWithoutLeadInput[]
  connectOrCreate?: Prisma.LeadActivityCreateOrConnectWithoutLeadInput | Prisma.LeadActivityCreateOrConnectWithoutLeadInput[]
  upsert?: Prisma.LeadActivityUpsertWithWhereUniqueWithoutLeadInput | Prisma.LeadActivityUpsertWithWhereUniqueWithoutLeadInput[]
  createMany?: Prisma.LeadActivityCreateManyLeadInputEnvelope
  set?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  disconnect?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  delete?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  connect?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  update?: Prisma.LeadActivityUpdateWithWhereUniqueWithoutLeadInput | Prisma.LeadActivityUpdateWithWhereUniqueWithoutLeadInput[]
  updateMany?: Prisma.LeadActivityUpdateManyWithWhereWithoutLeadInput | Prisma.LeadActivityUpdateManyWithWhereWithoutLeadInput[]
  deleteMany?: Prisma.LeadActivityScalarWhereInput | Prisma.LeadActivityScalarWhereInput[]
}

export type LeadActivityUncheckedUpdateManyWithoutLeadNestedInput = {
  create?: Prisma.XOR<Prisma.LeadActivityCreateWithoutLeadInput, Prisma.LeadActivityUncheckedCreateWithoutLeadInput> | Prisma.LeadActivityCreateWithoutLeadInput[] | Prisma.LeadActivityUncheckedCreateWithoutLeadInput[]
  connectOrCreate?: Prisma.LeadActivityCreateOrConnectWithoutLeadInput | Prisma.LeadActivityCreateOrConnectWithoutLeadInput[]
  upsert?: Prisma.LeadActivityUpsertWithWhereUniqueWithoutLeadInput | Prisma.LeadActivityUpsertWithWhereUniqueWithoutLeadInput[]
  createMany?: Prisma.LeadActivityCreateManyLeadInputEnvelope
  set?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  disconnect?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  delete?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  connect?: Prisma.LeadActivityWhereUniqueInput | Prisma.LeadActivityWhereUniqueInput[]
  update?: Prisma.LeadActivityUpdateWithWhereUniqueWithoutLeadInput | Prisma.LeadActivityUpdateWithWhereUniqueWithoutLeadInput[]
  updateMany?: Prisma.LeadActivityUpdateManyWithWhereWithoutLeadInput | Prisma.LeadActivityUpdateManyWithWhereWithoutLeadInput[]
  deleteMany?: Prisma.LeadActivityScalarWhereInput | Prisma.LeadActivityScalarWhereInput[]
}

export type EnumActivityTypeFieldUpdateOperationsInput = {
  set?: $Enums.ActivityType
}

export type LeadActivityCreateWithoutLeadInput = {
  id?: string
  type: $Enums.ActivityType
  title: string
  description?: string | null
  outcome?: string | null
  performedById?: string | null
  performedAt?: Date | string
  followUpDate?: Date | string | null
  followUpNote?: string | null
  createdAt?: Date | string
}

export type LeadActivityUncheckedCreateWithoutLeadInput = {
  id?: string
  type: $Enums.ActivityType
  title: string
  description?: string | null
  outcome?: string | null
  performedById?: string | null
  performedAt?: Date | string
  followUpDate?: Date | string | null
  followUpNote?: string | null
  createdAt?: Date | string
}

export type LeadActivityCreateOrConnectWithoutLeadInput = {
  where: Prisma.LeadActivityWhereUniqueInput
  create: Prisma.XOR<Prisma.LeadActivityCreateWithoutLeadInput, Prisma.LeadActivityUncheckedCreateWithoutLeadInput>
}

export type LeadActivityCreateManyLeadInputEnvelope = {
  data: Prisma.LeadActivityCreateManyLeadInput | Prisma.LeadActivityCreateManyLeadInput[]
  skipDuplicates?: boolean
}

export type LeadActivityUpsertWithWhereUniqueWithoutLeadInput = {
  where: Prisma.LeadActivityWhereUniqueInput
  update: Prisma.XOR<Prisma.LeadActivityUpdateWithoutLeadInput, Prisma.LeadActivityUncheckedUpdateWithoutLeadInput>
  create: Prisma.XOR<Prisma.LeadActivityCreateWithoutLeadInput, Prisma.LeadActivityUncheckedCreateWithoutLeadInput>
}

export type LeadActivityUpdateWithWhereUniqueWithoutLeadInput = {
  where: Prisma.LeadActivityWhereUniqueInput
  data: Prisma.XOR<Prisma.LeadActivityUpdateWithoutLeadInput, Prisma.LeadActivityUncheckedUpdateWithoutLeadInput>
}

export type LeadActivityUpdateManyWithWhereWithoutLeadInput = {
  where: Prisma.LeadActivityScalarWhereInput
  data: Prisma.XOR<Prisma.LeadActivityUpdateManyMutationInput, Prisma.LeadActivityUncheckedUpdateManyWithoutLeadInput>
}

export type LeadActivityScalarWhereInput = {
  AND?: Prisma.LeadActivityScalarWhereInput | Prisma.LeadActivityScalarWhereInput[]
  OR?: Prisma.LeadActivityScalarWhereInput[]
  NOT?: Prisma.LeadActivityScalarWhereInput | Prisma.LeadActivityScalarWhereInput[]
  id?: Prisma.StringFilter<"LeadActivity"> | string
  leadId?: Prisma.StringFilter<"LeadActivity"> | string
  type?: Prisma.EnumActivityTypeFilter<"LeadActivity"> | $Enums.ActivityType
  title?: Prisma.StringFilter<"LeadActivity"> | string
  description?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  outcome?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  performedById?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  performedAt?: Prisma.DateTimeFilter<"LeadActivity"> | Date | string
  followUpDate?: Prisma.DateTimeNullableFilter<"LeadActivity"> | Date | string | null
  followUpNote?: Prisma.StringNullableFilter<"LeadActivity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"LeadActivity"> | Date | string
}

export type LeadActivityCreateManyLeadInput = {
  id?: string
  type: $Enums.ActivityType
  title: string
  description?: string | null
  outcome?: string | null
  performedById?: string | null
  performedAt?: Date | string
  followUpDate?: Date | string | null
  followUpNote?: string | null
  createdAt?: Date | string
}

export type LeadActivityUpdateWithoutLeadInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeadActivityUncheckedUpdateWithoutLeadInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeadActivityUncheckedUpdateManyWithoutLeadInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  outcome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedById?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  performedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followUpDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  followUpNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type LeadActivitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  leadId?: boolean
  type?: boolean
  title?: boolean
  description?: boolean
  outcome?: boolean
  performedById?: boolean
  performedAt?: boolean
  followUpDate?: boolean
  followUpNote?: boolean
  createdAt?: boolean
  lead?: boolean | Prisma.LeadDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leadActivity"]>

export type LeadActivitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  leadId?: boolean
  type?: boolean
  title?: boolean
  description?: boolean
  outcome?: boolean
  performedById?: boolean
  performedAt?: boolean
  followUpDate?: boolean
  followUpNote?: boolean
  createdAt?: boolean
  lead?: boolean | Prisma.LeadDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leadActivity"]>

export type LeadActivitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  leadId?: boolean
  type?: boolean
  title?: boolean
  description?: boolean
  outcome?: boolean
  performedById?: boolean
  performedAt?: boolean
  followUpDate?: boolean
  followUpNote?: boolean
  createdAt?: boolean
  lead?: boolean | Prisma.LeadDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leadActivity"]>

export type LeadActivitySelectScalar = {
  id?: boolean
  leadId?: boolean
  type?: boolean
  title?: boolean
  description?: boolean
  outcome?: boolean
  performedById?: boolean
  performedAt?: boolean
  followUpDate?: boolean
  followUpNote?: boolean
  createdAt?: boolean
}

export type LeadActivityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "leadId" | "type" | "title" | "description" | "outcome" | "performedById" | "performedAt" | "followUpDate" | "followUpNote" | "createdAt", ExtArgs["result"]["leadActivity"]>
export type LeadActivityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lead?: boolean | Prisma.LeadDefaultArgs<ExtArgs>
}
export type LeadActivityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lead?: boolean | Prisma.LeadDefaultArgs<ExtArgs>
}
export type LeadActivityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lead?: boolean | Prisma.LeadDefaultArgs<ExtArgs>
}

export type $LeadActivityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LeadActivity"
  objects: {
    lead: Prisma.$LeadPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    leadId: string
    type: $Enums.ActivityType
    title: string
    description: string | null
    outcome: string | null
    performedById: string | null
    performedAt: Date
    followUpDate: Date | null
    followUpNote: string | null
    createdAt: Date
  }, ExtArgs["result"]["leadActivity"]>
  composites: {}
}

export type LeadActivityGetPayload<S extends boolean | null | undefined | LeadActivityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload, S>

export type LeadActivityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LeadActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeadActivityCountAggregateInputType | true
  }

export interface LeadActivityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadActivity'], meta: { name: 'LeadActivity' } }
  /**
   * Find zero or one LeadActivity that matches the filter.
   * @param {LeadActivityFindUniqueArgs} args - Arguments to find a LeadActivity
   * @example
   * // Get one LeadActivity
   * const leadActivity = await prisma.leadActivity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LeadActivityFindUniqueArgs>(args: Prisma.SelectSubset<T, LeadActivityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LeadActivity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LeadActivityFindUniqueOrThrowArgs} args - Arguments to find a LeadActivity
   * @example
   * // Get one LeadActivity
   * const leadActivity = await prisma.leadActivity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LeadActivityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LeadActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LeadActivity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityFindFirstArgs} args - Arguments to find a LeadActivity
   * @example
   * // Get one LeadActivity
   * const leadActivity = await prisma.leadActivity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LeadActivityFindFirstArgs>(args?: Prisma.SelectSubset<T, LeadActivityFindFirstArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LeadActivity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityFindFirstOrThrowArgs} args - Arguments to find a LeadActivity
   * @example
   * // Get one LeadActivity
   * const leadActivity = await prisma.leadActivity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LeadActivityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LeadActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LeadActivities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LeadActivities
   * const leadActivities = await prisma.leadActivity.findMany()
   * 
   * // Get first 10 LeadActivities
   * const leadActivities = await prisma.leadActivity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const leadActivityWithIdOnly = await prisma.leadActivity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LeadActivityFindManyArgs>(args?: Prisma.SelectSubset<T, LeadActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LeadActivity.
   * @param {LeadActivityCreateArgs} args - Arguments to create a LeadActivity.
   * @example
   * // Create one LeadActivity
   * const LeadActivity = await prisma.leadActivity.create({
   *   data: {
   *     // ... data to create a LeadActivity
   *   }
   * })
   * 
   */
  create<T extends LeadActivityCreateArgs>(args: Prisma.SelectSubset<T, LeadActivityCreateArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LeadActivities.
   * @param {LeadActivityCreateManyArgs} args - Arguments to create many LeadActivities.
   * @example
   * // Create many LeadActivities
   * const leadActivity = await prisma.leadActivity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LeadActivityCreateManyArgs>(args?: Prisma.SelectSubset<T, LeadActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LeadActivities and returns the data saved in the database.
   * @param {LeadActivityCreateManyAndReturnArgs} args - Arguments to create many LeadActivities.
   * @example
   * // Create many LeadActivities
   * const leadActivity = await prisma.leadActivity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LeadActivities and only return the `id`
   * const leadActivityWithIdOnly = await prisma.leadActivity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LeadActivityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LeadActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LeadActivity.
   * @param {LeadActivityDeleteArgs} args - Arguments to delete one LeadActivity.
   * @example
   * // Delete one LeadActivity
   * const LeadActivity = await prisma.leadActivity.delete({
   *   where: {
   *     // ... filter to delete one LeadActivity
   *   }
   * })
   * 
   */
  delete<T extends LeadActivityDeleteArgs>(args: Prisma.SelectSubset<T, LeadActivityDeleteArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LeadActivity.
   * @param {LeadActivityUpdateArgs} args - Arguments to update one LeadActivity.
   * @example
   * // Update one LeadActivity
   * const leadActivity = await prisma.leadActivity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LeadActivityUpdateArgs>(args: Prisma.SelectSubset<T, LeadActivityUpdateArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LeadActivities.
   * @param {LeadActivityDeleteManyArgs} args - Arguments to filter LeadActivities to delete.
   * @example
   * // Delete a few LeadActivities
   * const { count } = await prisma.leadActivity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LeadActivityDeleteManyArgs>(args?: Prisma.SelectSubset<T, LeadActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LeadActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LeadActivities
   * const leadActivity = await prisma.leadActivity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LeadActivityUpdateManyArgs>(args: Prisma.SelectSubset<T, LeadActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LeadActivities and returns the data updated in the database.
   * @param {LeadActivityUpdateManyAndReturnArgs} args - Arguments to update many LeadActivities.
   * @example
   * // Update many LeadActivities
   * const leadActivity = await prisma.leadActivity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LeadActivities and only return the `id`
   * const leadActivityWithIdOnly = await prisma.leadActivity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LeadActivityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LeadActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LeadActivity.
   * @param {LeadActivityUpsertArgs} args - Arguments to update or create a LeadActivity.
   * @example
   * // Update or create a LeadActivity
   * const leadActivity = await prisma.leadActivity.upsert({
   *   create: {
   *     // ... data to create a LeadActivity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LeadActivity we want to update
   *   }
   * })
   */
  upsert<T extends LeadActivityUpsertArgs>(args: Prisma.SelectSubset<T, LeadActivityUpsertArgs<ExtArgs>>): Prisma.Prisma__LeadActivityClient<runtime.Types.Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LeadActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityCountArgs} args - Arguments to filter LeadActivities to count.
   * @example
   * // Count the number of LeadActivities
   * const count = await prisma.leadActivity.count({
   *   where: {
   *     // ... the filter for the LeadActivities we want to count
   *   }
   * })
  **/
  count<T extends LeadActivityCountArgs>(
    args?: Prisma.Subset<T, LeadActivityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeadActivityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LeadActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeadActivityAggregateArgs>(args: Prisma.Subset<T, LeadActivityAggregateArgs>): Prisma.PrismaPromise<GetLeadActivityAggregateType<T>>

  /**
   * Group by LeadActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeadActivityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LeadActivityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LeadActivityGroupByArgs['orderBy'] }
      : { orderBy?: LeadActivityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LeadActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LeadActivity model
 */
readonly fields: LeadActivityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LeadActivity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LeadActivityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  lead<T extends Prisma.LeadDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LeadDefaultArgs<ExtArgs>>): Prisma.Prisma__LeadClient<runtime.Types.Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LeadActivity model
 */
export interface LeadActivityFieldRefs {
  readonly id: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly leadId: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly type: Prisma.FieldRef<"LeadActivity", 'ActivityType'>
  readonly title: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly description: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly outcome: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly performedById: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly performedAt: Prisma.FieldRef<"LeadActivity", 'DateTime'>
  readonly followUpDate: Prisma.FieldRef<"LeadActivity", 'DateTime'>
  readonly followUpNote: Prisma.FieldRef<"LeadActivity", 'String'>
  readonly createdAt: Prisma.FieldRef<"LeadActivity", 'DateTime'>
}
    

// Custom InputTypes
/**
 * LeadActivity findUnique
 */
export type LeadActivityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * Filter, which LeadActivity to fetch.
   */
  where: Prisma.LeadActivityWhereUniqueInput
}

/**
 * LeadActivity findUniqueOrThrow
 */
export type LeadActivityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * Filter, which LeadActivity to fetch.
   */
  where: Prisma.LeadActivityWhereUniqueInput
}

/**
 * LeadActivity findFirst
 */
export type LeadActivityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * Filter, which LeadActivity to fetch.
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeadActivities to fetch.
   */
  orderBy?: Prisma.LeadActivityOrderByWithRelationInput | Prisma.LeadActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LeadActivities.
   */
  cursor?: Prisma.LeadActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeadActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeadActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LeadActivities.
   */
  distinct?: Prisma.LeadActivityScalarFieldEnum | Prisma.LeadActivityScalarFieldEnum[]
}

/**
 * LeadActivity findFirstOrThrow
 */
export type LeadActivityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * Filter, which LeadActivity to fetch.
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeadActivities to fetch.
   */
  orderBy?: Prisma.LeadActivityOrderByWithRelationInput | Prisma.LeadActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LeadActivities.
   */
  cursor?: Prisma.LeadActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeadActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeadActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LeadActivities.
   */
  distinct?: Prisma.LeadActivityScalarFieldEnum | Prisma.LeadActivityScalarFieldEnum[]
}

/**
 * LeadActivity findMany
 */
export type LeadActivityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * Filter, which LeadActivities to fetch.
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeadActivities to fetch.
   */
  orderBy?: Prisma.LeadActivityOrderByWithRelationInput | Prisma.LeadActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LeadActivities.
   */
  cursor?: Prisma.LeadActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeadActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeadActivities.
   */
  skip?: number
  distinct?: Prisma.LeadActivityScalarFieldEnum | Prisma.LeadActivityScalarFieldEnum[]
}

/**
 * LeadActivity create
 */
export type LeadActivityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * The data needed to create a LeadActivity.
   */
  data: Prisma.XOR<Prisma.LeadActivityCreateInput, Prisma.LeadActivityUncheckedCreateInput>
}

/**
 * LeadActivity createMany
 */
export type LeadActivityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LeadActivities.
   */
  data: Prisma.LeadActivityCreateManyInput | Prisma.LeadActivityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LeadActivity createManyAndReturn
 */
export type LeadActivityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * The data used to create many LeadActivities.
   */
  data: Prisma.LeadActivityCreateManyInput | Prisma.LeadActivityCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LeadActivity update
 */
export type LeadActivityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * The data needed to update a LeadActivity.
   */
  data: Prisma.XOR<Prisma.LeadActivityUpdateInput, Prisma.LeadActivityUncheckedUpdateInput>
  /**
   * Choose, which LeadActivity to update.
   */
  where: Prisma.LeadActivityWhereUniqueInput
}

/**
 * LeadActivity updateMany
 */
export type LeadActivityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LeadActivities.
   */
  data: Prisma.XOR<Prisma.LeadActivityUpdateManyMutationInput, Prisma.LeadActivityUncheckedUpdateManyInput>
  /**
   * Filter which LeadActivities to update
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * Limit how many LeadActivities to update.
   */
  limit?: number
}

/**
 * LeadActivity updateManyAndReturn
 */
export type LeadActivityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * The data used to update LeadActivities.
   */
  data: Prisma.XOR<Prisma.LeadActivityUpdateManyMutationInput, Prisma.LeadActivityUncheckedUpdateManyInput>
  /**
   * Filter which LeadActivities to update
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * Limit how many LeadActivities to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LeadActivity upsert
 */
export type LeadActivityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * The filter to search for the LeadActivity to update in case it exists.
   */
  where: Prisma.LeadActivityWhereUniqueInput
  /**
   * In case the LeadActivity found by the `where` argument doesn't exist, create a new LeadActivity with this data.
   */
  create: Prisma.XOR<Prisma.LeadActivityCreateInput, Prisma.LeadActivityUncheckedCreateInput>
  /**
   * In case the LeadActivity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LeadActivityUpdateInput, Prisma.LeadActivityUncheckedUpdateInput>
}

/**
 * LeadActivity delete
 */
export type LeadActivityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
  /**
   * Filter which LeadActivity to delete.
   */
  where: Prisma.LeadActivityWhereUniqueInput
}

/**
 * LeadActivity deleteMany
 */
export type LeadActivityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LeadActivities to delete
   */
  where?: Prisma.LeadActivityWhereInput
  /**
   * Limit how many LeadActivities to delete.
   */
  limit?: number
}

/**
 * LeadActivity without action
 */
export type LeadActivityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeadActivity
   */
  select?: Prisma.LeadActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeadActivity
   */
  omit?: Prisma.LeadActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadActivityInclude<ExtArgs> | null
}
