
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ReportCard` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ReportCard
 * 
 */
export type ReportCardModel = runtime.Types.Result.DefaultSelection<Prisma.$ReportCardPayload>

export type AggregateReportCard = {
  _count: ReportCardCountAggregateOutputType | null
  _avg: ReportCardAvgAggregateOutputType | null
  _sum: ReportCardSumAggregateOutputType | null
  _min: ReportCardMinAggregateOutputType | null
  _max: ReportCardMaxAggregateOutputType | null
}

export type ReportCardAvgAggregateOutputType = {
  totalMaxMarks: number | null
  totalObtained: number | null
  percentage: number | null
  cgpa: number | null
  classRank: number | null
  gradeRank: number | null
  attendancePercent: number | null
  rank: number | null
}

export type ReportCardSumAggregateOutputType = {
  totalMaxMarks: number | null
  totalObtained: number | null
  percentage: number | null
  cgpa: number | null
  classRank: number | null
  gradeRank: number | null
  attendancePercent: number | null
  rank: number | null
}

export type ReportCardMinAggregateOutputType = {
  id: string | null
  studentId: string | null
  examSessionId: string | null
  totalMaxMarks: number | null
  totalObtained: number | null
  percentage: number | null
  cgpa: number | null
  overallGrade: string | null
  resultStatus: $Enums.ResultStatus | null
  classRank: number | null
  gradeRank: number | null
  attendancePercent: number | null
  conductGrade: string | null
  remarks: string | null
  principalRemarks: string | null
  rank: number | null
  pdfUrl: string | null
  generatedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReportCardMaxAggregateOutputType = {
  id: string | null
  studentId: string | null
  examSessionId: string | null
  totalMaxMarks: number | null
  totalObtained: number | null
  percentage: number | null
  cgpa: number | null
  overallGrade: string | null
  resultStatus: $Enums.ResultStatus | null
  classRank: number | null
  gradeRank: number | null
  attendancePercent: number | null
  conductGrade: string | null
  remarks: string | null
  principalRemarks: string | null
  rank: number | null
  pdfUrl: string | null
  generatedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReportCardCountAggregateOutputType = {
  id: number
  studentId: number
  examSessionId: number
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa: number
  overallGrade: number
  resultStatus: number
  classRank: number
  gradeRank: number
  attendancePercent: number
  conductGrade: number
  remarks: number
  principalRemarks: number
  rank: number
  pdfUrl: number
  generatedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ReportCardAvgAggregateInputType = {
  totalMaxMarks?: true
  totalObtained?: true
  percentage?: true
  cgpa?: true
  classRank?: true
  gradeRank?: true
  attendancePercent?: true
  rank?: true
}

export type ReportCardSumAggregateInputType = {
  totalMaxMarks?: true
  totalObtained?: true
  percentage?: true
  cgpa?: true
  classRank?: true
  gradeRank?: true
  attendancePercent?: true
  rank?: true
}

export type ReportCardMinAggregateInputType = {
  id?: true
  studentId?: true
  examSessionId?: true
  totalMaxMarks?: true
  totalObtained?: true
  percentage?: true
  cgpa?: true
  overallGrade?: true
  resultStatus?: true
  classRank?: true
  gradeRank?: true
  attendancePercent?: true
  conductGrade?: true
  remarks?: true
  principalRemarks?: true
  rank?: true
  pdfUrl?: true
  generatedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ReportCardMaxAggregateInputType = {
  id?: true
  studentId?: true
  examSessionId?: true
  totalMaxMarks?: true
  totalObtained?: true
  percentage?: true
  cgpa?: true
  overallGrade?: true
  resultStatus?: true
  classRank?: true
  gradeRank?: true
  attendancePercent?: true
  conductGrade?: true
  remarks?: true
  principalRemarks?: true
  rank?: true
  pdfUrl?: true
  generatedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ReportCardCountAggregateInputType = {
  id?: true
  studentId?: true
  examSessionId?: true
  totalMaxMarks?: true
  totalObtained?: true
  percentage?: true
  cgpa?: true
  overallGrade?: true
  resultStatus?: true
  classRank?: true
  gradeRank?: true
  attendancePercent?: true
  conductGrade?: true
  remarks?: true
  principalRemarks?: true
  rank?: true
  pdfUrl?: true
  generatedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ReportCardAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ReportCard to aggregate.
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportCards to fetch.
   */
  orderBy?: Prisma.ReportCardOrderByWithRelationInput | Prisma.ReportCardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ReportCardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportCards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportCards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ReportCards
  **/
  _count?: true | ReportCardCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ReportCardAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ReportCardSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ReportCardMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ReportCardMaxAggregateInputType
}

export type GetReportCardAggregateType<T extends ReportCardAggregateArgs> = {
      [P in keyof T & keyof AggregateReportCard]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReportCard[P]>
    : Prisma.GetScalarType<T[P], AggregateReportCard[P]>
}




export type ReportCardGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReportCardWhereInput
  orderBy?: Prisma.ReportCardOrderByWithAggregationInput | Prisma.ReportCardOrderByWithAggregationInput[]
  by: Prisma.ReportCardScalarFieldEnum[] | Prisma.ReportCardScalarFieldEnum
  having?: Prisma.ReportCardScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReportCardCountAggregateInputType | true
  _avg?: ReportCardAvgAggregateInputType
  _sum?: ReportCardSumAggregateInputType
  _min?: ReportCardMinAggregateInputType
  _max?: ReportCardMaxAggregateInputType
}

export type ReportCardGroupByOutputType = {
  id: string
  studentId: string
  examSessionId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank: number | null
  gradeRank: number | null
  attendancePercent: number | null
  conductGrade: string | null
  remarks: string | null
  principalRemarks: string | null
  rank: number | null
  pdfUrl: string | null
  generatedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ReportCardCountAggregateOutputType | null
  _avg: ReportCardAvgAggregateOutputType | null
  _sum: ReportCardSumAggregateOutputType | null
  _min: ReportCardMinAggregateOutputType | null
  _max: ReportCardMaxAggregateOutputType | null
}

type GetReportCardGroupByPayload<T extends ReportCardGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReportCardGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ReportCardGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportCardGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportCardGroupByOutputType[P]>
      }
    >
  >



export type ReportCardWhereInput = {
  AND?: Prisma.ReportCardWhereInput | Prisma.ReportCardWhereInput[]
  OR?: Prisma.ReportCardWhereInput[]
  NOT?: Prisma.ReportCardWhereInput | Prisma.ReportCardWhereInput[]
  id?: Prisma.StringFilter<"ReportCard"> | string
  studentId?: Prisma.StringFilter<"ReportCard"> | string
  examSessionId?: Prisma.StringFilter<"ReportCard"> | string
  totalMaxMarks?: Prisma.FloatFilter<"ReportCard"> | number
  totalObtained?: Prisma.FloatFilter<"ReportCard"> | number
  percentage?: Prisma.FloatFilter<"ReportCard"> | number
  cgpa?: Prisma.FloatNullableFilter<"ReportCard"> | number | null
  overallGrade?: Prisma.StringFilter<"ReportCard"> | string
  resultStatus?: Prisma.EnumResultStatusFilter<"ReportCard"> | $Enums.ResultStatus
  classRank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  gradeRank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  attendancePercent?: Prisma.FloatNullableFilter<"ReportCard"> | number | null
  conductGrade?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  remarks?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  principalRemarks?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  rank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  pdfUrl?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  generatedAt?: Prisma.DateTimeNullableFilter<"ReportCard"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ReportCard"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ReportCard"> | Date | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  examSession?: Prisma.XOR<Prisma.ExamSessionScalarRelationFilter, Prisma.ExamSessionWhereInput>
}

export type ReportCardOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrderInput | Prisma.SortOrder
  overallGrade?: Prisma.SortOrder
  resultStatus?: Prisma.SortOrder
  classRank?: Prisma.SortOrderInput | Prisma.SortOrder
  gradeRank?: Prisma.SortOrderInput | Prisma.SortOrder
  attendancePercent?: Prisma.SortOrderInput | Prisma.SortOrder
  conductGrade?: Prisma.SortOrderInput | Prisma.SortOrder
  remarks?: Prisma.SortOrderInput | Prisma.SortOrder
  principalRemarks?: Prisma.SortOrderInput | Prisma.SortOrder
  rank?: Prisma.SortOrderInput | Prisma.SortOrder
  pdfUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  student?: Prisma.StudentOrderByWithRelationInput
  examSession?: Prisma.ExamSessionOrderByWithRelationInput
}

export type ReportCardWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  studentId_examSessionId?: Prisma.ReportCardStudentIdExamSessionIdCompoundUniqueInput
  AND?: Prisma.ReportCardWhereInput | Prisma.ReportCardWhereInput[]
  OR?: Prisma.ReportCardWhereInput[]
  NOT?: Prisma.ReportCardWhereInput | Prisma.ReportCardWhereInput[]
  studentId?: Prisma.StringFilter<"ReportCard"> | string
  examSessionId?: Prisma.StringFilter<"ReportCard"> | string
  totalMaxMarks?: Prisma.FloatFilter<"ReportCard"> | number
  totalObtained?: Prisma.FloatFilter<"ReportCard"> | number
  percentage?: Prisma.FloatFilter<"ReportCard"> | number
  cgpa?: Prisma.FloatNullableFilter<"ReportCard"> | number | null
  overallGrade?: Prisma.StringFilter<"ReportCard"> | string
  resultStatus?: Prisma.EnumResultStatusFilter<"ReportCard"> | $Enums.ResultStatus
  classRank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  gradeRank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  attendancePercent?: Prisma.FloatNullableFilter<"ReportCard"> | number | null
  conductGrade?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  remarks?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  principalRemarks?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  rank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  pdfUrl?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  generatedAt?: Prisma.DateTimeNullableFilter<"ReportCard"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ReportCard"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ReportCard"> | Date | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  examSession?: Prisma.XOR<Prisma.ExamSessionScalarRelationFilter, Prisma.ExamSessionWhereInput>
}, "id" | "studentId_examSessionId">

export type ReportCardOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrderInput | Prisma.SortOrder
  overallGrade?: Prisma.SortOrder
  resultStatus?: Prisma.SortOrder
  classRank?: Prisma.SortOrderInput | Prisma.SortOrder
  gradeRank?: Prisma.SortOrderInput | Prisma.SortOrder
  attendancePercent?: Prisma.SortOrderInput | Prisma.SortOrder
  conductGrade?: Prisma.SortOrderInput | Prisma.SortOrder
  remarks?: Prisma.SortOrderInput | Prisma.SortOrder
  principalRemarks?: Prisma.SortOrderInput | Prisma.SortOrder
  rank?: Prisma.SortOrderInput | Prisma.SortOrder
  pdfUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ReportCardCountOrderByAggregateInput
  _avg?: Prisma.ReportCardAvgOrderByAggregateInput
  _max?: Prisma.ReportCardMaxOrderByAggregateInput
  _min?: Prisma.ReportCardMinOrderByAggregateInput
  _sum?: Prisma.ReportCardSumOrderByAggregateInput
}

export type ReportCardScalarWhereWithAggregatesInput = {
  AND?: Prisma.ReportCardScalarWhereWithAggregatesInput | Prisma.ReportCardScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReportCardScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ReportCardScalarWhereWithAggregatesInput | Prisma.ReportCardScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ReportCard"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"ReportCard"> | string
  examSessionId?: Prisma.StringWithAggregatesFilter<"ReportCard"> | string
  totalMaxMarks?: Prisma.FloatWithAggregatesFilter<"ReportCard"> | number
  totalObtained?: Prisma.FloatWithAggregatesFilter<"ReportCard"> | number
  percentage?: Prisma.FloatWithAggregatesFilter<"ReportCard"> | number
  cgpa?: Prisma.FloatNullableWithAggregatesFilter<"ReportCard"> | number | null
  overallGrade?: Prisma.StringWithAggregatesFilter<"ReportCard"> | string
  resultStatus?: Prisma.EnumResultStatusWithAggregatesFilter<"ReportCard"> | $Enums.ResultStatus
  classRank?: Prisma.IntNullableWithAggregatesFilter<"ReportCard"> | number | null
  gradeRank?: Prisma.IntNullableWithAggregatesFilter<"ReportCard"> | number | null
  attendancePercent?: Prisma.FloatNullableWithAggregatesFilter<"ReportCard"> | number | null
  conductGrade?: Prisma.StringNullableWithAggregatesFilter<"ReportCard"> | string | null
  remarks?: Prisma.StringNullableWithAggregatesFilter<"ReportCard"> | string | null
  principalRemarks?: Prisma.StringNullableWithAggregatesFilter<"ReportCard"> | string | null
  rank?: Prisma.IntNullableWithAggregatesFilter<"ReportCard"> | number | null
  pdfUrl?: Prisma.StringNullableWithAggregatesFilter<"ReportCard"> | string | null
  generatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ReportCard"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ReportCard"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ReportCard"> | Date | string
}

export type ReportCardCreateInput = {
  id?: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutReportCardInput
  examSession: Prisma.ExamSessionCreateNestedOneWithoutReportCardsInput
}

export type ReportCardUncheckedCreateInput = {
  id?: string
  studentId: string
  examSessionId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCardUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutReportCardNestedInput
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutReportCardsNestedInput
}

export type ReportCardUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCardCreateManyInput = {
  id?: string
  studentId: string
  examSessionId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCardUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCardUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCardListRelationFilter = {
  every?: Prisma.ReportCardWhereInput
  some?: Prisma.ReportCardWhereInput
  none?: Prisma.ReportCardWhereInput
}

export type ReportCardOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReportCardStudentIdExamSessionIdCompoundUniqueInput = {
  studentId: string
  examSessionId: string
}

export type ReportCardCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrder
  overallGrade?: Prisma.SortOrder
  resultStatus?: Prisma.SortOrder
  classRank?: Prisma.SortOrder
  gradeRank?: Prisma.SortOrder
  attendancePercent?: Prisma.SortOrder
  conductGrade?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  principalRemarks?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportCardAvgOrderByAggregateInput = {
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrder
  classRank?: Prisma.SortOrder
  gradeRank?: Prisma.SortOrder
  attendancePercent?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ReportCardMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrder
  overallGrade?: Prisma.SortOrder
  resultStatus?: Prisma.SortOrder
  classRank?: Prisma.SortOrder
  gradeRank?: Prisma.SortOrder
  attendancePercent?: Prisma.SortOrder
  conductGrade?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  principalRemarks?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportCardMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrder
  overallGrade?: Prisma.SortOrder
  resultStatus?: Prisma.SortOrder
  classRank?: Prisma.SortOrder
  gradeRank?: Prisma.SortOrder
  attendancePercent?: Prisma.SortOrder
  conductGrade?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  principalRemarks?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportCardSumOrderByAggregateInput = {
  totalMaxMarks?: Prisma.SortOrder
  totalObtained?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  cgpa?: Prisma.SortOrder
  classRank?: Prisma.SortOrder
  gradeRank?: Prisma.SortOrder
  attendancePercent?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ReportCardCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutStudentInput, Prisma.ReportCardUncheckedCreateWithoutStudentInput> | Prisma.ReportCardCreateWithoutStudentInput[] | Prisma.ReportCardUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutStudentInput | Prisma.ReportCardCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ReportCardCreateManyStudentInputEnvelope
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
}

export type ReportCardUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutStudentInput, Prisma.ReportCardUncheckedCreateWithoutStudentInput> | Prisma.ReportCardCreateWithoutStudentInput[] | Prisma.ReportCardUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutStudentInput | Prisma.ReportCardCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ReportCardCreateManyStudentInputEnvelope
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
}

export type ReportCardUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutStudentInput, Prisma.ReportCardUncheckedCreateWithoutStudentInput> | Prisma.ReportCardCreateWithoutStudentInput[] | Prisma.ReportCardUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutStudentInput | Prisma.ReportCardCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ReportCardUpsertWithWhereUniqueWithoutStudentInput | Prisma.ReportCardUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ReportCardCreateManyStudentInputEnvelope
  set?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  disconnect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  delete?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  update?: Prisma.ReportCardUpdateWithWhereUniqueWithoutStudentInput | Prisma.ReportCardUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ReportCardUpdateManyWithWhereWithoutStudentInput | Prisma.ReportCardUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ReportCardScalarWhereInput | Prisma.ReportCardScalarWhereInput[]
}

export type ReportCardUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutStudentInput, Prisma.ReportCardUncheckedCreateWithoutStudentInput> | Prisma.ReportCardCreateWithoutStudentInput[] | Prisma.ReportCardUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutStudentInput | Prisma.ReportCardCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ReportCardUpsertWithWhereUniqueWithoutStudentInput | Prisma.ReportCardUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ReportCardCreateManyStudentInputEnvelope
  set?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  disconnect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  delete?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  update?: Prisma.ReportCardUpdateWithWhereUniqueWithoutStudentInput | Prisma.ReportCardUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ReportCardUpdateManyWithWhereWithoutStudentInput | Prisma.ReportCardUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ReportCardScalarWhereInput | Prisma.ReportCardScalarWhereInput[]
}

export type ReportCardCreateNestedManyWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutExamSessionInput, Prisma.ReportCardUncheckedCreateWithoutExamSessionInput> | Prisma.ReportCardCreateWithoutExamSessionInput[] | Prisma.ReportCardUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutExamSessionInput | Prisma.ReportCardCreateOrConnectWithoutExamSessionInput[]
  createMany?: Prisma.ReportCardCreateManyExamSessionInputEnvelope
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
}

export type ReportCardUncheckedCreateNestedManyWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutExamSessionInput, Prisma.ReportCardUncheckedCreateWithoutExamSessionInput> | Prisma.ReportCardCreateWithoutExamSessionInput[] | Prisma.ReportCardUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutExamSessionInput | Prisma.ReportCardCreateOrConnectWithoutExamSessionInput[]
  createMany?: Prisma.ReportCardCreateManyExamSessionInputEnvelope
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
}

export type ReportCardUpdateManyWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutExamSessionInput, Prisma.ReportCardUncheckedCreateWithoutExamSessionInput> | Prisma.ReportCardCreateWithoutExamSessionInput[] | Prisma.ReportCardUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutExamSessionInput | Prisma.ReportCardCreateOrConnectWithoutExamSessionInput[]
  upsert?: Prisma.ReportCardUpsertWithWhereUniqueWithoutExamSessionInput | Prisma.ReportCardUpsertWithWhereUniqueWithoutExamSessionInput[]
  createMany?: Prisma.ReportCardCreateManyExamSessionInputEnvelope
  set?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  disconnect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  delete?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  update?: Prisma.ReportCardUpdateWithWhereUniqueWithoutExamSessionInput | Prisma.ReportCardUpdateWithWhereUniqueWithoutExamSessionInput[]
  updateMany?: Prisma.ReportCardUpdateManyWithWhereWithoutExamSessionInput | Prisma.ReportCardUpdateManyWithWhereWithoutExamSessionInput[]
  deleteMany?: Prisma.ReportCardScalarWhereInput | Prisma.ReportCardScalarWhereInput[]
}

export type ReportCardUncheckedUpdateManyWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCardCreateWithoutExamSessionInput, Prisma.ReportCardUncheckedCreateWithoutExamSessionInput> | Prisma.ReportCardCreateWithoutExamSessionInput[] | Prisma.ReportCardUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ReportCardCreateOrConnectWithoutExamSessionInput | Prisma.ReportCardCreateOrConnectWithoutExamSessionInput[]
  upsert?: Prisma.ReportCardUpsertWithWhereUniqueWithoutExamSessionInput | Prisma.ReportCardUpsertWithWhereUniqueWithoutExamSessionInput[]
  createMany?: Prisma.ReportCardCreateManyExamSessionInputEnvelope
  set?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  disconnect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  delete?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  connect?: Prisma.ReportCardWhereUniqueInput | Prisma.ReportCardWhereUniqueInput[]
  update?: Prisma.ReportCardUpdateWithWhereUniqueWithoutExamSessionInput | Prisma.ReportCardUpdateWithWhereUniqueWithoutExamSessionInput[]
  updateMany?: Prisma.ReportCardUpdateManyWithWhereWithoutExamSessionInput | Prisma.ReportCardUpdateManyWithWhereWithoutExamSessionInput[]
  deleteMany?: Prisma.ReportCardScalarWhereInput | Prisma.ReportCardScalarWhereInput[]
}

export type EnumResultStatusFieldUpdateOperationsInput = {
  set?: $Enums.ResultStatus
}

export type ReportCardCreateWithoutStudentInput = {
  id?: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutReportCardsInput
}

export type ReportCardUncheckedCreateWithoutStudentInput = {
  id?: string
  examSessionId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCardCreateOrConnectWithoutStudentInput = {
  where: Prisma.ReportCardWhereUniqueInput
  create: Prisma.XOR<Prisma.ReportCardCreateWithoutStudentInput, Prisma.ReportCardUncheckedCreateWithoutStudentInput>
}

export type ReportCardCreateManyStudentInputEnvelope = {
  data: Prisma.ReportCardCreateManyStudentInput | Prisma.ReportCardCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type ReportCardUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ReportCardWhereUniqueInput
  update: Prisma.XOR<Prisma.ReportCardUpdateWithoutStudentInput, Prisma.ReportCardUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.ReportCardCreateWithoutStudentInput, Prisma.ReportCardUncheckedCreateWithoutStudentInput>
}

export type ReportCardUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ReportCardWhereUniqueInput
  data: Prisma.XOR<Prisma.ReportCardUpdateWithoutStudentInput, Prisma.ReportCardUncheckedUpdateWithoutStudentInput>
}

export type ReportCardUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ReportCardScalarWhereInput
  data: Prisma.XOR<Prisma.ReportCardUpdateManyMutationInput, Prisma.ReportCardUncheckedUpdateManyWithoutStudentInput>
}

export type ReportCardScalarWhereInput = {
  AND?: Prisma.ReportCardScalarWhereInput | Prisma.ReportCardScalarWhereInput[]
  OR?: Prisma.ReportCardScalarWhereInput[]
  NOT?: Prisma.ReportCardScalarWhereInput | Prisma.ReportCardScalarWhereInput[]
  id?: Prisma.StringFilter<"ReportCard"> | string
  studentId?: Prisma.StringFilter<"ReportCard"> | string
  examSessionId?: Prisma.StringFilter<"ReportCard"> | string
  totalMaxMarks?: Prisma.FloatFilter<"ReportCard"> | number
  totalObtained?: Prisma.FloatFilter<"ReportCard"> | number
  percentage?: Prisma.FloatFilter<"ReportCard"> | number
  cgpa?: Prisma.FloatNullableFilter<"ReportCard"> | number | null
  overallGrade?: Prisma.StringFilter<"ReportCard"> | string
  resultStatus?: Prisma.EnumResultStatusFilter<"ReportCard"> | $Enums.ResultStatus
  classRank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  gradeRank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  attendancePercent?: Prisma.FloatNullableFilter<"ReportCard"> | number | null
  conductGrade?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  remarks?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  principalRemarks?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  rank?: Prisma.IntNullableFilter<"ReportCard"> | number | null
  pdfUrl?: Prisma.StringNullableFilter<"ReportCard"> | string | null
  generatedAt?: Prisma.DateTimeNullableFilter<"ReportCard"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ReportCard"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ReportCard"> | Date | string
}

export type ReportCardCreateWithoutExamSessionInput = {
  id?: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutReportCardInput
}

export type ReportCardUncheckedCreateWithoutExamSessionInput = {
  id?: string
  studentId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCardCreateOrConnectWithoutExamSessionInput = {
  where: Prisma.ReportCardWhereUniqueInput
  create: Prisma.XOR<Prisma.ReportCardCreateWithoutExamSessionInput, Prisma.ReportCardUncheckedCreateWithoutExamSessionInput>
}

export type ReportCardCreateManyExamSessionInputEnvelope = {
  data: Prisma.ReportCardCreateManyExamSessionInput | Prisma.ReportCardCreateManyExamSessionInput[]
  skipDuplicates?: boolean
}

export type ReportCardUpsertWithWhereUniqueWithoutExamSessionInput = {
  where: Prisma.ReportCardWhereUniqueInput
  update: Prisma.XOR<Prisma.ReportCardUpdateWithoutExamSessionInput, Prisma.ReportCardUncheckedUpdateWithoutExamSessionInput>
  create: Prisma.XOR<Prisma.ReportCardCreateWithoutExamSessionInput, Prisma.ReportCardUncheckedCreateWithoutExamSessionInput>
}

export type ReportCardUpdateWithWhereUniqueWithoutExamSessionInput = {
  where: Prisma.ReportCardWhereUniqueInput
  data: Prisma.XOR<Prisma.ReportCardUpdateWithoutExamSessionInput, Prisma.ReportCardUncheckedUpdateWithoutExamSessionInput>
}

export type ReportCardUpdateManyWithWhereWithoutExamSessionInput = {
  where: Prisma.ReportCardScalarWhereInput
  data: Prisma.XOR<Prisma.ReportCardUpdateManyMutationInput, Prisma.ReportCardUncheckedUpdateManyWithoutExamSessionInput>
}

export type ReportCardCreateManyStudentInput = {
  id?: string
  examSessionId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCardUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutReportCardsNestedInput
}

export type ReportCardUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCardUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCardCreateManyExamSessionInput = {
  id?: string
  studentId: string
  totalMaxMarks: number
  totalObtained: number
  percentage: number
  cgpa?: number | null
  overallGrade: string
  resultStatus: $Enums.ResultStatus
  classRank?: number | null
  gradeRank?: number | null
  attendancePercent?: number | null
  conductGrade?: string | null
  remarks?: string | null
  principalRemarks?: string | null
  rank?: number | null
  pdfUrl?: string | null
  generatedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCardUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutReportCardNestedInput
}

export type ReportCardUncheckedUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCardUncheckedUpdateManyWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  totalMaxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  totalObtained?: Prisma.FloatFieldUpdateOperationsInput | number
  percentage?: Prisma.FloatFieldUpdateOperationsInput | number
  cgpa?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  overallGrade?: Prisma.StringFieldUpdateOperationsInput | string
  resultStatus?: Prisma.EnumResultStatusFieldUpdateOperationsInput | $Enums.ResultStatus
  classRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gradeRank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  attendancePercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  conductGrade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  principalRemarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pdfUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ReportCardSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examSessionId?: boolean
  totalMaxMarks?: boolean
  totalObtained?: boolean
  percentage?: boolean
  cgpa?: boolean
  overallGrade?: boolean
  resultStatus?: boolean
  classRank?: boolean
  gradeRank?: boolean
  attendancePercent?: boolean
  conductGrade?: boolean
  remarks?: boolean
  principalRemarks?: boolean
  rank?: boolean
  pdfUrl?: boolean
  generatedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reportCard"]>

export type ReportCardSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examSessionId?: boolean
  totalMaxMarks?: boolean
  totalObtained?: boolean
  percentage?: boolean
  cgpa?: boolean
  overallGrade?: boolean
  resultStatus?: boolean
  classRank?: boolean
  gradeRank?: boolean
  attendancePercent?: boolean
  conductGrade?: boolean
  remarks?: boolean
  principalRemarks?: boolean
  rank?: boolean
  pdfUrl?: boolean
  generatedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reportCard"]>

export type ReportCardSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examSessionId?: boolean
  totalMaxMarks?: boolean
  totalObtained?: boolean
  percentage?: boolean
  cgpa?: boolean
  overallGrade?: boolean
  resultStatus?: boolean
  classRank?: boolean
  gradeRank?: boolean
  attendancePercent?: boolean
  conductGrade?: boolean
  remarks?: boolean
  principalRemarks?: boolean
  rank?: boolean
  pdfUrl?: boolean
  generatedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reportCard"]>

export type ReportCardSelectScalar = {
  id?: boolean
  studentId?: boolean
  examSessionId?: boolean
  totalMaxMarks?: boolean
  totalObtained?: boolean
  percentage?: boolean
  cgpa?: boolean
  overallGrade?: boolean
  resultStatus?: boolean
  classRank?: boolean
  gradeRank?: boolean
  attendancePercent?: boolean
  conductGrade?: boolean
  remarks?: boolean
  principalRemarks?: boolean
  rank?: boolean
  pdfUrl?: boolean
  generatedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ReportCardOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "studentId" | "examSessionId" | "totalMaxMarks" | "totalObtained" | "percentage" | "cgpa" | "overallGrade" | "resultStatus" | "classRank" | "gradeRank" | "attendancePercent" | "conductGrade" | "remarks" | "principalRemarks" | "rank" | "pdfUrl" | "generatedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["reportCard"]>
export type ReportCardInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
}
export type ReportCardIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
}
export type ReportCardIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
}

export type $ReportCardPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ReportCard"
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>
    examSession: Prisma.$ExamSessionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    studentId: string
    examSessionId: string
    totalMaxMarks: number
    totalObtained: number
    percentage: number
    cgpa: number | null
    overallGrade: string
    resultStatus: $Enums.ResultStatus
    classRank: number | null
    gradeRank: number | null
    attendancePercent: number | null
    conductGrade: string | null
    remarks: string | null
    principalRemarks: string | null
    rank: number | null
    pdfUrl: string | null
    generatedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["reportCard"]>
  composites: {}
}

export type ReportCardGetPayload<S extends boolean | null | undefined | ReportCardDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ReportCardPayload, S>

export type ReportCardCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ReportCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ReportCardCountAggregateInputType | true
  }

export interface ReportCardDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportCard'], meta: { name: 'ReportCard' } }
  /**
   * Find zero or one ReportCard that matches the filter.
   * @param {ReportCardFindUniqueArgs} args - Arguments to find a ReportCard
   * @example
   * // Get one ReportCard
   * const reportCard = await prisma.reportCard.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportCardFindUniqueArgs>(args: Prisma.SelectSubset<T, ReportCardFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ReportCard that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportCardFindUniqueOrThrowArgs} args - Arguments to find a ReportCard
   * @example
   * // Get one ReportCard
   * const reportCard = await prisma.reportCard.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportCardFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ReportCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ReportCard that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardFindFirstArgs} args - Arguments to find a ReportCard
   * @example
   * // Get one ReportCard
   * const reportCard = await prisma.reportCard.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportCardFindFirstArgs>(args?: Prisma.SelectSubset<T, ReportCardFindFirstArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ReportCard that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardFindFirstOrThrowArgs} args - Arguments to find a ReportCard
   * @example
   * // Get one ReportCard
   * const reportCard = await prisma.reportCard.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportCardFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ReportCardFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ReportCards that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ReportCards
   * const reportCards = await prisma.reportCard.findMany()
   * 
   * // Get first 10 ReportCards
   * const reportCards = await prisma.reportCard.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const reportCardWithIdOnly = await prisma.reportCard.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ReportCardFindManyArgs>(args?: Prisma.SelectSubset<T, ReportCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ReportCard.
   * @param {ReportCardCreateArgs} args - Arguments to create a ReportCard.
   * @example
   * // Create one ReportCard
   * const ReportCard = await prisma.reportCard.create({
   *   data: {
   *     // ... data to create a ReportCard
   *   }
   * })
   * 
   */
  create<T extends ReportCardCreateArgs>(args: Prisma.SelectSubset<T, ReportCardCreateArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ReportCards.
   * @param {ReportCardCreateManyArgs} args - Arguments to create many ReportCards.
   * @example
   * // Create many ReportCards
   * const reportCard = await prisma.reportCard.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ReportCardCreateManyArgs>(args?: Prisma.SelectSubset<T, ReportCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ReportCards and returns the data saved in the database.
   * @param {ReportCardCreateManyAndReturnArgs} args - Arguments to create many ReportCards.
   * @example
   * // Create many ReportCards
   * const reportCard = await prisma.reportCard.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ReportCards and only return the `id`
   * const reportCardWithIdOnly = await prisma.reportCard.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ReportCardCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ReportCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ReportCard.
   * @param {ReportCardDeleteArgs} args - Arguments to delete one ReportCard.
   * @example
   * // Delete one ReportCard
   * const ReportCard = await prisma.reportCard.delete({
   *   where: {
   *     // ... filter to delete one ReportCard
   *   }
   * })
   * 
   */
  delete<T extends ReportCardDeleteArgs>(args: Prisma.SelectSubset<T, ReportCardDeleteArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ReportCard.
   * @param {ReportCardUpdateArgs} args - Arguments to update one ReportCard.
   * @example
   * // Update one ReportCard
   * const reportCard = await prisma.reportCard.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ReportCardUpdateArgs>(args: Prisma.SelectSubset<T, ReportCardUpdateArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ReportCards.
   * @param {ReportCardDeleteManyArgs} args - Arguments to filter ReportCards to delete.
   * @example
   * // Delete a few ReportCards
   * const { count } = await prisma.reportCard.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ReportCardDeleteManyArgs>(args?: Prisma.SelectSubset<T, ReportCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReportCards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ReportCards
   * const reportCard = await prisma.reportCard.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ReportCardUpdateManyArgs>(args: Prisma.SelectSubset<T, ReportCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReportCards and returns the data updated in the database.
   * @param {ReportCardUpdateManyAndReturnArgs} args - Arguments to update many ReportCards.
   * @example
   * // Update many ReportCards
   * const reportCard = await prisma.reportCard.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ReportCards and only return the `id`
   * const reportCardWithIdOnly = await prisma.reportCard.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ReportCardUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ReportCardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ReportCard.
   * @param {ReportCardUpsertArgs} args - Arguments to update or create a ReportCard.
   * @example
   * // Update or create a ReportCard
   * const reportCard = await prisma.reportCard.upsert({
   *   create: {
   *     // ... data to create a ReportCard
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ReportCard we want to update
   *   }
   * })
   */
  upsert<T extends ReportCardUpsertArgs>(args: Prisma.SelectSubset<T, ReportCardUpsertArgs<ExtArgs>>): Prisma.Prisma__ReportCardClient<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ReportCards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardCountArgs} args - Arguments to filter ReportCards to count.
   * @example
   * // Count the number of ReportCards
   * const count = await prisma.reportCard.count({
   *   where: {
   *     // ... the filter for the ReportCards we want to count
   *   }
   * })
  **/
  count<T extends ReportCardCountArgs>(
    args?: Prisma.Subset<T, ReportCardCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReportCardCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ReportCard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ReportCardAggregateArgs>(args: Prisma.Subset<T, ReportCardAggregateArgs>): Prisma.PrismaPromise<GetReportCardAggregateType<T>>

  /**
   * Group by ReportCard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCardGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ReportCardGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportCardGroupByArgs['orderBy'] }
      : { orderBy?: ReportCardGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ReportCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ReportCard model
 */
readonly fields: ReportCardFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ReportCard.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportCardClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  examSession<T extends Prisma.ExamSessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExamSessionDefaultArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ReportCard model
 */
export interface ReportCardFieldRefs {
  readonly id: Prisma.FieldRef<"ReportCard", 'String'>
  readonly studentId: Prisma.FieldRef<"ReportCard", 'String'>
  readonly examSessionId: Prisma.FieldRef<"ReportCard", 'String'>
  readonly totalMaxMarks: Prisma.FieldRef<"ReportCard", 'Float'>
  readonly totalObtained: Prisma.FieldRef<"ReportCard", 'Float'>
  readonly percentage: Prisma.FieldRef<"ReportCard", 'Float'>
  readonly cgpa: Prisma.FieldRef<"ReportCard", 'Float'>
  readonly overallGrade: Prisma.FieldRef<"ReportCard", 'String'>
  readonly resultStatus: Prisma.FieldRef<"ReportCard", 'ResultStatus'>
  readonly classRank: Prisma.FieldRef<"ReportCard", 'Int'>
  readonly gradeRank: Prisma.FieldRef<"ReportCard", 'Int'>
  readonly attendancePercent: Prisma.FieldRef<"ReportCard", 'Float'>
  readonly conductGrade: Prisma.FieldRef<"ReportCard", 'String'>
  readonly remarks: Prisma.FieldRef<"ReportCard", 'String'>
  readonly principalRemarks: Prisma.FieldRef<"ReportCard", 'String'>
  readonly rank: Prisma.FieldRef<"ReportCard", 'Int'>
  readonly pdfUrl: Prisma.FieldRef<"ReportCard", 'String'>
  readonly generatedAt: Prisma.FieldRef<"ReportCard", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"ReportCard", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ReportCard", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ReportCard findUnique
 */
export type ReportCardFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * Filter, which ReportCard to fetch.
   */
  where: Prisma.ReportCardWhereUniqueInput
}

/**
 * ReportCard findUniqueOrThrow
 */
export type ReportCardFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * Filter, which ReportCard to fetch.
   */
  where: Prisma.ReportCardWhereUniqueInput
}

/**
 * ReportCard findFirst
 */
export type ReportCardFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * Filter, which ReportCard to fetch.
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportCards to fetch.
   */
  orderBy?: Prisma.ReportCardOrderByWithRelationInput | Prisma.ReportCardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ReportCards.
   */
  cursor?: Prisma.ReportCardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportCards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportCards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ReportCards.
   */
  distinct?: Prisma.ReportCardScalarFieldEnum | Prisma.ReportCardScalarFieldEnum[]
}

/**
 * ReportCard findFirstOrThrow
 */
export type ReportCardFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * Filter, which ReportCard to fetch.
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportCards to fetch.
   */
  orderBy?: Prisma.ReportCardOrderByWithRelationInput | Prisma.ReportCardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ReportCards.
   */
  cursor?: Prisma.ReportCardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportCards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportCards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ReportCards.
   */
  distinct?: Prisma.ReportCardScalarFieldEnum | Prisma.ReportCardScalarFieldEnum[]
}

/**
 * ReportCard findMany
 */
export type ReportCardFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * Filter, which ReportCards to fetch.
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportCards to fetch.
   */
  orderBy?: Prisma.ReportCardOrderByWithRelationInput | Prisma.ReportCardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ReportCards.
   */
  cursor?: Prisma.ReportCardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportCards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportCards.
   */
  skip?: number
  distinct?: Prisma.ReportCardScalarFieldEnum | Prisma.ReportCardScalarFieldEnum[]
}

/**
 * ReportCard create
 */
export type ReportCardCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * The data needed to create a ReportCard.
   */
  data: Prisma.XOR<Prisma.ReportCardCreateInput, Prisma.ReportCardUncheckedCreateInput>
}

/**
 * ReportCard createMany
 */
export type ReportCardCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ReportCards.
   */
  data: Prisma.ReportCardCreateManyInput | Prisma.ReportCardCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ReportCard createManyAndReturn
 */
export type ReportCardCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * The data used to create many ReportCards.
   */
  data: Prisma.ReportCardCreateManyInput | Prisma.ReportCardCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ReportCard update
 */
export type ReportCardUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * The data needed to update a ReportCard.
   */
  data: Prisma.XOR<Prisma.ReportCardUpdateInput, Prisma.ReportCardUncheckedUpdateInput>
  /**
   * Choose, which ReportCard to update.
   */
  where: Prisma.ReportCardWhereUniqueInput
}

/**
 * ReportCard updateMany
 */
export type ReportCardUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ReportCards.
   */
  data: Prisma.XOR<Prisma.ReportCardUpdateManyMutationInput, Prisma.ReportCardUncheckedUpdateManyInput>
  /**
   * Filter which ReportCards to update
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * Limit how many ReportCards to update.
   */
  limit?: number
}

/**
 * ReportCard updateManyAndReturn
 */
export type ReportCardUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * The data used to update ReportCards.
   */
  data: Prisma.XOR<Prisma.ReportCardUpdateManyMutationInput, Prisma.ReportCardUncheckedUpdateManyInput>
  /**
   * Filter which ReportCards to update
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * Limit how many ReportCards to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ReportCard upsert
 */
export type ReportCardUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * The filter to search for the ReportCard to update in case it exists.
   */
  where: Prisma.ReportCardWhereUniqueInput
  /**
   * In case the ReportCard found by the `where` argument doesn't exist, create a new ReportCard with this data.
   */
  create: Prisma.XOR<Prisma.ReportCardCreateInput, Prisma.ReportCardUncheckedCreateInput>
  /**
   * In case the ReportCard was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReportCardUpdateInput, Prisma.ReportCardUncheckedUpdateInput>
}

/**
 * ReportCard delete
 */
export type ReportCardDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  /**
   * Filter which ReportCard to delete.
   */
  where: Prisma.ReportCardWhereUniqueInput
}

/**
 * ReportCard deleteMany
 */
export type ReportCardDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ReportCards to delete
   */
  where?: Prisma.ReportCardWhereInput
  /**
   * Limit how many ReportCards to delete.
   */
  limit?: number
}

/**
 * ReportCard without action
 */
export type ReportCardDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
}
