
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `HallTicket` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model HallTicket
 * 
 */
export type HallTicketModel = runtime.Types.Result.DefaultSelection<Prisma.$HallTicketPayload>

export type AggregateHallTicket = {
  _count: HallTicketCountAggregateOutputType | null
  _min: HallTicketMinAggregateOutputType | null
  _max: HallTicketMaxAggregateOutputType | null
}

export type HallTicketMinAggregateOutputType = {
  id: string | null
  studentId: string | null
  examId: string | null
  examSessionId: string | null
  pdfUrl: string | null
  qrCode: string | null
  generatedAt: Date | null
  downloadedAt: Date | null
  expiryDate: Date | null
  organizationId: string | null
}

export type HallTicketMaxAggregateOutputType = {
  id: string | null
  studentId: string | null
  examId: string | null
  examSessionId: string | null
  pdfUrl: string | null
  qrCode: string | null
  generatedAt: Date | null
  downloadedAt: Date | null
  expiryDate: Date | null
  organizationId: string | null
}

export type HallTicketCountAggregateOutputType = {
  id: number
  studentId: number
  examId: number
  examSessionId: number
  pdfUrl: number
  qrCode: number
  generatedAt: number
  downloadedAt: number
  expiryDate: number
  organizationId: number
  _all: number
}


export type HallTicketMinAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  examSessionId?: true
  pdfUrl?: true
  qrCode?: true
  generatedAt?: true
  downloadedAt?: true
  expiryDate?: true
  organizationId?: true
}

export type HallTicketMaxAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  examSessionId?: true
  pdfUrl?: true
  qrCode?: true
  generatedAt?: true
  downloadedAt?: true
  expiryDate?: true
  organizationId?: true
}

export type HallTicketCountAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  examSessionId?: true
  pdfUrl?: true
  qrCode?: true
  generatedAt?: true
  downloadedAt?: true
  expiryDate?: true
  organizationId?: true
  _all?: true
}

export type HallTicketAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HallTicket to aggregate.
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HallTickets to fetch.
   */
  orderBy?: Prisma.HallTicketOrderByWithRelationInput | Prisma.HallTicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HallTicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HallTickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HallTickets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned HallTickets
  **/
  _count?: true | HallTicketCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HallTicketMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HallTicketMaxAggregateInputType
}

export type GetHallTicketAggregateType<T extends HallTicketAggregateArgs> = {
      [P in keyof T & keyof AggregateHallTicket]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHallTicket[P]>
    : Prisma.GetScalarType<T[P], AggregateHallTicket[P]>
}




export type HallTicketGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HallTicketWhereInput
  orderBy?: Prisma.HallTicketOrderByWithAggregationInput | Prisma.HallTicketOrderByWithAggregationInput[]
  by: Prisma.HallTicketScalarFieldEnum[] | Prisma.HallTicketScalarFieldEnum
  having?: Prisma.HallTicketScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HallTicketCountAggregateInputType | true
  _min?: HallTicketMinAggregateInputType
  _max?: HallTicketMaxAggregateInputType
}

export type HallTicketGroupByOutputType = {
  id: string
  studentId: string
  examId: string | null
  examSessionId: string | null
  pdfUrl: string
  qrCode: string | null
  generatedAt: Date
  downloadedAt: Date | null
  expiryDate: Date | null
  organizationId: string
  _count: HallTicketCountAggregateOutputType | null
  _min: HallTicketMinAggregateOutputType | null
  _max: HallTicketMaxAggregateOutputType | null
}

type GetHallTicketGroupByPayload<T extends HallTicketGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HallTicketGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HallTicketGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HallTicketGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HallTicketGroupByOutputType[P]>
      }
    >
  >



export type HallTicketWhereInput = {
  AND?: Prisma.HallTicketWhereInput | Prisma.HallTicketWhereInput[]
  OR?: Prisma.HallTicketWhereInput[]
  NOT?: Prisma.HallTicketWhereInput | Prisma.HallTicketWhereInput[]
  id?: Prisma.StringFilter<"HallTicket"> | string
  studentId?: Prisma.StringFilter<"HallTicket"> | string
  examId?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  examSessionId?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  pdfUrl?: Prisma.StringFilter<"HallTicket"> | string
  qrCode?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  generatedAt?: Prisma.DateTimeFilter<"HallTicket"> | Date | string
  downloadedAt?: Prisma.DateTimeNullableFilter<"HallTicket"> | Date | string | null
  expiryDate?: Prisma.DateTimeNullableFilter<"HallTicket"> | Date | string | null
  organizationId?: Prisma.StringFilter<"HallTicket"> | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamNullableScalarRelationFilter, Prisma.ExamWhereInput> | null
  examSession?: Prisma.XOR<Prisma.ExamSessionNullableScalarRelationFilter, Prisma.ExamSessionWhereInput> | null
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}

export type HallTicketOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrderInput | Prisma.SortOrder
  examSessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  qrCode?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  downloadedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  expiryDate?: Prisma.SortOrderInput | Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  student?: Prisma.StudentOrderByWithRelationInput
  exam?: Prisma.ExamOrderByWithRelationInput
  examSession?: Prisma.ExamSessionOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
}

export type HallTicketWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  studentId_examId?: Prisma.HallTicketStudentIdExamIdCompoundUniqueInput
  AND?: Prisma.HallTicketWhereInput | Prisma.HallTicketWhereInput[]
  OR?: Prisma.HallTicketWhereInput[]
  NOT?: Prisma.HallTicketWhereInput | Prisma.HallTicketWhereInput[]
  studentId?: Prisma.StringFilter<"HallTicket"> | string
  examId?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  examSessionId?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  pdfUrl?: Prisma.StringFilter<"HallTicket"> | string
  qrCode?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  generatedAt?: Prisma.DateTimeFilter<"HallTicket"> | Date | string
  downloadedAt?: Prisma.DateTimeNullableFilter<"HallTicket"> | Date | string | null
  expiryDate?: Prisma.DateTimeNullableFilter<"HallTicket"> | Date | string | null
  organizationId?: Prisma.StringFilter<"HallTicket"> | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamNullableScalarRelationFilter, Prisma.ExamWhereInput> | null
  examSession?: Prisma.XOR<Prisma.ExamSessionNullableScalarRelationFilter, Prisma.ExamSessionWhereInput> | null
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}, "id" | "studentId_examId">

export type HallTicketOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrderInput | Prisma.SortOrder
  examSessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  qrCode?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  downloadedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  expiryDate?: Prisma.SortOrderInput | Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  _count?: Prisma.HallTicketCountOrderByAggregateInput
  _max?: Prisma.HallTicketMaxOrderByAggregateInput
  _min?: Prisma.HallTicketMinOrderByAggregateInput
}

export type HallTicketScalarWhereWithAggregatesInput = {
  AND?: Prisma.HallTicketScalarWhereWithAggregatesInput | Prisma.HallTicketScalarWhereWithAggregatesInput[]
  OR?: Prisma.HallTicketScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HallTicketScalarWhereWithAggregatesInput | Prisma.HallTicketScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"HallTicket"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"HallTicket"> | string
  examId?: Prisma.StringNullableWithAggregatesFilter<"HallTicket"> | string | null
  examSessionId?: Prisma.StringNullableWithAggregatesFilter<"HallTicket"> | string | null
  pdfUrl?: Prisma.StringWithAggregatesFilter<"HallTicket"> | string
  qrCode?: Prisma.StringNullableWithAggregatesFilter<"HallTicket"> | string | null
  generatedAt?: Prisma.DateTimeWithAggregatesFilter<"HallTicket"> | Date | string
  downloadedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"HallTicket"> | Date | string | null
  expiryDate?: Prisma.DateTimeNullableWithAggregatesFilter<"HallTicket"> | Date | string | null
  organizationId?: Prisma.StringWithAggregatesFilter<"HallTicket"> | string
}

export type HallTicketCreateInput = {
  id?: string
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  student: Prisma.StudentCreateNestedOneWithoutHallTicketInput
  exam?: Prisma.ExamCreateNestedOneWithoutHallTicketsInput
  examSession?: Prisma.ExamSessionCreateNestedOneWithoutHallTicketsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutHallTicketInput
}

export type HallTicketUncheckedCreateInput = {
  id?: string
  studentId: string
  examId?: string | null
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  student?: Prisma.StudentUpdateOneRequiredWithoutHallTicketNestedInput
  exam?: Prisma.ExamUpdateOneWithoutHallTicketsNestedInput
  examSession?: Prisma.ExamSessionUpdateOneWithoutHallTicketsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutHallTicketNestedInput
}

export type HallTicketUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketCreateManyInput = {
  id?: string
  studentId: string
  examId?: string | null
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type HallTicketUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketListRelationFilter = {
  every?: Prisma.HallTicketWhereInput
  some?: Prisma.HallTicketWhereInput
  none?: Prisma.HallTicketWhereInput
}

export type HallTicketOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type HallTicketStudentIdExamIdCompoundUniqueInput = {
  studentId: string
  examId: string
}

export type HallTicketCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  qrCode?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  downloadedAt?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
}

export type HallTicketMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  qrCode?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  downloadedAt?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
}

export type HallTicketMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  pdfUrl?: Prisma.SortOrder
  qrCode?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  downloadedAt?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
}

export type HallTicketCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutOrganizationInput, Prisma.HallTicketUncheckedCreateWithoutOrganizationInput> | Prisma.HallTicketCreateWithoutOrganizationInput[] | Prisma.HallTicketUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutOrganizationInput | Prisma.HallTicketCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.HallTicketCreateManyOrganizationInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutOrganizationInput, Prisma.HallTicketUncheckedCreateWithoutOrganizationInput> | Prisma.HallTicketCreateWithoutOrganizationInput[] | Prisma.HallTicketUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutOrganizationInput | Prisma.HallTicketCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.HallTicketCreateManyOrganizationInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutOrganizationInput, Prisma.HallTicketUncheckedCreateWithoutOrganizationInput> | Prisma.HallTicketCreateWithoutOrganizationInput[] | Prisma.HallTicketUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutOrganizationInput | Prisma.HallTicketCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.HallTicketCreateManyOrganizationInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutOrganizationInput | Prisma.HallTicketUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutOrganizationInput, Prisma.HallTicketUncheckedCreateWithoutOrganizationInput> | Prisma.HallTicketCreateWithoutOrganizationInput[] | Prisma.HallTicketUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutOrganizationInput | Prisma.HallTicketCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.HallTicketCreateManyOrganizationInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutOrganizationInput | Prisma.HallTicketUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutStudentInput, Prisma.HallTicketUncheckedCreateWithoutStudentInput> | Prisma.HallTicketCreateWithoutStudentInput[] | Prisma.HallTicketUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutStudentInput | Prisma.HallTicketCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.HallTicketCreateManyStudentInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutStudentInput, Prisma.HallTicketUncheckedCreateWithoutStudentInput> | Prisma.HallTicketCreateWithoutStudentInput[] | Prisma.HallTicketUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutStudentInput | Prisma.HallTicketCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.HallTicketCreateManyStudentInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutStudentInput, Prisma.HallTicketUncheckedCreateWithoutStudentInput> | Prisma.HallTicketCreateWithoutStudentInput[] | Prisma.HallTicketUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutStudentInput | Prisma.HallTicketCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutStudentInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.HallTicketCreateManyStudentInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutStudentInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutStudentInput | Prisma.HallTicketUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutStudentInput, Prisma.HallTicketUncheckedCreateWithoutStudentInput> | Prisma.HallTicketCreateWithoutStudentInput[] | Prisma.HallTicketUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutStudentInput | Prisma.HallTicketCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutStudentInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.HallTicketCreateManyStudentInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutStudentInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutStudentInput | Prisma.HallTicketUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketCreateNestedManyWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamSessionInput, Prisma.HallTicketUncheckedCreateWithoutExamSessionInput> | Prisma.HallTicketCreateWithoutExamSessionInput[] | Prisma.HallTicketUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamSessionInput | Prisma.HallTicketCreateOrConnectWithoutExamSessionInput[]
  createMany?: Prisma.HallTicketCreateManyExamSessionInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUncheckedCreateNestedManyWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamSessionInput, Prisma.HallTicketUncheckedCreateWithoutExamSessionInput> | Prisma.HallTicketCreateWithoutExamSessionInput[] | Prisma.HallTicketUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamSessionInput | Prisma.HallTicketCreateOrConnectWithoutExamSessionInput[]
  createMany?: Prisma.HallTicketCreateManyExamSessionInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUpdateManyWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamSessionInput, Prisma.HallTicketUncheckedCreateWithoutExamSessionInput> | Prisma.HallTicketCreateWithoutExamSessionInput[] | Prisma.HallTicketUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamSessionInput | Prisma.HallTicketCreateOrConnectWithoutExamSessionInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutExamSessionInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutExamSessionInput[]
  createMany?: Prisma.HallTicketCreateManyExamSessionInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutExamSessionInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutExamSessionInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutExamSessionInput | Prisma.HallTicketUpdateManyWithWhereWithoutExamSessionInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketUncheckedUpdateManyWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamSessionInput, Prisma.HallTicketUncheckedCreateWithoutExamSessionInput> | Prisma.HallTicketCreateWithoutExamSessionInput[] | Prisma.HallTicketUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamSessionInput | Prisma.HallTicketCreateOrConnectWithoutExamSessionInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutExamSessionInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutExamSessionInput[]
  createMany?: Prisma.HallTicketCreateManyExamSessionInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutExamSessionInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutExamSessionInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutExamSessionInput | Prisma.HallTicketUpdateManyWithWhereWithoutExamSessionInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamInput, Prisma.HallTicketUncheckedCreateWithoutExamInput> | Prisma.HallTicketCreateWithoutExamInput[] | Prisma.HallTicketUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamInput | Prisma.HallTicketCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.HallTicketCreateManyExamInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUncheckedCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamInput, Prisma.HallTicketUncheckedCreateWithoutExamInput> | Prisma.HallTicketCreateWithoutExamInput[] | Prisma.HallTicketUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamInput | Prisma.HallTicketCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.HallTicketCreateManyExamInputEnvelope
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
}

export type HallTicketUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamInput, Prisma.HallTicketUncheckedCreateWithoutExamInput> | Prisma.HallTicketCreateWithoutExamInput[] | Prisma.HallTicketUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamInput | Prisma.HallTicketCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutExamInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.HallTicketCreateManyExamInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutExamInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutExamInput | Prisma.HallTicketUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketUncheckedUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.HallTicketCreateWithoutExamInput, Prisma.HallTicketUncheckedCreateWithoutExamInput> | Prisma.HallTicketCreateWithoutExamInput[] | Prisma.HallTicketUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.HallTicketCreateOrConnectWithoutExamInput | Prisma.HallTicketCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.HallTicketUpsertWithWhereUniqueWithoutExamInput | Prisma.HallTicketUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.HallTicketCreateManyExamInputEnvelope
  set?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  disconnect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  delete?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  connect?: Prisma.HallTicketWhereUniqueInput | Prisma.HallTicketWhereUniqueInput[]
  update?: Prisma.HallTicketUpdateWithWhereUniqueWithoutExamInput | Prisma.HallTicketUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.HallTicketUpdateManyWithWhereWithoutExamInput | Prisma.HallTicketUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
}

export type HallTicketCreateWithoutOrganizationInput = {
  id?: string
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  student: Prisma.StudentCreateNestedOneWithoutHallTicketInput
  exam?: Prisma.ExamCreateNestedOneWithoutHallTicketsInput
  examSession?: Prisma.ExamSessionCreateNestedOneWithoutHallTicketsInput
}

export type HallTicketUncheckedCreateWithoutOrganizationInput = {
  id?: string
  studentId: string
  examId?: string | null
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
}

export type HallTicketCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.HallTicketWhereUniqueInput
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutOrganizationInput, Prisma.HallTicketUncheckedCreateWithoutOrganizationInput>
}

export type HallTicketCreateManyOrganizationInputEnvelope = {
  data: Prisma.HallTicketCreateManyOrganizationInput | Prisma.HallTicketCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type HallTicketUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.HallTicketWhereUniqueInput
  update: Prisma.XOR<Prisma.HallTicketUpdateWithoutOrganizationInput, Prisma.HallTicketUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutOrganizationInput, Prisma.HallTicketUncheckedCreateWithoutOrganizationInput>
}

export type HallTicketUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.HallTicketWhereUniqueInput
  data: Prisma.XOR<Prisma.HallTicketUpdateWithoutOrganizationInput, Prisma.HallTicketUncheckedUpdateWithoutOrganizationInput>
}

export type HallTicketUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.HallTicketScalarWhereInput
  data: Prisma.XOR<Prisma.HallTicketUpdateManyMutationInput, Prisma.HallTicketUncheckedUpdateManyWithoutOrganizationInput>
}

export type HallTicketScalarWhereInput = {
  AND?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
  OR?: Prisma.HallTicketScalarWhereInput[]
  NOT?: Prisma.HallTicketScalarWhereInput | Prisma.HallTicketScalarWhereInput[]
  id?: Prisma.StringFilter<"HallTicket"> | string
  studentId?: Prisma.StringFilter<"HallTicket"> | string
  examId?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  examSessionId?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  pdfUrl?: Prisma.StringFilter<"HallTicket"> | string
  qrCode?: Prisma.StringNullableFilter<"HallTicket"> | string | null
  generatedAt?: Prisma.DateTimeFilter<"HallTicket"> | Date | string
  downloadedAt?: Prisma.DateTimeNullableFilter<"HallTicket"> | Date | string | null
  expiryDate?: Prisma.DateTimeNullableFilter<"HallTicket"> | Date | string | null
  organizationId?: Prisma.StringFilter<"HallTicket"> | string
}

export type HallTicketCreateWithoutStudentInput = {
  id?: string
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  exam?: Prisma.ExamCreateNestedOneWithoutHallTicketsInput
  examSession?: Prisma.ExamSessionCreateNestedOneWithoutHallTicketsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutHallTicketInput
}

export type HallTicketUncheckedCreateWithoutStudentInput = {
  id?: string
  examId?: string | null
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketCreateOrConnectWithoutStudentInput = {
  where: Prisma.HallTicketWhereUniqueInput
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutStudentInput, Prisma.HallTicketUncheckedCreateWithoutStudentInput>
}

export type HallTicketCreateManyStudentInputEnvelope = {
  data: Prisma.HallTicketCreateManyStudentInput | Prisma.HallTicketCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type HallTicketUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.HallTicketWhereUniqueInput
  update: Prisma.XOR<Prisma.HallTicketUpdateWithoutStudentInput, Prisma.HallTicketUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutStudentInput, Prisma.HallTicketUncheckedCreateWithoutStudentInput>
}

export type HallTicketUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.HallTicketWhereUniqueInput
  data: Prisma.XOR<Prisma.HallTicketUpdateWithoutStudentInput, Prisma.HallTicketUncheckedUpdateWithoutStudentInput>
}

export type HallTicketUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.HallTicketScalarWhereInput
  data: Prisma.XOR<Prisma.HallTicketUpdateManyMutationInput, Prisma.HallTicketUncheckedUpdateManyWithoutStudentInput>
}

export type HallTicketCreateWithoutExamSessionInput = {
  id?: string
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  student: Prisma.StudentCreateNestedOneWithoutHallTicketInput
  exam?: Prisma.ExamCreateNestedOneWithoutHallTicketsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutHallTicketInput
}

export type HallTicketUncheckedCreateWithoutExamSessionInput = {
  id?: string
  studentId: string
  examId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketCreateOrConnectWithoutExamSessionInput = {
  where: Prisma.HallTicketWhereUniqueInput
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutExamSessionInput, Prisma.HallTicketUncheckedCreateWithoutExamSessionInput>
}

export type HallTicketCreateManyExamSessionInputEnvelope = {
  data: Prisma.HallTicketCreateManyExamSessionInput | Prisma.HallTicketCreateManyExamSessionInput[]
  skipDuplicates?: boolean
}

export type HallTicketUpsertWithWhereUniqueWithoutExamSessionInput = {
  where: Prisma.HallTicketWhereUniqueInput
  update: Prisma.XOR<Prisma.HallTicketUpdateWithoutExamSessionInput, Prisma.HallTicketUncheckedUpdateWithoutExamSessionInput>
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutExamSessionInput, Prisma.HallTicketUncheckedCreateWithoutExamSessionInput>
}

export type HallTicketUpdateWithWhereUniqueWithoutExamSessionInput = {
  where: Prisma.HallTicketWhereUniqueInput
  data: Prisma.XOR<Prisma.HallTicketUpdateWithoutExamSessionInput, Prisma.HallTicketUncheckedUpdateWithoutExamSessionInput>
}

export type HallTicketUpdateManyWithWhereWithoutExamSessionInput = {
  where: Prisma.HallTicketScalarWhereInput
  data: Prisma.XOR<Prisma.HallTicketUpdateManyMutationInput, Prisma.HallTicketUncheckedUpdateManyWithoutExamSessionInput>
}

export type HallTicketCreateWithoutExamInput = {
  id?: string
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  student: Prisma.StudentCreateNestedOneWithoutHallTicketInput
  examSession?: Prisma.ExamSessionCreateNestedOneWithoutHallTicketsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutHallTicketInput
}

export type HallTicketUncheckedCreateWithoutExamInput = {
  id?: string
  studentId: string
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketCreateOrConnectWithoutExamInput = {
  where: Prisma.HallTicketWhereUniqueInput
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutExamInput, Prisma.HallTicketUncheckedCreateWithoutExamInput>
}

export type HallTicketCreateManyExamInputEnvelope = {
  data: Prisma.HallTicketCreateManyExamInput | Prisma.HallTicketCreateManyExamInput[]
  skipDuplicates?: boolean
}

export type HallTicketUpsertWithWhereUniqueWithoutExamInput = {
  where: Prisma.HallTicketWhereUniqueInput
  update: Prisma.XOR<Prisma.HallTicketUpdateWithoutExamInput, Prisma.HallTicketUncheckedUpdateWithoutExamInput>
  create: Prisma.XOR<Prisma.HallTicketCreateWithoutExamInput, Prisma.HallTicketUncheckedCreateWithoutExamInput>
}

export type HallTicketUpdateWithWhereUniqueWithoutExamInput = {
  where: Prisma.HallTicketWhereUniqueInput
  data: Prisma.XOR<Prisma.HallTicketUpdateWithoutExamInput, Prisma.HallTicketUncheckedUpdateWithoutExamInput>
}

export type HallTicketUpdateManyWithWhereWithoutExamInput = {
  where: Prisma.HallTicketScalarWhereInput
  data: Prisma.XOR<Prisma.HallTicketUpdateManyMutationInput, Prisma.HallTicketUncheckedUpdateManyWithoutExamInput>
}

export type HallTicketCreateManyOrganizationInput = {
  id?: string
  studentId: string
  examId?: string | null
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
}

export type HallTicketUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  student?: Prisma.StudentUpdateOneRequiredWithoutHallTicketNestedInput
  exam?: Prisma.ExamUpdateOneWithoutHallTicketsNestedInput
  examSession?: Prisma.ExamSessionUpdateOneWithoutHallTicketsNestedInput
}

export type HallTicketUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type HallTicketUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type HallTicketCreateManyStudentInput = {
  id?: string
  examId?: string | null
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  exam?: Prisma.ExamUpdateOneWithoutHallTicketsNestedInput
  examSession?: Prisma.ExamSessionUpdateOneWithoutHallTicketsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutHallTicketNestedInput
}

export type HallTicketUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketCreateManyExamSessionInput = {
  id?: string
  studentId: string
  examId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  student?: Prisma.StudentUpdateOneRequiredWithoutHallTicketNestedInput
  exam?: Prisma.ExamUpdateOneWithoutHallTicketsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutHallTicketNestedInput
}

export type HallTicketUncheckedUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketUncheckedUpdateManyWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketCreateManyExamInput = {
  id?: string
  studentId: string
  examSessionId?: string | null
  pdfUrl: string
  qrCode?: string | null
  generatedAt?: Date | string
  downloadedAt?: Date | string | null
  expiryDate?: Date | string | null
  organizationId: string
}

export type HallTicketUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  student?: Prisma.StudentUpdateOneRequiredWithoutHallTicketNestedInput
  examSession?: Prisma.ExamSessionUpdateOneWithoutHallTicketsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutHallTicketNestedInput
}

export type HallTicketUncheckedUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type HallTicketUncheckedUpdateManyWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pdfUrl?: Prisma.StringFieldUpdateOperationsInput | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  downloadedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type HallTicketSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  examSessionId?: boolean
  pdfUrl?: boolean
  qrCode?: boolean
  generatedAt?: boolean
  downloadedAt?: boolean
  expiryDate?: boolean
  organizationId?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.HallTicket$examArgs<ExtArgs>
  examSession?: boolean | Prisma.HallTicket$examSessionArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hallTicket"]>

export type HallTicketSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  examSessionId?: boolean
  pdfUrl?: boolean
  qrCode?: boolean
  generatedAt?: boolean
  downloadedAt?: boolean
  expiryDate?: boolean
  organizationId?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.HallTicket$examArgs<ExtArgs>
  examSession?: boolean | Prisma.HallTicket$examSessionArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hallTicket"]>

export type HallTicketSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  examSessionId?: boolean
  pdfUrl?: boolean
  qrCode?: boolean
  generatedAt?: boolean
  downloadedAt?: boolean
  expiryDate?: boolean
  organizationId?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.HallTicket$examArgs<ExtArgs>
  examSession?: boolean | Prisma.HallTicket$examSessionArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hallTicket"]>

export type HallTicketSelectScalar = {
  id?: boolean
  studentId?: boolean
  examId?: boolean
  examSessionId?: boolean
  pdfUrl?: boolean
  qrCode?: boolean
  generatedAt?: boolean
  downloadedAt?: boolean
  expiryDate?: boolean
  organizationId?: boolean
}

export type HallTicketOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "studentId" | "examId" | "examSessionId" | "pdfUrl" | "qrCode" | "generatedAt" | "downloadedAt" | "expiryDate" | "organizationId", ExtArgs["result"]["hallTicket"]>
export type HallTicketInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.HallTicket$examArgs<ExtArgs>
  examSession?: boolean | Prisma.HallTicket$examSessionArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type HallTicketIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.HallTicket$examArgs<ExtArgs>
  examSession?: boolean | Prisma.HallTicket$examSessionArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type HallTicketIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.HallTicket$examArgs<ExtArgs>
  examSession?: boolean | Prisma.HallTicket$examSessionArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $HallTicketPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "HallTicket"
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>
    exam: Prisma.$ExamPayload<ExtArgs> | null
    examSession: Prisma.$ExamSessionPayload<ExtArgs> | null
    organization: Prisma.$OrganizationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    studentId: string
    examId: string | null
    examSessionId: string | null
    pdfUrl: string
    qrCode: string | null
    generatedAt: Date
    downloadedAt: Date | null
    expiryDate: Date | null
    organizationId: string
  }, ExtArgs["result"]["hallTicket"]>
  composites: {}
}

export type HallTicketGetPayload<S extends boolean | null | undefined | HallTicketDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HallTicketPayload, S>

export type HallTicketCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HallTicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HallTicketCountAggregateInputType | true
  }

export interface HallTicketDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HallTicket'], meta: { name: 'HallTicket' } }
  /**
   * Find zero or one HallTicket that matches the filter.
   * @param {HallTicketFindUniqueArgs} args - Arguments to find a HallTicket
   * @example
   * // Get one HallTicket
   * const hallTicket = await prisma.hallTicket.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HallTicketFindUniqueArgs>(args: Prisma.SelectSubset<T, HallTicketFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one HallTicket that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HallTicketFindUniqueOrThrowArgs} args - Arguments to find a HallTicket
   * @example
   * // Get one HallTicket
   * const hallTicket = await prisma.hallTicket.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HallTicketFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HallTicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HallTicket that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketFindFirstArgs} args - Arguments to find a HallTicket
   * @example
   * // Get one HallTicket
   * const hallTicket = await prisma.hallTicket.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HallTicketFindFirstArgs>(args?: Prisma.SelectSubset<T, HallTicketFindFirstArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HallTicket that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketFindFirstOrThrowArgs} args - Arguments to find a HallTicket
   * @example
   * // Get one HallTicket
   * const hallTicket = await prisma.hallTicket.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HallTicketFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HallTicketFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more HallTickets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HallTickets
   * const hallTickets = await prisma.hallTicket.findMany()
   * 
   * // Get first 10 HallTickets
   * const hallTickets = await prisma.hallTicket.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const hallTicketWithIdOnly = await prisma.hallTicket.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HallTicketFindManyArgs>(args?: Prisma.SelectSubset<T, HallTicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a HallTicket.
   * @param {HallTicketCreateArgs} args - Arguments to create a HallTicket.
   * @example
   * // Create one HallTicket
   * const HallTicket = await prisma.hallTicket.create({
   *   data: {
   *     // ... data to create a HallTicket
   *   }
   * })
   * 
   */
  create<T extends HallTicketCreateArgs>(args: Prisma.SelectSubset<T, HallTicketCreateArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many HallTickets.
   * @param {HallTicketCreateManyArgs} args - Arguments to create many HallTickets.
   * @example
   * // Create many HallTickets
   * const hallTicket = await prisma.hallTicket.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HallTicketCreateManyArgs>(args?: Prisma.SelectSubset<T, HallTicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many HallTickets and returns the data saved in the database.
   * @param {HallTicketCreateManyAndReturnArgs} args - Arguments to create many HallTickets.
   * @example
   * // Create many HallTickets
   * const hallTicket = await prisma.hallTicket.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many HallTickets and only return the `id`
   * const hallTicketWithIdOnly = await prisma.hallTicket.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HallTicketCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HallTicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a HallTicket.
   * @param {HallTicketDeleteArgs} args - Arguments to delete one HallTicket.
   * @example
   * // Delete one HallTicket
   * const HallTicket = await prisma.hallTicket.delete({
   *   where: {
   *     // ... filter to delete one HallTicket
   *   }
   * })
   * 
   */
  delete<T extends HallTicketDeleteArgs>(args: Prisma.SelectSubset<T, HallTicketDeleteArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one HallTicket.
   * @param {HallTicketUpdateArgs} args - Arguments to update one HallTicket.
   * @example
   * // Update one HallTicket
   * const hallTicket = await prisma.hallTicket.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HallTicketUpdateArgs>(args: Prisma.SelectSubset<T, HallTicketUpdateArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more HallTickets.
   * @param {HallTicketDeleteManyArgs} args - Arguments to filter HallTickets to delete.
   * @example
   * // Delete a few HallTickets
   * const { count } = await prisma.hallTicket.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HallTicketDeleteManyArgs>(args?: Prisma.SelectSubset<T, HallTicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HallTickets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HallTickets
   * const hallTicket = await prisma.hallTicket.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HallTicketUpdateManyArgs>(args: Prisma.SelectSubset<T, HallTicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HallTickets and returns the data updated in the database.
   * @param {HallTicketUpdateManyAndReturnArgs} args - Arguments to update many HallTickets.
   * @example
   * // Update many HallTickets
   * const hallTicket = await prisma.hallTicket.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more HallTickets and only return the `id`
   * const hallTicketWithIdOnly = await prisma.hallTicket.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HallTicketUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HallTicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one HallTicket.
   * @param {HallTicketUpsertArgs} args - Arguments to update or create a HallTicket.
   * @example
   * // Update or create a HallTicket
   * const hallTicket = await prisma.hallTicket.upsert({
   *   create: {
   *     // ... data to create a HallTicket
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HallTicket we want to update
   *   }
   * })
   */
  upsert<T extends HallTicketUpsertArgs>(args: Prisma.SelectSubset<T, HallTicketUpsertArgs<ExtArgs>>): Prisma.Prisma__HallTicketClient<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of HallTickets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketCountArgs} args - Arguments to filter HallTickets to count.
   * @example
   * // Count the number of HallTickets
   * const count = await prisma.hallTicket.count({
   *   where: {
   *     // ... the filter for the HallTickets we want to count
   *   }
   * })
  **/
  count<T extends HallTicketCountArgs>(
    args?: Prisma.Subset<T, HallTicketCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HallTicketCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a HallTicket.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HallTicketAggregateArgs>(args: Prisma.Subset<T, HallTicketAggregateArgs>): Prisma.PrismaPromise<GetHallTicketAggregateType<T>>

  /**
   * Group by HallTicket.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HallTicketGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HallTicketGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HallTicketGroupByArgs['orderBy'] }
      : { orderBy?: HallTicketGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HallTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHallTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the HallTicket model
 */
readonly fields: HallTicketFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HallTicket.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HallTicketClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  exam<T extends Prisma.HallTicket$examArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.HallTicket$examArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  examSession<T extends Prisma.HallTicket$examSessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.HallTicket$examSessionArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the HallTicket model
 */
export interface HallTicketFieldRefs {
  readonly id: Prisma.FieldRef<"HallTicket", 'String'>
  readonly studentId: Prisma.FieldRef<"HallTicket", 'String'>
  readonly examId: Prisma.FieldRef<"HallTicket", 'String'>
  readonly examSessionId: Prisma.FieldRef<"HallTicket", 'String'>
  readonly pdfUrl: Prisma.FieldRef<"HallTicket", 'String'>
  readonly qrCode: Prisma.FieldRef<"HallTicket", 'String'>
  readonly generatedAt: Prisma.FieldRef<"HallTicket", 'DateTime'>
  readonly downloadedAt: Prisma.FieldRef<"HallTicket", 'DateTime'>
  readonly expiryDate: Prisma.FieldRef<"HallTicket", 'DateTime'>
  readonly organizationId: Prisma.FieldRef<"HallTicket", 'String'>
}
    

// Custom InputTypes
/**
 * HallTicket findUnique
 */
export type HallTicketFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * Filter, which HallTicket to fetch.
   */
  where: Prisma.HallTicketWhereUniqueInput
}

/**
 * HallTicket findUniqueOrThrow
 */
export type HallTicketFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * Filter, which HallTicket to fetch.
   */
  where: Prisma.HallTicketWhereUniqueInput
}

/**
 * HallTicket findFirst
 */
export type HallTicketFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * Filter, which HallTicket to fetch.
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HallTickets to fetch.
   */
  orderBy?: Prisma.HallTicketOrderByWithRelationInput | Prisma.HallTicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HallTickets.
   */
  cursor?: Prisma.HallTicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HallTickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HallTickets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HallTickets.
   */
  distinct?: Prisma.HallTicketScalarFieldEnum | Prisma.HallTicketScalarFieldEnum[]
}

/**
 * HallTicket findFirstOrThrow
 */
export type HallTicketFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * Filter, which HallTicket to fetch.
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HallTickets to fetch.
   */
  orderBy?: Prisma.HallTicketOrderByWithRelationInput | Prisma.HallTicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HallTickets.
   */
  cursor?: Prisma.HallTicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HallTickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HallTickets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HallTickets.
   */
  distinct?: Prisma.HallTicketScalarFieldEnum | Prisma.HallTicketScalarFieldEnum[]
}

/**
 * HallTicket findMany
 */
export type HallTicketFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * Filter, which HallTickets to fetch.
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HallTickets to fetch.
   */
  orderBy?: Prisma.HallTicketOrderByWithRelationInput | Prisma.HallTicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing HallTickets.
   */
  cursor?: Prisma.HallTicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HallTickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HallTickets.
   */
  skip?: number
  distinct?: Prisma.HallTicketScalarFieldEnum | Prisma.HallTicketScalarFieldEnum[]
}

/**
 * HallTicket create
 */
export type HallTicketCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * The data needed to create a HallTicket.
   */
  data: Prisma.XOR<Prisma.HallTicketCreateInput, Prisma.HallTicketUncheckedCreateInput>
}

/**
 * HallTicket createMany
 */
export type HallTicketCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many HallTickets.
   */
  data: Prisma.HallTicketCreateManyInput | Prisma.HallTicketCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * HallTicket createManyAndReturn
 */
export type HallTicketCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * The data used to create many HallTickets.
   */
  data: Prisma.HallTicketCreateManyInput | Prisma.HallTicketCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * HallTicket update
 */
export type HallTicketUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * The data needed to update a HallTicket.
   */
  data: Prisma.XOR<Prisma.HallTicketUpdateInput, Prisma.HallTicketUncheckedUpdateInput>
  /**
   * Choose, which HallTicket to update.
   */
  where: Prisma.HallTicketWhereUniqueInput
}

/**
 * HallTicket updateMany
 */
export type HallTicketUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update HallTickets.
   */
  data: Prisma.XOR<Prisma.HallTicketUpdateManyMutationInput, Prisma.HallTicketUncheckedUpdateManyInput>
  /**
   * Filter which HallTickets to update
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * Limit how many HallTickets to update.
   */
  limit?: number
}

/**
 * HallTicket updateManyAndReturn
 */
export type HallTicketUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * The data used to update HallTickets.
   */
  data: Prisma.XOR<Prisma.HallTicketUpdateManyMutationInput, Prisma.HallTicketUncheckedUpdateManyInput>
  /**
   * Filter which HallTickets to update
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * Limit how many HallTickets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * HallTicket upsert
 */
export type HallTicketUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * The filter to search for the HallTicket to update in case it exists.
   */
  where: Prisma.HallTicketWhereUniqueInput
  /**
   * In case the HallTicket found by the `where` argument doesn't exist, create a new HallTicket with this data.
   */
  create: Prisma.XOR<Prisma.HallTicketCreateInput, Prisma.HallTicketUncheckedCreateInput>
  /**
   * In case the HallTicket was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HallTicketUpdateInput, Prisma.HallTicketUncheckedUpdateInput>
}

/**
 * HallTicket delete
 */
export type HallTicketDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  /**
   * Filter which HallTicket to delete.
   */
  where: Prisma.HallTicketWhereUniqueInput
}

/**
 * HallTicket deleteMany
 */
export type HallTicketDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HallTickets to delete
   */
  where?: Prisma.HallTicketWhereInput
  /**
   * Limit how many HallTickets to delete.
   */
  limit?: number
}

/**
 * HallTicket.exam
 */
export type HallTicket$examArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  where?: Prisma.ExamWhereInput
}

/**
 * HallTicket.examSession
 */
export type HallTicket$examSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  where?: Prisma.ExamSessionWhereInput
}

/**
 * HallTicket without action
 */
export type HallTicketDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
}
