
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AcademicCalendar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AcademicCalendar
 * 
 */
export type AcademicCalendarModel = runtime.Types.Result.DefaultSelection<Prisma.$AcademicCalendarPayload>

export type AggregateAcademicCalendar = {
  _count: AcademicCalendarCountAggregateOutputType | null
  _min: AcademicCalendarMinAggregateOutputType | null
  _max: AcademicCalendarMaxAggregateOutputType | null
}

export type AcademicCalendarMinAggregateOutputType = {
  id: string | null
  organizationId: string | null
  name: string | null
  startDate: Date | null
  endDate: Date | null
  type: $Enums.CalendarEventType | null
  reason: string | null
  isRecurring: boolean | null
  createdBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type AcademicCalendarMaxAggregateOutputType = {
  id: string | null
  organizationId: string | null
  name: string | null
  startDate: Date | null
  endDate: Date | null
  type: $Enums.CalendarEventType | null
  reason: string | null
  isRecurring: boolean | null
  createdBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type AcademicCalendarCountAggregateOutputType = {
  id: number
  organizationId: number
  name: number
  startDate: number
  endDate: number
  type: number
  reason: number
  isRecurring: number
  createdBy: number
  createdAt: number
  updatedAt: number
  academicYearId: number
  _all: number
}


export type AcademicCalendarMinAggregateInputType = {
  id?: true
  organizationId?: true
  name?: true
  startDate?: true
  endDate?: true
  type?: true
  reason?: true
  isRecurring?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type AcademicCalendarMaxAggregateInputType = {
  id?: true
  organizationId?: true
  name?: true
  startDate?: true
  endDate?: true
  type?: true
  reason?: true
  isRecurring?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type AcademicCalendarCountAggregateInputType = {
  id?: true
  organizationId?: true
  name?: true
  startDate?: true
  endDate?: true
  type?: true
  reason?: true
  isRecurring?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
  _all?: true
}

export type AcademicCalendarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AcademicCalendar to aggregate.
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicCalendars to fetch.
   */
  orderBy?: Prisma.AcademicCalendarOrderByWithRelationInput | Prisma.AcademicCalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AcademicCalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicCalendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicCalendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AcademicCalendars
  **/
  _count?: true | AcademicCalendarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AcademicCalendarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AcademicCalendarMaxAggregateInputType
}

export type GetAcademicCalendarAggregateType<T extends AcademicCalendarAggregateArgs> = {
      [P in keyof T & keyof AggregateAcademicCalendar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAcademicCalendar[P]>
    : Prisma.GetScalarType<T[P], AggregateAcademicCalendar[P]>
}




export type AcademicCalendarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AcademicCalendarWhereInput
  orderBy?: Prisma.AcademicCalendarOrderByWithAggregationInput | Prisma.AcademicCalendarOrderByWithAggregationInput[]
  by: Prisma.AcademicCalendarScalarFieldEnum[] | Prisma.AcademicCalendarScalarFieldEnum
  having?: Prisma.AcademicCalendarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AcademicCalendarCountAggregateInputType | true
  _min?: AcademicCalendarMinAggregateInputType
  _max?: AcademicCalendarMaxAggregateInputType
}

export type AcademicCalendarGroupByOutputType = {
  id: string
  organizationId: string
  name: string
  startDate: Date
  endDate: Date
  type: $Enums.CalendarEventType
  reason: string | null
  isRecurring: boolean
  createdBy: string
  createdAt: Date
  updatedAt: Date
  academicYearId: string | null
  _count: AcademicCalendarCountAggregateOutputType | null
  _min: AcademicCalendarMinAggregateOutputType | null
  _max: AcademicCalendarMaxAggregateOutputType | null
}

type GetAcademicCalendarGroupByPayload<T extends AcademicCalendarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AcademicCalendarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AcademicCalendarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AcademicCalendarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AcademicCalendarGroupByOutputType[P]>
      }
    >
  >



export type AcademicCalendarWhereInput = {
  AND?: Prisma.AcademicCalendarWhereInput | Prisma.AcademicCalendarWhereInput[]
  OR?: Prisma.AcademicCalendarWhereInput[]
  NOT?: Prisma.AcademicCalendarWhereInput | Prisma.AcademicCalendarWhereInput[]
  id?: Prisma.StringFilter<"AcademicCalendar"> | string
  organizationId?: Prisma.StringFilter<"AcademicCalendar"> | string
  name?: Prisma.StringFilter<"AcademicCalendar"> | string
  startDate?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  endDate?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  type?: Prisma.EnumCalendarEventTypeFilter<"AcademicCalendar"> | $Enums.CalendarEventType
  reason?: Prisma.StringNullableFilter<"AcademicCalendar"> | string | null
  isRecurring?: Prisma.BoolFilter<"AcademicCalendar"> | boolean
  createdBy?: Prisma.StringFilter<"AcademicCalendar"> | string
  createdAt?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"AcademicCalendar"> | string | null
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}

export type AcademicCalendarOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  isRecurring?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
}

export type AcademicCalendarWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  organizationId_startDate_endDate?: Prisma.AcademicCalendarOrganizationIdStartDateEndDateCompoundUniqueInput
  AND?: Prisma.AcademicCalendarWhereInput | Prisma.AcademicCalendarWhereInput[]
  OR?: Prisma.AcademicCalendarWhereInput[]
  NOT?: Prisma.AcademicCalendarWhereInput | Prisma.AcademicCalendarWhereInput[]
  organizationId?: Prisma.StringFilter<"AcademicCalendar"> | string
  name?: Prisma.StringFilter<"AcademicCalendar"> | string
  startDate?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  endDate?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  type?: Prisma.EnumCalendarEventTypeFilter<"AcademicCalendar"> | $Enums.CalendarEventType
  reason?: Prisma.StringNullableFilter<"AcademicCalendar"> | string | null
  isRecurring?: Prisma.BoolFilter<"AcademicCalendar"> | boolean
  createdBy?: Prisma.StringFilter<"AcademicCalendar"> | string
  createdAt?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"AcademicCalendar"> | string | null
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}, "id" | "organizationId_startDate_endDate">

export type AcademicCalendarOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  isRecurring?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AcademicCalendarCountOrderByAggregateInput
  _max?: Prisma.AcademicCalendarMaxOrderByAggregateInput
  _min?: Prisma.AcademicCalendarMinOrderByAggregateInput
}

export type AcademicCalendarScalarWhereWithAggregatesInput = {
  AND?: Prisma.AcademicCalendarScalarWhereWithAggregatesInput | Prisma.AcademicCalendarScalarWhereWithAggregatesInput[]
  OR?: Prisma.AcademicCalendarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AcademicCalendarScalarWhereWithAggregatesInput | Prisma.AcademicCalendarScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AcademicCalendar"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"AcademicCalendar"> | string
  name?: Prisma.StringWithAggregatesFilter<"AcademicCalendar"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"AcademicCalendar"> | Date | string
  endDate?: Prisma.DateTimeWithAggregatesFilter<"AcademicCalendar"> | Date | string
  type?: Prisma.EnumCalendarEventTypeWithAggregatesFilter<"AcademicCalendar"> | $Enums.CalendarEventType
  reason?: Prisma.StringNullableWithAggregatesFilter<"AcademicCalendar"> | string | null
  isRecurring?: Prisma.BoolWithAggregatesFilter<"AcademicCalendar"> | boolean
  createdBy?: Prisma.StringWithAggregatesFilter<"AcademicCalendar"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AcademicCalendar"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AcademicCalendar"> | Date | string
  academicYearId?: Prisma.StringNullableWithAggregatesFilter<"AcademicCalendar"> | string | null
}

export type AcademicCalendarCreateInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicCalendarInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutAcademicCalendarInput
}

export type AcademicCalendarUncheckedCreateInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AcademicCalendarUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicCalendarNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutAcademicCalendarNestedInput
}

export type AcademicCalendarUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AcademicCalendarCreateManyInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AcademicCalendarUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AcademicCalendarUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AcademicCalendarListRelationFilter = {
  every?: Prisma.AcademicCalendarWhereInput
  some?: Prisma.AcademicCalendarWhereInput
  none?: Prisma.AcademicCalendarWhereInput
}

export type AcademicCalendarOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AcademicCalendarOrganizationIdStartDateEndDateCompoundUniqueInput = {
  organizationId: string
  startDate: Date | string
  endDate: Date | string
}

export type AcademicCalendarCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  isRecurring?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type AcademicCalendarMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  isRecurring?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type AcademicCalendarMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  isRecurring?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type AcademicCalendarCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput> | Prisma.AcademicCalendarCreateWithoutAcademicYearInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput | Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.AcademicCalendarCreateManyAcademicYearInputEnvelope
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
}

export type AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput> | Prisma.AcademicCalendarCreateWithoutAcademicYearInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput | Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.AcademicCalendarCreateManyAcademicYearInputEnvelope
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
}

export type AcademicCalendarUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput> | Prisma.AcademicCalendarCreateWithoutAcademicYearInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput | Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.AcademicCalendarCreateManyAcademicYearInputEnvelope
  set?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  disconnect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  delete?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  update?: Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.AcademicCalendarUpdateManyWithWhereWithoutAcademicYearInput | Prisma.AcademicCalendarUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.AcademicCalendarScalarWhereInput | Prisma.AcademicCalendarScalarWhereInput[]
}

export type AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput> | Prisma.AcademicCalendarCreateWithoutAcademicYearInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput | Prisma.AcademicCalendarCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.AcademicCalendarCreateManyAcademicYearInputEnvelope
  set?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  disconnect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  delete?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  update?: Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.AcademicCalendarUpdateManyWithWhereWithoutAcademicYearInput | Prisma.AcademicCalendarUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.AcademicCalendarScalarWhereInput | Prisma.AcademicCalendarScalarWhereInput[]
}

export type AcademicCalendarCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicCalendarCreateWithoutOrganizationInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput | Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.AcademicCalendarCreateManyOrganizationInputEnvelope
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
}

export type AcademicCalendarUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicCalendarCreateWithoutOrganizationInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput | Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.AcademicCalendarCreateManyOrganizationInputEnvelope
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
}

export type AcademicCalendarUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicCalendarCreateWithoutOrganizationInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput | Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.AcademicCalendarCreateManyOrganizationInputEnvelope
  set?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  disconnect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  delete?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  update?: Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.AcademicCalendarUpdateManyWithWhereWithoutOrganizationInput | Prisma.AcademicCalendarUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.AcademicCalendarScalarWhereInput | Prisma.AcademicCalendarScalarWhereInput[]
}

export type AcademicCalendarUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicCalendarCreateWithoutOrganizationInput[] | Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput | Prisma.AcademicCalendarCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicCalendarUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.AcademicCalendarCreateManyOrganizationInputEnvelope
  set?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  disconnect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  delete?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  connect?: Prisma.AcademicCalendarWhereUniqueInput | Prisma.AcademicCalendarWhereUniqueInput[]
  update?: Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicCalendarUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.AcademicCalendarUpdateManyWithWhereWithoutOrganizationInput | Prisma.AcademicCalendarUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.AcademicCalendarScalarWhereInput | Prisma.AcademicCalendarScalarWhereInput[]
}

export type EnumCalendarEventTypeFieldUpdateOperationsInput = {
  set?: $Enums.CalendarEventType
}

export type AcademicCalendarCreateWithoutAcademicYearInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicCalendarInput
}

export type AcademicCalendarUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AcademicCalendarCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.AcademicCalendarWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput>
}

export type AcademicCalendarCreateManyAcademicYearInputEnvelope = {
  data: Prisma.AcademicCalendarCreateManyAcademicYearInput | Prisma.AcademicCalendarCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type AcademicCalendarUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.AcademicCalendarWhereUniqueInput
  update: Prisma.XOR<Prisma.AcademicCalendarUpdateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedCreateWithoutAcademicYearInput>
}

export type AcademicCalendarUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.AcademicCalendarWhereUniqueInput
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateWithoutAcademicYearInput, Prisma.AcademicCalendarUncheckedUpdateWithoutAcademicYearInput>
}

export type AcademicCalendarUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.AcademicCalendarScalarWhereInput
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateManyMutationInput, Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearInput>
}

export type AcademicCalendarScalarWhereInput = {
  AND?: Prisma.AcademicCalendarScalarWhereInput | Prisma.AcademicCalendarScalarWhereInput[]
  OR?: Prisma.AcademicCalendarScalarWhereInput[]
  NOT?: Prisma.AcademicCalendarScalarWhereInput | Prisma.AcademicCalendarScalarWhereInput[]
  id?: Prisma.StringFilter<"AcademicCalendar"> | string
  organizationId?: Prisma.StringFilter<"AcademicCalendar"> | string
  name?: Prisma.StringFilter<"AcademicCalendar"> | string
  startDate?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  endDate?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  type?: Prisma.EnumCalendarEventTypeFilter<"AcademicCalendar"> | $Enums.CalendarEventType
  reason?: Prisma.StringNullableFilter<"AcademicCalendar"> | string | null
  isRecurring?: Prisma.BoolFilter<"AcademicCalendar"> | boolean
  createdBy?: Prisma.StringFilter<"AcademicCalendar"> | string
  createdAt?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AcademicCalendar"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"AcademicCalendar"> | string | null
}

export type AcademicCalendarCreateWithoutOrganizationInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutAcademicCalendarInput
}

export type AcademicCalendarUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AcademicCalendarCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.AcademicCalendarWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput>
}

export type AcademicCalendarCreateManyOrganizationInputEnvelope = {
  data: Prisma.AcademicCalendarCreateManyOrganizationInput | Prisma.AcademicCalendarCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type AcademicCalendarUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.AcademicCalendarWhereUniqueInput
  update: Prisma.XOR<Prisma.AcademicCalendarUpdateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.AcademicCalendarCreateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedCreateWithoutOrganizationInput>
}

export type AcademicCalendarUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.AcademicCalendarWhereUniqueInput
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateWithoutOrganizationInput, Prisma.AcademicCalendarUncheckedUpdateWithoutOrganizationInput>
}

export type AcademicCalendarUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.AcademicCalendarScalarWhereInput
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateManyMutationInput, Prisma.AcademicCalendarUncheckedUpdateManyWithoutOrganizationInput>
}

export type AcademicCalendarCreateManyAcademicYearInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AcademicCalendarUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicCalendarNestedInput
}

export type AcademicCalendarUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AcademicCalendarUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AcademicCalendarCreateManyOrganizationInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type: $Enums.CalendarEventType
  reason?: string | null
  isRecurring?: boolean
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AcademicCalendarUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYear?: Prisma.AcademicYearUpdateOneWithoutAcademicCalendarNestedInput
}

export type AcademicCalendarUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AcademicCalendarUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput | $Enums.CalendarEventType
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isRecurring?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type AcademicCalendarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  reason?: boolean
  isRecurring?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicCalendar$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["academicCalendar"]>

export type AcademicCalendarSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  reason?: boolean
  isRecurring?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicCalendar$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["academicCalendar"]>

export type AcademicCalendarSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  reason?: boolean
  isRecurring?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicCalendar$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["academicCalendar"]>

export type AcademicCalendarSelectScalar = {
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  reason?: boolean
  isRecurring?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
}

export type AcademicCalendarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "organizationId" | "name" | "startDate" | "endDate" | "type" | "reason" | "isRecurring" | "createdBy" | "createdAt" | "updatedAt" | "academicYearId", ExtArgs["result"]["academicCalendar"]>
export type AcademicCalendarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicCalendar$academicYearArgs<ExtArgs>
}
export type AcademicCalendarIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicCalendar$academicYearArgs<ExtArgs>
}
export type AcademicCalendarIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicCalendar$academicYearArgs<ExtArgs>
}

export type $AcademicCalendarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AcademicCalendar"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    academicYear: Prisma.$AcademicYearPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    organizationId: string
    name: string
    startDate: Date
    endDate: Date
    type: $Enums.CalendarEventType
    reason: string | null
    isRecurring: boolean
    createdBy: string
    createdAt: Date
    updatedAt: Date
    academicYearId: string | null
  }, ExtArgs["result"]["academicCalendar"]>
  composites: {}
}

export type AcademicCalendarGetPayload<S extends boolean | null | undefined | AcademicCalendarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload, S>

export type AcademicCalendarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AcademicCalendarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AcademicCalendarCountAggregateInputType | true
  }

export interface AcademicCalendarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicCalendar'], meta: { name: 'AcademicCalendar' } }
  /**
   * Find zero or one AcademicCalendar that matches the filter.
   * @param {AcademicCalendarFindUniqueArgs} args - Arguments to find a AcademicCalendar
   * @example
   * // Get one AcademicCalendar
   * const academicCalendar = await prisma.academicCalendar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AcademicCalendarFindUniqueArgs>(args: Prisma.SelectSubset<T, AcademicCalendarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AcademicCalendar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AcademicCalendarFindUniqueOrThrowArgs} args - Arguments to find a AcademicCalendar
   * @example
   * // Get one AcademicCalendar
   * const academicCalendar = await prisma.academicCalendar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AcademicCalendarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AcademicCalendarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AcademicCalendar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarFindFirstArgs} args - Arguments to find a AcademicCalendar
   * @example
   * // Get one AcademicCalendar
   * const academicCalendar = await prisma.academicCalendar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AcademicCalendarFindFirstArgs>(args?: Prisma.SelectSubset<T, AcademicCalendarFindFirstArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AcademicCalendar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarFindFirstOrThrowArgs} args - Arguments to find a AcademicCalendar
   * @example
   * // Get one AcademicCalendar
   * const academicCalendar = await prisma.academicCalendar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AcademicCalendarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AcademicCalendarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AcademicCalendars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AcademicCalendars
   * const academicCalendars = await prisma.academicCalendar.findMany()
   * 
   * // Get first 10 AcademicCalendars
   * const academicCalendars = await prisma.academicCalendar.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const academicCalendarWithIdOnly = await prisma.academicCalendar.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AcademicCalendarFindManyArgs>(args?: Prisma.SelectSubset<T, AcademicCalendarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AcademicCalendar.
   * @param {AcademicCalendarCreateArgs} args - Arguments to create a AcademicCalendar.
   * @example
   * // Create one AcademicCalendar
   * const AcademicCalendar = await prisma.academicCalendar.create({
   *   data: {
   *     // ... data to create a AcademicCalendar
   *   }
   * })
   * 
   */
  create<T extends AcademicCalendarCreateArgs>(args: Prisma.SelectSubset<T, AcademicCalendarCreateArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AcademicCalendars.
   * @param {AcademicCalendarCreateManyArgs} args - Arguments to create many AcademicCalendars.
   * @example
   * // Create many AcademicCalendars
   * const academicCalendar = await prisma.academicCalendar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AcademicCalendarCreateManyArgs>(args?: Prisma.SelectSubset<T, AcademicCalendarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AcademicCalendars and returns the data saved in the database.
   * @param {AcademicCalendarCreateManyAndReturnArgs} args - Arguments to create many AcademicCalendars.
   * @example
   * // Create many AcademicCalendars
   * const academicCalendar = await prisma.academicCalendar.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AcademicCalendars and only return the `id`
   * const academicCalendarWithIdOnly = await prisma.academicCalendar.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AcademicCalendarCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AcademicCalendarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AcademicCalendar.
   * @param {AcademicCalendarDeleteArgs} args - Arguments to delete one AcademicCalendar.
   * @example
   * // Delete one AcademicCalendar
   * const AcademicCalendar = await prisma.academicCalendar.delete({
   *   where: {
   *     // ... filter to delete one AcademicCalendar
   *   }
   * })
   * 
   */
  delete<T extends AcademicCalendarDeleteArgs>(args: Prisma.SelectSubset<T, AcademicCalendarDeleteArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AcademicCalendar.
   * @param {AcademicCalendarUpdateArgs} args - Arguments to update one AcademicCalendar.
   * @example
   * // Update one AcademicCalendar
   * const academicCalendar = await prisma.academicCalendar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AcademicCalendarUpdateArgs>(args: Prisma.SelectSubset<T, AcademicCalendarUpdateArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AcademicCalendars.
   * @param {AcademicCalendarDeleteManyArgs} args - Arguments to filter AcademicCalendars to delete.
   * @example
   * // Delete a few AcademicCalendars
   * const { count } = await prisma.academicCalendar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AcademicCalendarDeleteManyArgs>(args?: Prisma.SelectSubset<T, AcademicCalendarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AcademicCalendars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AcademicCalendars
   * const academicCalendar = await prisma.academicCalendar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AcademicCalendarUpdateManyArgs>(args: Prisma.SelectSubset<T, AcademicCalendarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AcademicCalendars and returns the data updated in the database.
   * @param {AcademicCalendarUpdateManyAndReturnArgs} args - Arguments to update many AcademicCalendars.
   * @example
   * // Update many AcademicCalendars
   * const academicCalendar = await prisma.academicCalendar.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AcademicCalendars and only return the `id`
   * const academicCalendarWithIdOnly = await prisma.academicCalendar.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AcademicCalendarUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AcademicCalendarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AcademicCalendar.
   * @param {AcademicCalendarUpsertArgs} args - Arguments to update or create a AcademicCalendar.
   * @example
   * // Update or create a AcademicCalendar
   * const academicCalendar = await prisma.academicCalendar.upsert({
   *   create: {
   *     // ... data to create a AcademicCalendar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AcademicCalendar we want to update
   *   }
   * })
   */
  upsert<T extends AcademicCalendarUpsertArgs>(args: Prisma.SelectSubset<T, AcademicCalendarUpsertArgs<ExtArgs>>): Prisma.Prisma__AcademicCalendarClient<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AcademicCalendars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarCountArgs} args - Arguments to filter AcademicCalendars to count.
   * @example
   * // Count the number of AcademicCalendars
   * const count = await prisma.academicCalendar.count({
   *   where: {
   *     // ... the filter for the AcademicCalendars we want to count
   *   }
   * })
  **/
  count<T extends AcademicCalendarCountArgs>(
    args?: Prisma.Subset<T, AcademicCalendarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AcademicCalendarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AcademicCalendar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AcademicCalendarAggregateArgs>(args: Prisma.Subset<T, AcademicCalendarAggregateArgs>): Prisma.PrismaPromise<GetAcademicCalendarAggregateType<T>>

  /**
   * Group by AcademicCalendar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicCalendarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AcademicCalendarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AcademicCalendarGroupByArgs['orderBy'] }
      : { orderBy?: AcademicCalendarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AcademicCalendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicCalendarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AcademicCalendar model
 */
readonly fields: AcademicCalendarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AcademicCalendar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AcademicCalendarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  academicYear<T extends Prisma.AcademicCalendar$academicYearArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicCalendar$academicYearArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AcademicCalendar model
 */
export interface AcademicCalendarFieldRefs {
  readonly id: Prisma.FieldRef<"AcademicCalendar", 'String'>
  readonly organizationId: Prisma.FieldRef<"AcademicCalendar", 'String'>
  readonly name: Prisma.FieldRef<"AcademicCalendar", 'String'>
  readonly startDate: Prisma.FieldRef<"AcademicCalendar", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"AcademicCalendar", 'DateTime'>
  readonly type: Prisma.FieldRef<"AcademicCalendar", 'CalendarEventType'>
  readonly reason: Prisma.FieldRef<"AcademicCalendar", 'String'>
  readonly isRecurring: Prisma.FieldRef<"AcademicCalendar", 'Boolean'>
  readonly createdBy: Prisma.FieldRef<"AcademicCalendar", 'String'>
  readonly createdAt: Prisma.FieldRef<"AcademicCalendar", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AcademicCalendar", 'DateTime'>
  readonly academicYearId: Prisma.FieldRef<"AcademicCalendar", 'String'>
}
    

// Custom InputTypes
/**
 * AcademicCalendar findUnique
 */
export type AcademicCalendarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * Filter, which AcademicCalendar to fetch.
   */
  where: Prisma.AcademicCalendarWhereUniqueInput
}

/**
 * AcademicCalendar findUniqueOrThrow
 */
export type AcademicCalendarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * Filter, which AcademicCalendar to fetch.
   */
  where: Prisma.AcademicCalendarWhereUniqueInput
}

/**
 * AcademicCalendar findFirst
 */
export type AcademicCalendarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * Filter, which AcademicCalendar to fetch.
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicCalendars to fetch.
   */
  orderBy?: Prisma.AcademicCalendarOrderByWithRelationInput | Prisma.AcademicCalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AcademicCalendars.
   */
  cursor?: Prisma.AcademicCalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicCalendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicCalendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AcademicCalendars.
   */
  distinct?: Prisma.AcademicCalendarScalarFieldEnum | Prisma.AcademicCalendarScalarFieldEnum[]
}

/**
 * AcademicCalendar findFirstOrThrow
 */
export type AcademicCalendarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * Filter, which AcademicCalendar to fetch.
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicCalendars to fetch.
   */
  orderBy?: Prisma.AcademicCalendarOrderByWithRelationInput | Prisma.AcademicCalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AcademicCalendars.
   */
  cursor?: Prisma.AcademicCalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicCalendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicCalendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AcademicCalendars.
   */
  distinct?: Prisma.AcademicCalendarScalarFieldEnum | Prisma.AcademicCalendarScalarFieldEnum[]
}

/**
 * AcademicCalendar findMany
 */
export type AcademicCalendarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * Filter, which AcademicCalendars to fetch.
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicCalendars to fetch.
   */
  orderBy?: Prisma.AcademicCalendarOrderByWithRelationInput | Prisma.AcademicCalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AcademicCalendars.
   */
  cursor?: Prisma.AcademicCalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicCalendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicCalendars.
   */
  skip?: number
  distinct?: Prisma.AcademicCalendarScalarFieldEnum | Prisma.AcademicCalendarScalarFieldEnum[]
}

/**
 * AcademicCalendar create
 */
export type AcademicCalendarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * The data needed to create a AcademicCalendar.
   */
  data: Prisma.XOR<Prisma.AcademicCalendarCreateInput, Prisma.AcademicCalendarUncheckedCreateInput>
}

/**
 * AcademicCalendar createMany
 */
export type AcademicCalendarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AcademicCalendars.
   */
  data: Prisma.AcademicCalendarCreateManyInput | Prisma.AcademicCalendarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AcademicCalendar createManyAndReturn
 */
export type AcademicCalendarCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * The data used to create many AcademicCalendars.
   */
  data: Prisma.AcademicCalendarCreateManyInput | Prisma.AcademicCalendarCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AcademicCalendar update
 */
export type AcademicCalendarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * The data needed to update a AcademicCalendar.
   */
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateInput, Prisma.AcademicCalendarUncheckedUpdateInput>
  /**
   * Choose, which AcademicCalendar to update.
   */
  where: Prisma.AcademicCalendarWhereUniqueInput
}

/**
 * AcademicCalendar updateMany
 */
export type AcademicCalendarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AcademicCalendars.
   */
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateManyMutationInput, Prisma.AcademicCalendarUncheckedUpdateManyInput>
  /**
   * Filter which AcademicCalendars to update
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * Limit how many AcademicCalendars to update.
   */
  limit?: number
}

/**
 * AcademicCalendar updateManyAndReturn
 */
export type AcademicCalendarUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * The data used to update AcademicCalendars.
   */
  data: Prisma.XOR<Prisma.AcademicCalendarUpdateManyMutationInput, Prisma.AcademicCalendarUncheckedUpdateManyInput>
  /**
   * Filter which AcademicCalendars to update
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * Limit how many AcademicCalendars to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AcademicCalendar upsert
 */
export type AcademicCalendarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * The filter to search for the AcademicCalendar to update in case it exists.
   */
  where: Prisma.AcademicCalendarWhereUniqueInput
  /**
   * In case the AcademicCalendar found by the `where` argument doesn't exist, create a new AcademicCalendar with this data.
   */
  create: Prisma.XOR<Prisma.AcademicCalendarCreateInput, Prisma.AcademicCalendarUncheckedCreateInput>
  /**
   * In case the AcademicCalendar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AcademicCalendarUpdateInput, Prisma.AcademicCalendarUncheckedUpdateInput>
}

/**
 * AcademicCalendar delete
 */
export type AcademicCalendarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  /**
   * Filter which AcademicCalendar to delete.
   */
  where: Prisma.AcademicCalendarWhereUniqueInput
}

/**
 * AcademicCalendar deleteMany
 */
export type AcademicCalendarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AcademicCalendars to delete
   */
  where?: Prisma.AcademicCalendarWhereInput
  /**
   * Limit how many AcademicCalendars to delete.
   */
  limit?: number
}

/**
 * AcademicCalendar.academicYear
 */
export type AcademicCalendar$academicYearArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  where?: Prisma.AcademicYearWhereInput
}

/**
 * AcademicCalendar without action
 */
export type AcademicCalendarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
}
