
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AcademicYear` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AcademicYear
 * 
 */
export type AcademicYearModel = runtime.Types.Result.DefaultSelection<Prisma.$AcademicYearPayload>

export type AggregateAcademicYear = {
  _count: AcademicYearCountAggregateOutputType | null
  _min: AcademicYearMinAggregateOutputType | null
  _max: AcademicYearMaxAggregateOutputType | null
}

export type AcademicYearMinAggregateOutputType = {
  id: string | null
  organizationId: string | null
  name: string | null
  startDate: Date | null
  endDate: Date | null
  type: $Enums.YearType | null
  isCurrent: boolean | null
  description: string | null
  createdBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AcademicYearMaxAggregateOutputType = {
  id: string | null
  organizationId: string | null
  name: string | null
  startDate: Date | null
  endDate: Date | null
  type: $Enums.YearType | null
  isCurrent: boolean | null
  description: string | null
  createdBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AcademicYearCountAggregateOutputType = {
  id: number
  organizationId: number
  name: number
  startDate: number
  endDate: number
  type: number
  isCurrent: number
  description: number
  createdBy: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AcademicYearMinAggregateInputType = {
  id?: true
  organizationId?: true
  name?: true
  startDate?: true
  endDate?: true
  type?: true
  isCurrent?: true
  description?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
}

export type AcademicYearMaxAggregateInputType = {
  id?: true
  organizationId?: true
  name?: true
  startDate?: true
  endDate?: true
  type?: true
  isCurrent?: true
  description?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
}

export type AcademicYearCountAggregateInputType = {
  id?: true
  organizationId?: true
  name?: true
  startDate?: true
  endDate?: true
  type?: true
  isCurrent?: true
  description?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AcademicYearAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AcademicYear to aggregate.
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicYears to fetch.
   */
  orderBy?: Prisma.AcademicYearOrderByWithRelationInput | Prisma.AcademicYearOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AcademicYearWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicYears from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicYears.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AcademicYears
  **/
  _count?: true | AcademicYearCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AcademicYearMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AcademicYearMaxAggregateInputType
}

export type GetAcademicYearAggregateType<T extends AcademicYearAggregateArgs> = {
      [P in keyof T & keyof AggregateAcademicYear]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAcademicYear[P]>
    : Prisma.GetScalarType<T[P], AggregateAcademicYear[P]>
}




export type AcademicYearGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AcademicYearWhereInput
  orderBy?: Prisma.AcademicYearOrderByWithAggregationInput | Prisma.AcademicYearOrderByWithAggregationInput[]
  by: Prisma.AcademicYearScalarFieldEnum[] | Prisma.AcademicYearScalarFieldEnum
  having?: Prisma.AcademicYearScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AcademicYearCountAggregateInputType | true
  _min?: AcademicYearMinAggregateInputType
  _max?: AcademicYearMaxAggregateInputType
}

export type AcademicYearGroupByOutputType = {
  id: string
  organizationId: string
  name: string
  startDate: Date
  endDate: Date
  type: $Enums.YearType
  isCurrent: boolean
  description: string | null
  createdBy: string
  createdAt: Date
  updatedAt: Date
  _count: AcademicYearCountAggregateOutputType | null
  _min: AcademicYearMinAggregateOutputType | null
  _max: AcademicYearMaxAggregateOutputType | null
}

type GetAcademicYearGroupByPayload<T extends AcademicYearGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AcademicYearGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AcademicYearGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AcademicYearGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AcademicYearGroupByOutputType[P]>
      }
    >
  >



export type AcademicYearWhereInput = {
  AND?: Prisma.AcademicYearWhereInput | Prisma.AcademicYearWhereInput[]
  OR?: Prisma.AcademicYearWhereInput[]
  NOT?: Prisma.AcademicYearWhereInput | Prisma.AcademicYearWhereInput[]
  id?: Prisma.StringFilter<"AcademicYear"> | string
  organizationId?: Prisma.StringFilter<"AcademicYear"> | string
  name?: Prisma.StringFilter<"AcademicYear"> | string
  startDate?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  endDate?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  type?: Prisma.EnumYearTypeFilter<"AcademicYear"> | $Enums.YearType
  isCurrent?: Prisma.BoolFilter<"AcademicYear"> | boolean
  description?: Prisma.StringNullableFilter<"AcademicYear"> | string | null
  createdBy?: Prisma.StringFilter<"AcademicYear"> | string
  createdAt?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  complaints?: Prisma.AnonymousComplaintListRelationFilter
  notices?: Prisma.NoticeListRelationFilter
  TeachingAssignment?: Prisma.TeachingAssignmentListRelationFilter
  StudentAttendance?: Prisma.StudentAttendanceListRelationFilter
  AcademicCalendar?: Prisma.AcademicCalendarListRelationFilter
  examSession?: Prisma.ExamSessionListRelationFilter
}

export type AcademicYearOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  complaints?: Prisma.AnonymousComplaintOrderByRelationAggregateInput
  notices?: Prisma.NoticeOrderByRelationAggregateInput
  TeachingAssignment?: Prisma.TeachingAssignmentOrderByRelationAggregateInput
  StudentAttendance?: Prisma.StudentAttendanceOrderByRelationAggregateInput
  AcademicCalendar?: Prisma.AcademicCalendarOrderByRelationAggregateInput
  examSession?: Prisma.ExamSessionOrderByRelationAggregateInput
}

export type AcademicYearWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  organizationId_name?: Prisma.AcademicYearOrganizationIdNameCompoundUniqueInput
  AND?: Prisma.AcademicYearWhereInput | Prisma.AcademicYearWhereInput[]
  OR?: Prisma.AcademicYearWhereInput[]
  NOT?: Prisma.AcademicYearWhereInput | Prisma.AcademicYearWhereInput[]
  organizationId?: Prisma.StringFilter<"AcademicYear"> | string
  name?: Prisma.StringFilter<"AcademicYear"> | string
  startDate?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  endDate?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  type?: Prisma.EnumYearTypeFilter<"AcademicYear"> | $Enums.YearType
  isCurrent?: Prisma.BoolFilter<"AcademicYear"> | boolean
  description?: Prisma.StringNullableFilter<"AcademicYear"> | string | null
  createdBy?: Prisma.StringFilter<"AcademicYear"> | string
  createdAt?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  complaints?: Prisma.AnonymousComplaintListRelationFilter
  notices?: Prisma.NoticeListRelationFilter
  TeachingAssignment?: Prisma.TeachingAssignmentListRelationFilter
  StudentAttendance?: Prisma.StudentAttendanceListRelationFilter
  AcademicCalendar?: Prisma.AcademicCalendarListRelationFilter
  examSession?: Prisma.ExamSessionListRelationFilter
}, "id" | "organizationId_name">

export type AcademicYearOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AcademicYearCountOrderByAggregateInput
  _max?: Prisma.AcademicYearMaxOrderByAggregateInput
  _min?: Prisma.AcademicYearMinOrderByAggregateInput
}

export type AcademicYearScalarWhereWithAggregatesInput = {
  AND?: Prisma.AcademicYearScalarWhereWithAggregatesInput | Prisma.AcademicYearScalarWhereWithAggregatesInput[]
  OR?: Prisma.AcademicYearScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AcademicYearScalarWhereWithAggregatesInput | Prisma.AcademicYearScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AcademicYear"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"AcademicYear"> | string
  name?: Prisma.StringWithAggregatesFilter<"AcademicYear"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"AcademicYear"> | Date | string
  endDate?: Prisma.DateTimeWithAggregatesFilter<"AcademicYear"> | Date | string
  type?: Prisma.EnumYearTypeWithAggregatesFilter<"AcademicYear"> | $Enums.YearType
  isCurrent?: Prisma.BoolWithAggregatesFilter<"AcademicYear"> | boolean
  description?: Prisma.StringNullableWithAggregatesFilter<"AcademicYear"> | string | null
  createdBy?: Prisma.StringWithAggregatesFilter<"AcademicYear"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AcademicYear"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AcademicYear"> | Date | string
}

export type AcademicYearCreateInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateManyInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AcademicYearUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AcademicYearUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AcademicYearOrganizationIdNameCompoundUniqueInput = {
  organizationId: string
  name: string
}

export type AcademicYearCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AcademicYearMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AcademicYearMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AcademicYearListRelationFilter = {
  every?: Prisma.AcademicYearWhereInput
  some?: Prisma.AcademicYearWhereInput
  none?: Prisma.AcademicYearWhereInput
}

export type AcademicYearOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AcademicYearNullableScalarRelationFilter = {
  is?: Prisma.AcademicYearWhereInput | null
  isNot?: Prisma.AcademicYearWhereInput | null
}

export type AcademicYearScalarRelationFilter = {
  is?: Prisma.AcademicYearWhereInput
  isNot?: Prisma.AcademicYearWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type EnumYearTypeFieldUpdateOperationsInput = {
  set?: $Enums.YearType
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type AcademicYearCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutOrganizationInput, Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicYearCreateWithoutOrganizationInput[] | Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput | Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.AcademicYearCreateManyOrganizationInputEnvelope
  connect?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
}

export type AcademicYearUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutOrganizationInput, Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicYearCreateWithoutOrganizationInput[] | Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput | Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.AcademicYearCreateManyOrganizationInputEnvelope
  connect?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
}

export type AcademicYearUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutOrganizationInput, Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicYearCreateWithoutOrganizationInput[] | Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput | Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.AcademicYearUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicYearUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.AcademicYearCreateManyOrganizationInputEnvelope
  set?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  disconnect?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  delete?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  connect?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  update?: Prisma.AcademicYearUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicYearUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.AcademicYearUpdateManyWithWhereWithoutOrganizationInput | Prisma.AcademicYearUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.AcademicYearScalarWhereInput | Prisma.AcademicYearScalarWhereInput[]
}

export type AcademicYearUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutOrganizationInput, Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput> | Prisma.AcademicYearCreateWithoutOrganizationInput[] | Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput | Prisma.AcademicYearCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.AcademicYearUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicYearUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.AcademicYearCreateManyOrganizationInputEnvelope
  set?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  disconnect?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  delete?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  connect?: Prisma.AcademicYearWhereUniqueInput | Prisma.AcademicYearWhereUniqueInput[]
  update?: Prisma.AcademicYearUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.AcademicYearUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.AcademicYearUpdateManyWithWhereWithoutOrganizationInput | Prisma.AcademicYearUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.AcademicYearScalarWhereInput | Prisma.AcademicYearScalarWhereInput[]
}

export type AcademicYearCreateNestedOneWithoutTeachingAssignmentInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutTeachingAssignmentInput, Prisma.AcademicYearUncheckedCreateWithoutTeachingAssignmentInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutTeachingAssignmentInput
  connect?: Prisma.AcademicYearWhereUniqueInput
}

export type AcademicYearUpdateOneWithoutTeachingAssignmentNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutTeachingAssignmentInput, Prisma.AcademicYearUncheckedCreateWithoutTeachingAssignmentInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutTeachingAssignmentInput
  upsert?: Prisma.AcademicYearUpsertWithoutTeachingAssignmentInput
  disconnect?: Prisma.AcademicYearWhereInput | boolean
  delete?: Prisma.AcademicYearWhereInput | boolean
  connect?: Prisma.AcademicYearWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AcademicYearUpdateToOneWithWhereWithoutTeachingAssignmentInput, Prisma.AcademicYearUpdateWithoutTeachingAssignmentInput>, Prisma.AcademicYearUncheckedUpdateWithoutTeachingAssignmentInput>
}

export type AcademicYearCreateNestedOneWithoutStudentAttendanceInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutStudentAttendanceInput, Prisma.AcademicYearUncheckedCreateWithoutStudentAttendanceInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutStudentAttendanceInput
  connect?: Prisma.AcademicYearWhereUniqueInput
}

export type AcademicYearUpdateOneWithoutStudentAttendanceNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutStudentAttendanceInput, Prisma.AcademicYearUncheckedCreateWithoutStudentAttendanceInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutStudentAttendanceInput
  upsert?: Prisma.AcademicYearUpsertWithoutStudentAttendanceInput
  disconnect?: Prisma.AcademicYearWhereInput | boolean
  delete?: Prisma.AcademicYearWhereInput | boolean
  connect?: Prisma.AcademicYearWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AcademicYearUpdateToOneWithWhereWithoutStudentAttendanceInput, Prisma.AcademicYearUpdateWithoutStudentAttendanceInput>, Prisma.AcademicYearUncheckedUpdateWithoutStudentAttendanceInput>
}

export type AcademicYearCreateNestedOneWithoutAcademicCalendarInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutAcademicCalendarInput, Prisma.AcademicYearUncheckedCreateWithoutAcademicCalendarInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutAcademicCalendarInput
  connect?: Prisma.AcademicYearWhereUniqueInput
}

export type AcademicYearUpdateOneWithoutAcademicCalendarNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutAcademicCalendarInput, Prisma.AcademicYearUncheckedCreateWithoutAcademicCalendarInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutAcademicCalendarInput
  upsert?: Prisma.AcademicYearUpsertWithoutAcademicCalendarInput
  disconnect?: Prisma.AcademicYearWhereInput | boolean
  delete?: Prisma.AcademicYearWhereInput | boolean
  connect?: Prisma.AcademicYearWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AcademicYearUpdateToOneWithWhereWithoutAcademicCalendarInput, Prisma.AcademicYearUpdateWithoutAcademicCalendarInput>, Prisma.AcademicYearUncheckedUpdateWithoutAcademicCalendarInput>
}

export type AcademicYearCreateNestedOneWithoutComplaintsInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutComplaintsInput, Prisma.AcademicYearUncheckedCreateWithoutComplaintsInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutComplaintsInput
  connect?: Prisma.AcademicYearWhereUniqueInput
}

export type AcademicYearUpdateOneWithoutComplaintsNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutComplaintsInput, Prisma.AcademicYearUncheckedCreateWithoutComplaintsInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutComplaintsInput
  upsert?: Prisma.AcademicYearUpsertWithoutComplaintsInput
  disconnect?: Prisma.AcademicYearWhereInput | boolean
  delete?: Prisma.AcademicYearWhereInput | boolean
  connect?: Prisma.AcademicYearWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AcademicYearUpdateToOneWithWhereWithoutComplaintsInput, Prisma.AcademicYearUpdateWithoutComplaintsInput>, Prisma.AcademicYearUncheckedUpdateWithoutComplaintsInput>
}

export type AcademicYearCreateNestedOneWithoutNoticesInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutNoticesInput, Prisma.AcademicYearUncheckedCreateWithoutNoticesInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutNoticesInput
  connect?: Prisma.AcademicYearWhereUniqueInput
}

export type AcademicYearUpdateOneWithoutNoticesNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutNoticesInput, Prisma.AcademicYearUncheckedCreateWithoutNoticesInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutNoticesInput
  upsert?: Prisma.AcademicYearUpsertWithoutNoticesInput
  disconnect?: Prisma.AcademicYearWhereInput | boolean
  delete?: Prisma.AcademicYearWhereInput | boolean
  connect?: Prisma.AcademicYearWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AcademicYearUpdateToOneWithWhereWithoutNoticesInput, Prisma.AcademicYearUpdateWithoutNoticesInput>, Prisma.AcademicYearUncheckedUpdateWithoutNoticesInput>
}

export type AcademicYearCreateNestedOneWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutExamSessionInput, Prisma.AcademicYearUncheckedCreateWithoutExamSessionInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutExamSessionInput
  connect?: Prisma.AcademicYearWhereUniqueInput
}

export type AcademicYearUpdateOneRequiredWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.AcademicYearCreateWithoutExamSessionInput, Prisma.AcademicYearUncheckedCreateWithoutExamSessionInput>
  connectOrCreate?: Prisma.AcademicYearCreateOrConnectWithoutExamSessionInput
  upsert?: Prisma.AcademicYearUpsertWithoutExamSessionInput
  connect?: Prisma.AcademicYearWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AcademicYearUpdateToOneWithWhereWithoutExamSessionInput, Prisma.AcademicYearUpdateWithoutExamSessionInput>, Prisma.AcademicYearUncheckedUpdateWithoutExamSessionInput>
}

export type AcademicYearCreateWithoutOrganizationInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutOrganizationInput, Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput>
}

export type AcademicYearCreateManyOrganizationInputEnvelope = {
  data: Prisma.AcademicYearCreateManyOrganizationInput | Prisma.AcademicYearCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type AcademicYearUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutOrganizationInput, Prisma.AcademicYearUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutOrganizationInput, Prisma.AcademicYearUncheckedCreateWithoutOrganizationInput>
}

export type AcademicYearUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutOrganizationInput, Prisma.AcademicYearUncheckedUpdateWithoutOrganizationInput>
}

export type AcademicYearUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.AcademicYearScalarWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateManyMutationInput, Prisma.AcademicYearUncheckedUpdateManyWithoutOrganizationInput>
}

export type AcademicYearScalarWhereInput = {
  AND?: Prisma.AcademicYearScalarWhereInput | Prisma.AcademicYearScalarWhereInput[]
  OR?: Prisma.AcademicYearScalarWhereInput[]
  NOT?: Prisma.AcademicYearScalarWhereInput | Prisma.AcademicYearScalarWhereInput[]
  id?: Prisma.StringFilter<"AcademicYear"> | string
  organizationId?: Prisma.StringFilter<"AcademicYear"> | string
  name?: Prisma.StringFilter<"AcademicYear"> | string
  startDate?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  endDate?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  type?: Prisma.EnumYearTypeFilter<"AcademicYear"> | $Enums.YearType
  isCurrent?: Prisma.BoolFilter<"AcademicYear"> | boolean
  description?: Prisma.StringNullableFilter<"AcademicYear"> | string | null
  createdBy?: Prisma.StringFilter<"AcademicYear"> | string
  createdAt?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AcademicYear"> | Date | string
}

export type AcademicYearCreateWithoutTeachingAssignmentInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutTeachingAssignmentInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutTeachingAssignmentInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutTeachingAssignmentInput, Prisma.AcademicYearUncheckedCreateWithoutTeachingAssignmentInput>
}

export type AcademicYearUpsertWithoutTeachingAssignmentInput = {
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutTeachingAssignmentInput, Prisma.AcademicYearUncheckedUpdateWithoutTeachingAssignmentInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutTeachingAssignmentInput, Prisma.AcademicYearUncheckedCreateWithoutTeachingAssignmentInput>
  where?: Prisma.AcademicYearWhereInput
}

export type AcademicYearUpdateToOneWithWhereWithoutTeachingAssignmentInput = {
  where?: Prisma.AcademicYearWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutTeachingAssignmentInput, Prisma.AcademicYearUncheckedUpdateWithoutTeachingAssignmentInput>
}

export type AcademicYearUpdateWithoutTeachingAssignmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutTeachingAssignmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateWithoutStudentAttendanceInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutStudentAttendanceInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutStudentAttendanceInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutStudentAttendanceInput, Prisma.AcademicYearUncheckedCreateWithoutStudentAttendanceInput>
}

export type AcademicYearUpsertWithoutStudentAttendanceInput = {
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutStudentAttendanceInput, Prisma.AcademicYearUncheckedUpdateWithoutStudentAttendanceInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutStudentAttendanceInput, Prisma.AcademicYearUncheckedCreateWithoutStudentAttendanceInput>
  where?: Prisma.AcademicYearWhereInput
}

export type AcademicYearUpdateToOneWithWhereWithoutStudentAttendanceInput = {
  where?: Prisma.AcademicYearWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutStudentAttendanceInput, Prisma.AcademicYearUncheckedUpdateWithoutStudentAttendanceInput>
}

export type AcademicYearUpdateWithoutStudentAttendanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutStudentAttendanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateWithoutAcademicCalendarInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutAcademicCalendarInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutAcademicCalendarInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutAcademicCalendarInput, Prisma.AcademicYearUncheckedCreateWithoutAcademicCalendarInput>
}

export type AcademicYearUpsertWithoutAcademicCalendarInput = {
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutAcademicCalendarInput, Prisma.AcademicYearUncheckedUpdateWithoutAcademicCalendarInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutAcademicCalendarInput, Prisma.AcademicYearUncheckedCreateWithoutAcademicCalendarInput>
  where?: Prisma.AcademicYearWhereInput
}

export type AcademicYearUpdateToOneWithWhereWithoutAcademicCalendarInput = {
  where?: Prisma.AcademicYearWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutAcademicCalendarInput, Prisma.AcademicYearUncheckedUpdateWithoutAcademicCalendarInput>
}

export type AcademicYearUpdateWithoutAcademicCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutAcademicCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateWithoutComplaintsInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutComplaintsInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutComplaintsInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutComplaintsInput, Prisma.AcademicYearUncheckedCreateWithoutComplaintsInput>
}

export type AcademicYearUpsertWithoutComplaintsInput = {
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutComplaintsInput, Prisma.AcademicYearUncheckedUpdateWithoutComplaintsInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutComplaintsInput, Prisma.AcademicYearUncheckedCreateWithoutComplaintsInput>
  where?: Prisma.AcademicYearWhereInput
}

export type AcademicYearUpdateToOneWithWhereWithoutComplaintsInput = {
  where?: Prisma.AcademicYearWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutComplaintsInput, Prisma.AcademicYearUncheckedUpdateWithoutComplaintsInput>
}

export type AcademicYearUpdateWithoutComplaintsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutComplaintsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateWithoutNoticesInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutNoticesInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
  examSession?: Prisma.ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutNoticesInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutNoticesInput, Prisma.AcademicYearUncheckedCreateWithoutNoticesInput>
}

export type AcademicYearUpsertWithoutNoticesInput = {
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutNoticesInput, Prisma.AcademicYearUncheckedUpdateWithoutNoticesInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutNoticesInput, Prisma.AcademicYearUncheckedCreateWithoutNoticesInput>
  where?: Prisma.AcademicYearWhereInput
}

export type AcademicYearUpdateToOneWithWhereWithoutNoticesInput = {
  where?: Prisma.AcademicYearWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutNoticesInput, Prisma.AcademicYearUncheckedUpdateWithoutNoticesInput>
}

export type AcademicYearUpdateWithoutNoticesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutNoticesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateWithoutExamSessionInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAcademicYearInput
  complaints?: Prisma.AnonymousComplaintCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearUncheckedCreateWithoutExamSessionInput = {
  id?: string
  organizationId: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput
  notices?: Prisma.NoticeUncheckedCreateNestedManyWithoutAcademicYearInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedCreateNestedManyWithoutAcademicYearInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutAcademicYearInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedCreateNestedManyWithoutAcademicYearInput
}

export type AcademicYearCreateOrConnectWithoutExamSessionInput = {
  where: Prisma.AcademicYearWhereUniqueInput
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutExamSessionInput, Prisma.AcademicYearUncheckedCreateWithoutExamSessionInput>
}

export type AcademicYearUpsertWithoutExamSessionInput = {
  update: Prisma.XOR<Prisma.AcademicYearUpdateWithoutExamSessionInput, Prisma.AcademicYearUncheckedUpdateWithoutExamSessionInput>
  create: Prisma.XOR<Prisma.AcademicYearCreateWithoutExamSessionInput, Prisma.AcademicYearUncheckedCreateWithoutExamSessionInput>
  where?: Prisma.AcademicYearWhereInput
}

export type AcademicYearUpdateToOneWithWhereWithoutExamSessionInput = {
  where?: Prisma.AcademicYearWhereInput
  data: Prisma.XOR<Prisma.AcademicYearUpdateWithoutExamSessionInput, Prisma.AcademicYearUncheckedUpdateWithoutExamSessionInput>
}

export type AcademicYearUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAcademicYearNestedInput
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearCreateManyOrganizationInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate: Date | string
  type?: $Enums.YearType
  isCurrent?: boolean
  description?: string | null
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AcademicYearUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput
  notices?: Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput
  TeachingAssignment?: Prisma.TeachingAssignmentUncheckedUpdateManyWithoutAcademicYearNestedInput
  StudentAttendance?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutAcademicYearNestedInput
  AcademicCalendar?: Prisma.AcademicCalendarUncheckedUpdateManyWithoutAcademicYearNestedInput
  examSession?: Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput
}

export type AcademicYearUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.EnumYearTypeFieldUpdateOperationsInput | $Enums.YearType
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type AcademicYearCountOutputType
 */

export type AcademicYearCountOutputType = {
  complaints: number
  notices: number
  TeachingAssignment: number
  StudentAttendance: number
  AcademicCalendar: number
  examSession: number
}

export type AcademicYearCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complaints?: boolean | AcademicYearCountOutputTypeCountComplaintsArgs
  notices?: boolean | AcademicYearCountOutputTypeCountNoticesArgs
  TeachingAssignment?: boolean | AcademicYearCountOutputTypeCountTeachingAssignmentArgs
  StudentAttendance?: boolean | AcademicYearCountOutputTypeCountStudentAttendanceArgs
  AcademicCalendar?: boolean | AcademicYearCountOutputTypeCountAcademicCalendarArgs
  examSession?: boolean | AcademicYearCountOutputTypeCountExamSessionArgs
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYearCountOutputType
   */
  select?: Prisma.AcademicYearCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeCountComplaintsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnonymousComplaintWhereInput
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeCountNoticesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoticeWhereInput
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeCountTeachingAssignmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeachingAssignmentWhereInput
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeCountStudentAttendanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StudentAttendanceWhereInput
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeCountAcademicCalendarArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AcademicCalendarWhereInput
}

/**
 * AcademicYearCountOutputType without action
 */
export type AcademicYearCountOutputTypeCountExamSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamSessionWhereInput
}


export type AcademicYearSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  isCurrent?: boolean
  description?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  complaints?: boolean | Prisma.AcademicYear$complaintsArgs<ExtArgs>
  notices?: boolean | Prisma.AcademicYear$noticesArgs<ExtArgs>
  TeachingAssignment?: boolean | Prisma.AcademicYear$TeachingAssignmentArgs<ExtArgs>
  StudentAttendance?: boolean | Prisma.AcademicYear$StudentAttendanceArgs<ExtArgs>
  AcademicCalendar?: boolean | Prisma.AcademicYear$AcademicCalendarArgs<ExtArgs>
  examSession?: boolean | Prisma.AcademicYear$examSessionArgs<ExtArgs>
  _count?: boolean | Prisma.AcademicYearCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["academicYear"]>

export type AcademicYearSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  isCurrent?: boolean
  description?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["academicYear"]>

export type AcademicYearSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  isCurrent?: boolean
  description?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["academicYear"]>

export type AcademicYearSelectScalar = {
  id?: boolean
  organizationId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  type?: boolean
  isCurrent?: boolean
  description?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AcademicYearOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "organizationId" | "name" | "startDate" | "endDate" | "type" | "isCurrent" | "description" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["academicYear"]>
export type AcademicYearInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  complaints?: boolean | Prisma.AcademicYear$complaintsArgs<ExtArgs>
  notices?: boolean | Prisma.AcademicYear$noticesArgs<ExtArgs>
  TeachingAssignment?: boolean | Prisma.AcademicYear$TeachingAssignmentArgs<ExtArgs>
  StudentAttendance?: boolean | Prisma.AcademicYear$StudentAttendanceArgs<ExtArgs>
  AcademicCalendar?: boolean | Prisma.AcademicYear$AcademicCalendarArgs<ExtArgs>
  examSession?: boolean | Prisma.AcademicYear$examSessionArgs<ExtArgs>
  _count?: boolean | Prisma.AcademicYearCountOutputTypeDefaultArgs<ExtArgs>
}
export type AcademicYearIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type AcademicYearIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $AcademicYearPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AcademicYear"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    complaints: Prisma.$AnonymousComplaintPayload<ExtArgs>[]
    notices: Prisma.$NoticePayload<ExtArgs>[]
    TeachingAssignment: Prisma.$TeachingAssignmentPayload<ExtArgs>[]
    StudentAttendance: Prisma.$StudentAttendancePayload<ExtArgs>[]
    AcademicCalendar: Prisma.$AcademicCalendarPayload<ExtArgs>[]
    examSession: Prisma.$ExamSessionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    organizationId: string
    name: string
    startDate: Date
    endDate: Date
    type: $Enums.YearType
    isCurrent: boolean
    description: string | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["academicYear"]>
  composites: {}
}

export type AcademicYearGetPayload<S extends boolean | null | undefined | AcademicYearDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload, S>

export type AcademicYearCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AcademicYearFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AcademicYearCountAggregateInputType | true
  }

export interface AcademicYearDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicYear'], meta: { name: 'AcademicYear' } }
  /**
   * Find zero or one AcademicYear that matches the filter.
   * @param {AcademicYearFindUniqueArgs} args - Arguments to find a AcademicYear
   * @example
   * // Get one AcademicYear
   * const academicYear = await prisma.academicYear.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AcademicYearFindUniqueArgs>(args: Prisma.SelectSubset<T, AcademicYearFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AcademicYear that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AcademicYearFindUniqueOrThrowArgs} args - Arguments to find a AcademicYear
   * @example
   * // Get one AcademicYear
   * const academicYear = await prisma.academicYear.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AcademicYearFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AcademicYearFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AcademicYear that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearFindFirstArgs} args - Arguments to find a AcademicYear
   * @example
   * // Get one AcademicYear
   * const academicYear = await prisma.academicYear.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AcademicYearFindFirstArgs>(args?: Prisma.SelectSubset<T, AcademicYearFindFirstArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AcademicYear that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearFindFirstOrThrowArgs} args - Arguments to find a AcademicYear
   * @example
   * // Get one AcademicYear
   * const academicYear = await prisma.academicYear.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AcademicYearFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AcademicYearFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AcademicYears that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AcademicYears
   * const academicYears = await prisma.academicYear.findMany()
   * 
   * // Get first 10 AcademicYears
   * const academicYears = await prisma.academicYear.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const academicYearWithIdOnly = await prisma.academicYear.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AcademicYearFindManyArgs>(args?: Prisma.SelectSubset<T, AcademicYearFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AcademicYear.
   * @param {AcademicYearCreateArgs} args - Arguments to create a AcademicYear.
   * @example
   * // Create one AcademicYear
   * const AcademicYear = await prisma.academicYear.create({
   *   data: {
   *     // ... data to create a AcademicYear
   *   }
   * })
   * 
   */
  create<T extends AcademicYearCreateArgs>(args: Prisma.SelectSubset<T, AcademicYearCreateArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AcademicYears.
   * @param {AcademicYearCreateManyArgs} args - Arguments to create many AcademicYears.
   * @example
   * // Create many AcademicYears
   * const academicYear = await prisma.academicYear.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AcademicYearCreateManyArgs>(args?: Prisma.SelectSubset<T, AcademicYearCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AcademicYears and returns the data saved in the database.
   * @param {AcademicYearCreateManyAndReturnArgs} args - Arguments to create many AcademicYears.
   * @example
   * // Create many AcademicYears
   * const academicYear = await prisma.academicYear.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AcademicYears and only return the `id`
   * const academicYearWithIdOnly = await prisma.academicYear.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AcademicYearCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AcademicYearCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AcademicYear.
   * @param {AcademicYearDeleteArgs} args - Arguments to delete one AcademicYear.
   * @example
   * // Delete one AcademicYear
   * const AcademicYear = await prisma.academicYear.delete({
   *   where: {
   *     // ... filter to delete one AcademicYear
   *   }
   * })
   * 
   */
  delete<T extends AcademicYearDeleteArgs>(args: Prisma.SelectSubset<T, AcademicYearDeleteArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AcademicYear.
   * @param {AcademicYearUpdateArgs} args - Arguments to update one AcademicYear.
   * @example
   * // Update one AcademicYear
   * const academicYear = await prisma.academicYear.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AcademicYearUpdateArgs>(args: Prisma.SelectSubset<T, AcademicYearUpdateArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AcademicYears.
   * @param {AcademicYearDeleteManyArgs} args - Arguments to filter AcademicYears to delete.
   * @example
   * // Delete a few AcademicYears
   * const { count } = await prisma.academicYear.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AcademicYearDeleteManyArgs>(args?: Prisma.SelectSubset<T, AcademicYearDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AcademicYears.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AcademicYears
   * const academicYear = await prisma.academicYear.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AcademicYearUpdateManyArgs>(args: Prisma.SelectSubset<T, AcademicYearUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AcademicYears and returns the data updated in the database.
   * @param {AcademicYearUpdateManyAndReturnArgs} args - Arguments to update many AcademicYears.
   * @example
   * // Update many AcademicYears
   * const academicYear = await prisma.academicYear.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AcademicYears and only return the `id`
   * const academicYearWithIdOnly = await prisma.academicYear.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AcademicYearUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AcademicYearUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AcademicYear.
   * @param {AcademicYearUpsertArgs} args - Arguments to update or create a AcademicYear.
   * @example
   * // Update or create a AcademicYear
   * const academicYear = await prisma.academicYear.upsert({
   *   create: {
   *     // ... data to create a AcademicYear
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AcademicYear we want to update
   *   }
   * })
   */
  upsert<T extends AcademicYearUpsertArgs>(args: Prisma.SelectSubset<T, AcademicYearUpsertArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AcademicYears.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearCountArgs} args - Arguments to filter AcademicYears to count.
   * @example
   * // Count the number of AcademicYears
   * const count = await prisma.academicYear.count({
   *   where: {
   *     // ... the filter for the AcademicYears we want to count
   *   }
   * })
  **/
  count<T extends AcademicYearCountArgs>(
    args?: Prisma.Subset<T, AcademicYearCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AcademicYearCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AcademicYear.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AcademicYearAggregateArgs>(args: Prisma.Subset<T, AcademicYearAggregateArgs>): Prisma.PrismaPromise<GetAcademicYearAggregateType<T>>

  /**
   * Group by AcademicYear.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AcademicYearGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AcademicYearGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AcademicYearGroupByArgs['orderBy'] }
      : { orderBy?: AcademicYearGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AcademicYearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicYearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AcademicYear model
 */
readonly fields: AcademicYearFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AcademicYear.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AcademicYearClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  complaints<T extends Prisma.AcademicYear$complaintsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYear$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  notices<T extends Prisma.AcademicYear$noticesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYear$noticesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  TeachingAssignment<T extends Prisma.AcademicYear$TeachingAssignmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYear$TeachingAssignmentArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeachingAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  StudentAttendance<T extends Prisma.AcademicYear$StudentAttendanceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYear$StudentAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  AcademicCalendar<T extends Prisma.AcademicYear$AcademicCalendarArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYear$AcademicCalendarArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicCalendarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  examSession<T extends Prisma.AcademicYear$examSessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYear$examSessionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AcademicYear model
 */
export interface AcademicYearFieldRefs {
  readonly id: Prisma.FieldRef<"AcademicYear", 'String'>
  readonly organizationId: Prisma.FieldRef<"AcademicYear", 'String'>
  readonly name: Prisma.FieldRef<"AcademicYear", 'String'>
  readonly startDate: Prisma.FieldRef<"AcademicYear", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"AcademicYear", 'DateTime'>
  readonly type: Prisma.FieldRef<"AcademicYear", 'YearType'>
  readonly isCurrent: Prisma.FieldRef<"AcademicYear", 'Boolean'>
  readonly description: Prisma.FieldRef<"AcademicYear", 'String'>
  readonly createdBy: Prisma.FieldRef<"AcademicYear", 'String'>
  readonly createdAt: Prisma.FieldRef<"AcademicYear", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AcademicYear", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AcademicYear findUnique
 */
export type AcademicYearFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * Filter, which AcademicYear to fetch.
   */
  where: Prisma.AcademicYearWhereUniqueInput
}

/**
 * AcademicYear findUniqueOrThrow
 */
export type AcademicYearFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * Filter, which AcademicYear to fetch.
   */
  where: Prisma.AcademicYearWhereUniqueInput
}

/**
 * AcademicYear findFirst
 */
export type AcademicYearFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * Filter, which AcademicYear to fetch.
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicYears to fetch.
   */
  orderBy?: Prisma.AcademicYearOrderByWithRelationInput | Prisma.AcademicYearOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AcademicYears.
   */
  cursor?: Prisma.AcademicYearWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicYears from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicYears.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AcademicYears.
   */
  distinct?: Prisma.AcademicYearScalarFieldEnum | Prisma.AcademicYearScalarFieldEnum[]
}

/**
 * AcademicYear findFirstOrThrow
 */
export type AcademicYearFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * Filter, which AcademicYear to fetch.
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicYears to fetch.
   */
  orderBy?: Prisma.AcademicYearOrderByWithRelationInput | Prisma.AcademicYearOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AcademicYears.
   */
  cursor?: Prisma.AcademicYearWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicYears from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicYears.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AcademicYears.
   */
  distinct?: Prisma.AcademicYearScalarFieldEnum | Prisma.AcademicYearScalarFieldEnum[]
}

/**
 * AcademicYear findMany
 */
export type AcademicYearFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * Filter, which AcademicYears to fetch.
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AcademicYears to fetch.
   */
  orderBy?: Prisma.AcademicYearOrderByWithRelationInput | Prisma.AcademicYearOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AcademicYears.
   */
  cursor?: Prisma.AcademicYearWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AcademicYears from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AcademicYears.
   */
  skip?: number
  distinct?: Prisma.AcademicYearScalarFieldEnum | Prisma.AcademicYearScalarFieldEnum[]
}

/**
 * AcademicYear create
 */
export type AcademicYearCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * The data needed to create a AcademicYear.
   */
  data: Prisma.XOR<Prisma.AcademicYearCreateInput, Prisma.AcademicYearUncheckedCreateInput>
}

/**
 * AcademicYear createMany
 */
export type AcademicYearCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AcademicYears.
   */
  data: Prisma.AcademicYearCreateManyInput | Prisma.AcademicYearCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AcademicYear createManyAndReturn
 */
export type AcademicYearCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * The data used to create many AcademicYears.
   */
  data: Prisma.AcademicYearCreateManyInput | Prisma.AcademicYearCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AcademicYear update
 */
export type AcademicYearUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * The data needed to update a AcademicYear.
   */
  data: Prisma.XOR<Prisma.AcademicYearUpdateInput, Prisma.AcademicYearUncheckedUpdateInput>
  /**
   * Choose, which AcademicYear to update.
   */
  where: Prisma.AcademicYearWhereUniqueInput
}

/**
 * AcademicYear updateMany
 */
export type AcademicYearUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AcademicYears.
   */
  data: Prisma.XOR<Prisma.AcademicYearUpdateManyMutationInput, Prisma.AcademicYearUncheckedUpdateManyInput>
  /**
   * Filter which AcademicYears to update
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * Limit how many AcademicYears to update.
   */
  limit?: number
}

/**
 * AcademicYear updateManyAndReturn
 */
export type AcademicYearUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * The data used to update AcademicYears.
   */
  data: Prisma.XOR<Prisma.AcademicYearUpdateManyMutationInput, Prisma.AcademicYearUncheckedUpdateManyInput>
  /**
   * Filter which AcademicYears to update
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * Limit how many AcademicYears to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AcademicYear upsert
 */
export type AcademicYearUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * The filter to search for the AcademicYear to update in case it exists.
   */
  where: Prisma.AcademicYearWhereUniqueInput
  /**
   * In case the AcademicYear found by the `where` argument doesn't exist, create a new AcademicYear with this data.
   */
  create: Prisma.XOR<Prisma.AcademicYearCreateInput, Prisma.AcademicYearUncheckedCreateInput>
  /**
   * In case the AcademicYear was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AcademicYearUpdateInput, Prisma.AcademicYearUncheckedUpdateInput>
}

/**
 * AcademicYear delete
 */
export type AcademicYearDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  /**
   * Filter which AcademicYear to delete.
   */
  where: Prisma.AcademicYearWhereUniqueInput
}

/**
 * AcademicYear deleteMany
 */
export type AcademicYearDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AcademicYears to delete
   */
  where?: Prisma.AcademicYearWhereInput
  /**
   * Limit how many AcademicYears to delete.
   */
  limit?: number
}

/**
 * AcademicYear.complaints
 */
export type AcademicYear$complaintsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  where?: Prisma.AnonymousComplaintWhereInput
  orderBy?: Prisma.AnonymousComplaintOrderByWithRelationInput | Prisma.AnonymousComplaintOrderByWithRelationInput[]
  cursor?: Prisma.AnonymousComplaintWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AnonymousComplaintScalarFieldEnum | Prisma.AnonymousComplaintScalarFieldEnum[]
}

/**
 * AcademicYear.notices
 */
export type AcademicYear$noticesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  where?: Prisma.NoticeWhereInput
  orderBy?: Prisma.NoticeOrderByWithRelationInput | Prisma.NoticeOrderByWithRelationInput[]
  cursor?: Prisma.NoticeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[]
}

/**
 * AcademicYear.TeachingAssignment
 */
export type AcademicYear$TeachingAssignmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeachingAssignment
   */
  select?: Prisma.TeachingAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeachingAssignment
   */
  omit?: Prisma.TeachingAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeachingAssignmentInclude<ExtArgs> | null
  where?: Prisma.TeachingAssignmentWhereInput
  orderBy?: Prisma.TeachingAssignmentOrderByWithRelationInput | Prisma.TeachingAssignmentOrderByWithRelationInput[]
  cursor?: Prisma.TeachingAssignmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TeachingAssignmentScalarFieldEnum | Prisma.TeachingAssignmentScalarFieldEnum[]
}

/**
 * AcademicYear.StudentAttendance
 */
export type AcademicYear$StudentAttendanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentAttendance
   */
  select?: Prisma.StudentAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentAttendance
   */
  omit?: Prisma.StudentAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentAttendanceInclude<ExtArgs> | null
  where?: Prisma.StudentAttendanceWhereInput
  orderBy?: Prisma.StudentAttendanceOrderByWithRelationInput | Prisma.StudentAttendanceOrderByWithRelationInput[]
  cursor?: Prisma.StudentAttendanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StudentAttendanceScalarFieldEnum | Prisma.StudentAttendanceScalarFieldEnum[]
}

/**
 * AcademicYear.AcademicCalendar
 */
export type AcademicYear$AcademicCalendarArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicCalendar
   */
  select?: Prisma.AcademicCalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicCalendar
   */
  omit?: Prisma.AcademicCalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicCalendarInclude<ExtArgs> | null
  where?: Prisma.AcademicCalendarWhereInput
  orderBy?: Prisma.AcademicCalendarOrderByWithRelationInput | Prisma.AcademicCalendarOrderByWithRelationInput[]
  cursor?: Prisma.AcademicCalendarWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AcademicCalendarScalarFieldEnum | Prisma.AcademicCalendarScalarFieldEnum[]
}

/**
 * AcademicYear.examSession
 */
export type AcademicYear$examSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  where?: Prisma.ExamSessionWhereInput
  orderBy?: Prisma.ExamSessionOrderByWithRelationInput | Prisma.ExamSessionOrderByWithRelationInput[]
  cursor?: Prisma.ExamSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamSessionScalarFieldEnum | Prisma.ExamSessionScalarFieldEnum[]
}

/**
 * AcademicYear without action
 */
export type AcademicYearDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
}
