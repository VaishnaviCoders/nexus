
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `NoticeAttachment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model NoticeAttachment
 * 
 */
export type NoticeAttachmentModel = runtime.Types.Result.DefaultSelection<Prisma.$NoticeAttachmentPayload>

export type AggregateNoticeAttachment = {
  _count: NoticeAttachmentCountAggregateOutputType | null
  _avg: NoticeAttachmentAvgAggregateOutputType | null
  _sum: NoticeAttachmentSumAggregateOutputType | null
  _min: NoticeAttachmentMinAggregateOutputType | null
  _max: NoticeAttachmentMaxAggregateOutputType | null
}

export type NoticeAttachmentAvgAggregateOutputType = {
  fileSize: number | null
}

export type NoticeAttachmentSumAggregateOutputType = {
  fileSize: number | null
}

export type NoticeAttachmentMinAggregateOutputType = {
  id: string | null
  noticeId: string | null
  fileName: string | null
  fileUrl: string | null
  fileType: string | null
  fileSize: number | null
  publicId: string | null
  uploadedAt: Date | null
}

export type NoticeAttachmentMaxAggregateOutputType = {
  id: string | null
  noticeId: string | null
  fileName: string | null
  fileUrl: string | null
  fileType: string | null
  fileSize: number | null
  publicId: string | null
  uploadedAt: Date | null
}

export type NoticeAttachmentCountAggregateOutputType = {
  id: number
  noticeId: number
  fileName: number
  fileUrl: number
  fileType: number
  fileSize: number
  publicId: number
  uploadedAt: number
  _all: number
}


export type NoticeAttachmentAvgAggregateInputType = {
  fileSize?: true
}

export type NoticeAttachmentSumAggregateInputType = {
  fileSize?: true
}

export type NoticeAttachmentMinAggregateInputType = {
  id?: true
  noticeId?: true
  fileName?: true
  fileUrl?: true
  fileType?: true
  fileSize?: true
  publicId?: true
  uploadedAt?: true
}

export type NoticeAttachmentMaxAggregateInputType = {
  id?: true
  noticeId?: true
  fileName?: true
  fileUrl?: true
  fileType?: true
  fileSize?: true
  publicId?: true
  uploadedAt?: true
}

export type NoticeAttachmentCountAggregateInputType = {
  id?: true
  noticeId?: true
  fileName?: true
  fileUrl?: true
  fileType?: true
  fileSize?: true
  publicId?: true
  uploadedAt?: true
  _all?: true
}

export type NoticeAttachmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NoticeAttachment to aggregate.
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NoticeAttachments to fetch.
   */
  orderBy?: Prisma.NoticeAttachmentOrderByWithRelationInput | Prisma.NoticeAttachmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NoticeAttachmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NoticeAttachments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NoticeAttachments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned NoticeAttachments
  **/
  _count?: true | NoticeAttachmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NoticeAttachmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NoticeAttachmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NoticeAttachmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NoticeAttachmentMaxAggregateInputType
}

export type GetNoticeAttachmentAggregateType<T extends NoticeAttachmentAggregateArgs> = {
      [P in keyof T & keyof AggregateNoticeAttachment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNoticeAttachment[P]>
    : Prisma.GetScalarType<T[P], AggregateNoticeAttachment[P]>
}




export type NoticeAttachmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoticeAttachmentWhereInput
  orderBy?: Prisma.NoticeAttachmentOrderByWithAggregationInput | Prisma.NoticeAttachmentOrderByWithAggregationInput[]
  by: Prisma.NoticeAttachmentScalarFieldEnum[] | Prisma.NoticeAttachmentScalarFieldEnum
  having?: Prisma.NoticeAttachmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NoticeAttachmentCountAggregateInputType | true
  _avg?: NoticeAttachmentAvgAggregateInputType
  _sum?: NoticeAttachmentSumAggregateInputType
  _min?: NoticeAttachmentMinAggregateInputType
  _max?: NoticeAttachmentMaxAggregateInputType
}

export type NoticeAttachmentGroupByOutputType = {
  id: string
  noticeId: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt: Date
  _count: NoticeAttachmentCountAggregateOutputType | null
  _avg: NoticeAttachmentAvgAggregateOutputType | null
  _sum: NoticeAttachmentSumAggregateOutputType | null
  _min: NoticeAttachmentMinAggregateOutputType | null
  _max: NoticeAttachmentMaxAggregateOutputType | null
}

type GetNoticeAttachmentGroupByPayload<T extends NoticeAttachmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NoticeAttachmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NoticeAttachmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NoticeAttachmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NoticeAttachmentGroupByOutputType[P]>
      }
    >
  >



export type NoticeAttachmentWhereInput = {
  AND?: Prisma.NoticeAttachmentWhereInput | Prisma.NoticeAttachmentWhereInput[]
  OR?: Prisma.NoticeAttachmentWhereInput[]
  NOT?: Prisma.NoticeAttachmentWhereInput | Prisma.NoticeAttachmentWhereInput[]
  id?: Prisma.StringFilter<"NoticeAttachment"> | string
  noticeId?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileName?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileUrl?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileType?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileSize?: Prisma.IntFilter<"NoticeAttachment"> | number
  publicId?: Prisma.StringFilter<"NoticeAttachment"> | string
  uploadedAt?: Prisma.DateTimeFilter<"NoticeAttachment"> | Date | string
  notice?: Prisma.XOR<Prisma.NoticeScalarRelationFilter, Prisma.NoticeWhereInput>
}

export type NoticeAttachmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  notice?: Prisma.NoticeOrderByWithRelationInput
  _relevance?: Prisma.NoticeAttachmentOrderByRelevanceInput
}

export type NoticeAttachmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.NoticeAttachmentWhereInput | Prisma.NoticeAttachmentWhereInput[]
  OR?: Prisma.NoticeAttachmentWhereInput[]
  NOT?: Prisma.NoticeAttachmentWhereInput | Prisma.NoticeAttachmentWhereInput[]
  noticeId?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileName?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileUrl?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileType?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileSize?: Prisma.IntFilter<"NoticeAttachment"> | number
  publicId?: Prisma.StringFilter<"NoticeAttachment"> | string
  uploadedAt?: Prisma.DateTimeFilter<"NoticeAttachment"> | Date | string
  notice?: Prisma.XOR<Prisma.NoticeScalarRelationFilter, Prisma.NoticeWhereInput>
}, "id">

export type NoticeAttachmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  _count?: Prisma.NoticeAttachmentCountOrderByAggregateInput
  _avg?: Prisma.NoticeAttachmentAvgOrderByAggregateInput
  _max?: Prisma.NoticeAttachmentMaxOrderByAggregateInput
  _min?: Prisma.NoticeAttachmentMinOrderByAggregateInput
  _sum?: Prisma.NoticeAttachmentSumOrderByAggregateInput
}

export type NoticeAttachmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.NoticeAttachmentScalarWhereWithAggregatesInput | Prisma.NoticeAttachmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.NoticeAttachmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NoticeAttachmentScalarWhereWithAggregatesInput | Prisma.NoticeAttachmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"NoticeAttachment"> | string
  noticeId?: Prisma.StringWithAggregatesFilter<"NoticeAttachment"> | string
  fileName?: Prisma.StringWithAggregatesFilter<"NoticeAttachment"> | string
  fileUrl?: Prisma.StringWithAggregatesFilter<"NoticeAttachment"> | string
  fileType?: Prisma.StringWithAggregatesFilter<"NoticeAttachment"> | string
  fileSize?: Prisma.IntWithAggregatesFilter<"NoticeAttachment"> | number
  publicId?: Prisma.StringWithAggregatesFilter<"NoticeAttachment"> | string
  uploadedAt?: Prisma.DateTimeWithAggregatesFilter<"NoticeAttachment"> | Date | string
}

export type NoticeAttachmentCreateInput = {
  id?: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt?: Date | string
  notice: Prisma.NoticeCreateNestedOneWithoutAttachmentsInput
}

export type NoticeAttachmentUncheckedCreateInput = {
  id?: string
  noticeId: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt?: Date | string
}

export type NoticeAttachmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notice?: Prisma.NoticeUpdateOneRequiredWithoutAttachmentsNestedInput
}

export type NoticeAttachmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  noticeId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeAttachmentCreateManyInput = {
  id?: string
  noticeId: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt?: Date | string
}

export type NoticeAttachmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeAttachmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  noticeId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeAttachmentListRelationFilter = {
  every?: Prisma.NoticeAttachmentWhereInput
  some?: Prisma.NoticeAttachmentWhereInput
  none?: Prisma.NoticeAttachmentWhereInput
}

export type NoticeAttachmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NoticeAttachmentOrderByRelevanceInput = {
  fields: Prisma.NoticeAttachmentOrderByRelevanceFieldEnum | Prisma.NoticeAttachmentOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type NoticeAttachmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type NoticeAttachmentAvgOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type NoticeAttachmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type NoticeAttachmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type NoticeAttachmentSumOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type NoticeAttachmentCreateNestedManyWithoutNoticeInput = {
  create?: Prisma.XOR<Prisma.NoticeAttachmentCreateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput> | Prisma.NoticeAttachmentCreateWithoutNoticeInput[] | Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput | Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput[]
  createMany?: Prisma.NoticeAttachmentCreateManyNoticeInputEnvelope
  connect?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
}

export type NoticeAttachmentUncheckedCreateNestedManyWithoutNoticeInput = {
  create?: Prisma.XOR<Prisma.NoticeAttachmentCreateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput> | Prisma.NoticeAttachmentCreateWithoutNoticeInput[] | Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput | Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput[]
  createMany?: Prisma.NoticeAttachmentCreateManyNoticeInputEnvelope
  connect?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
}

export type NoticeAttachmentUpdateManyWithoutNoticeNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeAttachmentCreateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput> | Prisma.NoticeAttachmentCreateWithoutNoticeInput[] | Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput | Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput[]
  upsert?: Prisma.NoticeAttachmentUpsertWithWhereUniqueWithoutNoticeInput | Prisma.NoticeAttachmentUpsertWithWhereUniqueWithoutNoticeInput[]
  createMany?: Prisma.NoticeAttachmentCreateManyNoticeInputEnvelope
  set?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  disconnect?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  delete?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  connect?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  update?: Prisma.NoticeAttachmentUpdateWithWhereUniqueWithoutNoticeInput | Prisma.NoticeAttachmentUpdateWithWhereUniqueWithoutNoticeInput[]
  updateMany?: Prisma.NoticeAttachmentUpdateManyWithWhereWithoutNoticeInput | Prisma.NoticeAttachmentUpdateManyWithWhereWithoutNoticeInput[]
  deleteMany?: Prisma.NoticeAttachmentScalarWhereInput | Prisma.NoticeAttachmentScalarWhereInput[]
}

export type NoticeAttachmentUncheckedUpdateManyWithoutNoticeNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeAttachmentCreateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput> | Prisma.NoticeAttachmentCreateWithoutNoticeInput[] | Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput | Prisma.NoticeAttachmentCreateOrConnectWithoutNoticeInput[]
  upsert?: Prisma.NoticeAttachmentUpsertWithWhereUniqueWithoutNoticeInput | Prisma.NoticeAttachmentUpsertWithWhereUniqueWithoutNoticeInput[]
  createMany?: Prisma.NoticeAttachmentCreateManyNoticeInputEnvelope
  set?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  disconnect?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  delete?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  connect?: Prisma.NoticeAttachmentWhereUniqueInput | Prisma.NoticeAttachmentWhereUniqueInput[]
  update?: Prisma.NoticeAttachmentUpdateWithWhereUniqueWithoutNoticeInput | Prisma.NoticeAttachmentUpdateWithWhereUniqueWithoutNoticeInput[]
  updateMany?: Prisma.NoticeAttachmentUpdateManyWithWhereWithoutNoticeInput | Prisma.NoticeAttachmentUpdateManyWithWhereWithoutNoticeInput[]
  deleteMany?: Prisma.NoticeAttachmentScalarWhereInput | Prisma.NoticeAttachmentScalarWhereInput[]
}

export type NoticeAttachmentCreateWithoutNoticeInput = {
  id?: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt?: Date | string
}

export type NoticeAttachmentUncheckedCreateWithoutNoticeInput = {
  id?: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt?: Date | string
}

export type NoticeAttachmentCreateOrConnectWithoutNoticeInput = {
  where: Prisma.NoticeAttachmentWhereUniqueInput
  create: Prisma.XOR<Prisma.NoticeAttachmentCreateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput>
}

export type NoticeAttachmentCreateManyNoticeInputEnvelope = {
  data: Prisma.NoticeAttachmentCreateManyNoticeInput | Prisma.NoticeAttachmentCreateManyNoticeInput[]
  skipDuplicates?: boolean
}

export type NoticeAttachmentUpsertWithWhereUniqueWithoutNoticeInput = {
  where: Prisma.NoticeAttachmentWhereUniqueInput
  update: Prisma.XOR<Prisma.NoticeAttachmentUpdateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedUpdateWithoutNoticeInput>
  create: Prisma.XOR<Prisma.NoticeAttachmentCreateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedCreateWithoutNoticeInput>
}

export type NoticeAttachmentUpdateWithWhereUniqueWithoutNoticeInput = {
  where: Prisma.NoticeAttachmentWhereUniqueInput
  data: Prisma.XOR<Prisma.NoticeAttachmentUpdateWithoutNoticeInput, Prisma.NoticeAttachmentUncheckedUpdateWithoutNoticeInput>
}

export type NoticeAttachmentUpdateManyWithWhereWithoutNoticeInput = {
  where: Prisma.NoticeAttachmentScalarWhereInput
  data: Prisma.XOR<Prisma.NoticeAttachmentUpdateManyMutationInput, Prisma.NoticeAttachmentUncheckedUpdateManyWithoutNoticeInput>
}

export type NoticeAttachmentScalarWhereInput = {
  AND?: Prisma.NoticeAttachmentScalarWhereInput | Prisma.NoticeAttachmentScalarWhereInput[]
  OR?: Prisma.NoticeAttachmentScalarWhereInput[]
  NOT?: Prisma.NoticeAttachmentScalarWhereInput | Prisma.NoticeAttachmentScalarWhereInput[]
  id?: Prisma.StringFilter<"NoticeAttachment"> | string
  noticeId?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileName?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileUrl?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileType?: Prisma.StringFilter<"NoticeAttachment"> | string
  fileSize?: Prisma.IntFilter<"NoticeAttachment"> | number
  publicId?: Prisma.StringFilter<"NoticeAttachment"> | string
  uploadedAt?: Prisma.DateTimeFilter<"NoticeAttachment"> | Date | string
}

export type NoticeAttachmentCreateManyNoticeInput = {
  id?: string
  fileName: string
  fileUrl: string
  fileType: string
  fileSize: number
  publicId: string
  uploadedAt?: Date | string
}

export type NoticeAttachmentUpdateWithoutNoticeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeAttachmentUncheckedUpdateWithoutNoticeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeAttachmentUncheckedUpdateManyWithoutNoticeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type NoticeAttachmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  noticeId?: boolean
  fileName?: boolean
  fileUrl?: boolean
  fileType?: boolean
  fileSize?: boolean
  publicId?: boolean
  uploadedAt?: boolean
  notice?: boolean | Prisma.NoticeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["noticeAttachment"]>

export type NoticeAttachmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  noticeId?: boolean
  fileName?: boolean
  fileUrl?: boolean
  fileType?: boolean
  fileSize?: boolean
  publicId?: boolean
  uploadedAt?: boolean
  notice?: boolean | Prisma.NoticeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["noticeAttachment"]>

export type NoticeAttachmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  noticeId?: boolean
  fileName?: boolean
  fileUrl?: boolean
  fileType?: boolean
  fileSize?: boolean
  publicId?: boolean
  uploadedAt?: boolean
  notice?: boolean | Prisma.NoticeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["noticeAttachment"]>

export type NoticeAttachmentSelectScalar = {
  id?: boolean
  noticeId?: boolean
  fileName?: boolean
  fileUrl?: boolean
  fileType?: boolean
  fileSize?: boolean
  publicId?: boolean
  uploadedAt?: boolean
}

export type NoticeAttachmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "noticeId" | "fileName" | "fileUrl" | "fileType" | "fileSize" | "publicId" | "uploadedAt", ExtArgs["result"]["noticeAttachment"]>
export type NoticeAttachmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notice?: boolean | Prisma.NoticeDefaultArgs<ExtArgs>
}
export type NoticeAttachmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notice?: boolean | Prisma.NoticeDefaultArgs<ExtArgs>
}
export type NoticeAttachmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notice?: boolean | Prisma.NoticeDefaultArgs<ExtArgs>
}

export type $NoticeAttachmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "NoticeAttachment"
  objects: {
    notice: Prisma.$NoticePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    noticeId: string
    fileName: string
    fileUrl: string
    fileType: string
    fileSize: number
    publicId: string
    uploadedAt: Date
  }, ExtArgs["result"]["noticeAttachment"]>
  composites: {}
}

export type NoticeAttachmentGetPayload<S extends boolean | null | undefined | NoticeAttachmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload, S>

export type NoticeAttachmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NoticeAttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NoticeAttachmentCountAggregateInputType | true
  }

export interface NoticeAttachmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NoticeAttachment'], meta: { name: 'NoticeAttachment' } }
  /**
   * Find zero or one NoticeAttachment that matches the filter.
   * @param {NoticeAttachmentFindUniqueArgs} args - Arguments to find a NoticeAttachment
   * @example
   * // Get one NoticeAttachment
   * const noticeAttachment = await prisma.noticeAttachment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NoticeAttachmentFindUniqueArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one NoticeAttachment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NoticeAttachmentFindUniqueOrThrowArgs} args - Arguments to find a NoticeAttachment
   * @example
   * // Get one NoticeAttachment
   * const noticeAttachment = await prisma.noticeAttachment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NoticeAttachmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NoticeAttachment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentFindFirstArgs} args - Arguments to find a NoticeAttachment
   * @example
   * // Get one NoticeAttachment
   * const noticeAttachment = await prisma.noticeAttachment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NoticeAttachmentFindFirstArgs>(args?: Prisma.SelectSubset<T, NoticeAttachmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NoticeAttachment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentFindFirstOrThrowArgs} args - Arguments to find a NoticeAttachment
   * @example
   * // Get one NoticeAttachment
   * const noticeAttachment = await prisma.noticeAttachment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NoticeAttachmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NoticeAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more NoticeAttachments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NoticeAttachments
   * const noticeAttachments = await prisma.noticeAttachment.findMany()
   * 
   * // Get first 10 NoticeAttachments
   * const noticeAttachments = await prisma.noticeAttachment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const noticeAttachmentWithIdOnly = await prisma.noticeAttachment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NoticeAttachmentFindManyArgs>(args?: Prisma.SelectSubset<T, NoticeAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a NoticeAttachment.
   * @param {NoticeAttachmentCreateArgs} args - Arguments to create a NoticeAttachment.
   * @example
   * // Create one NoticeAttachment
   * const NoticeAttachment = await prisma.noticeAttachment.create({
   *   data: {
   *     // ... data to create a NoticeAttachment
   *   }
   * })
   * 
   */
  create<T extends NoticeAttachmentCreateArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentCreateArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many NoticeAttachments.
   * @param {NoticeAttachmentCreateManyArgs} args - Arguments to create many NoticeAttachments.
   * @example
   * // Create many NoticeAttachments
   * const noticeAttachment = await prisma.noticeAttachment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NoticeAttachmentCreateManyArgs>(args?: Prisma.SelectSubset<T, NoticeAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many NoticeAttachments and returns the data saved in the database.
   * @param {NoticeAttachmentCreateManyAndReturnArgs} args - Arguments to create many NoticeAttachments.
   * @example
   * // Create many NoticeAttachments
   * const noticeAttachment = await prisma.noticeAttachment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many NoticeAttachments and only return the `id`
   * const noticeAttachmentWithIdOnly = await prisma.noticeAttachment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NoticeAttachmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NoticeAttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a NoticeAttachment.
   * @param {NoticeAttachmentDeleteArgs} args - Arguments to delete one NoticeAttachment.
   * @example
   * // Delete one NoticeAttachment
   * const NoticeAttachment = await prisma.noticeAttachment.delete({
   *   where: {
   *     // ... filter to delete one NoticeAttachment
   *   }
   * })
   * 
   */
  delete<T extends NoticeAttachmentDeleteArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentDeleteArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one NoticeAttachment.
   * @param {NoticeAttachmentUpdateArgs} args - Arguments to update one NoticeAttachment.
   * @example
   * // Update one NoticeAttachment
   * const noticeAttachment = await prisma.noticeAttachment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NoticeAttachmentUpdateArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentUpdateArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more NoticeAttachments.
   * @param {NoticeAttachmentDeleteManyArgs} args - Arguments to filter NoticeAttachments to delete.
   * @example
   * // Delete a few NoticeAttachments
   * const { count } = await prisma.noticeAttachment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NoticeAttachmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, NoticeAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NoticeAttachments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NoticeAttachments
   * const noticeAttachment = await prisma.noticeAttachment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NoticeAttachmentUpdateManyArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NoticeAttachments and returns the data updated in the database.
   * @param {NoticeAttachmentUpdateManyAndReturnArgs} args - Arguments to update many NoticeAttachments.
   * @example
   * // Update many NoticeAttachments
   * const noticeAttachment = await prisma.noticeAttachment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more NoticeAttachments and only return the `id`
   * const noticeAttachmentWithIdOnly = await prisma.noticeAttachment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NoticeAttachmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one NoticeAttachment.
   * @param {NoticeAttachmentUpsertArgs} args - Arguments to update or create a NoticeAttachment.
   * @example
   * // Update or create a NoticeAttachment
   * const noticeAttachment = await prisma.noticeAttachment.upsert({
   *   create: {
   *     // ... data to create a NoticeAttachment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NoticeAttachment we want to update
   *   }
   * })
   */
  upsert<T extends NoticeAttachmentUpsertArgs>(args: Prisma.SelectSubset<T, NoticeAttachmentUpsertArgs<ExtArgs>>): Prisma.Prisma__NoticeAttachmentClient<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of NoticeAttachments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentCountArgs} args - Arguments to filter NoticeAttachments to count.
   * @example
   * // Count the number of NoticeAttachments
   * const count = await prisma.noticeAttachment.count({
   *   where: {
   *     // ... the filter for the NoticeAttachments we want to count
   *   }
   * })
  **/
  count<T extends NoticeAttachmentCountArgs>(
    args?: Prisma.Subset<T, NoticeAttachmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NoticeAttachmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a NoticeAttachment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NoticeAttachmentAggregateArgs>(args: Prisma.Subset<T, NoticeAttachmentAggregateArgs>): Prisma.PrismaPromise<GetNoticeAttachmentAggregateType<T>>

  /**
   * Group by NoticeAttachment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAttachmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NoticeAttachmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NoticeAttachmentGroupByArgs['orderBy'] }
      : { orderBy?: NoticeAttachmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NoticeAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the NoticeAttachment model
 */
readonly fields: NoticeAttachmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NoticeAttachment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NoticeAttachmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  notice<T extends Prisma.NoticeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NoticeDefaultArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the NoticeAttachment model
 */
export interface NoticeAttachmentFieldRefs {
  readonly id: Prisma.FieldRef<"NoticeAttachment", 'String'>
  readonly noticeId: Prisma.FieldRef<"NoticeAttachment", 'String'>
  readonly fileName: Prisma.FieldRef<"NoticeAttachment", 'String'>
  readonly fileUrl: Prisma.FieldRef<"NoticeAttachment", 'String'>
  readonly fileType: Prisma.FieldRef<"NoticeAttachment", 'String'>
  readonly fileSize: Prisma.FieldRef<"NoticeAttachment", 'Int'>
  readonly publicId: Prisma.FieldRef<"NoticeAttachment", 'String'>
  readonly uploadedAt: Prisma.FieldRef<"NoticeAttachment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * NoticeAttachment findUnique
 */
export type NoticeAttachmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * Filter, which NoticeAttachment to fetch.
   */
  where: Prisma.NoticeAttachmentWhereUniqueInput
}

/**
 * NoticeAttachment findUniqueOrThrow
 */
export type NoticeAttachmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * Filter, which NoticeAttachment to fetch.
   */
  where: Prisma.NoticeAttachmentWhereUniqueInput
}

/**
 * NoticeAttachment findFirst
 */
export type NoticeAttachmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * Filter, which NoticeAttachment to fetch.
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NoticeAttachments to fetch.
   */
  orderBy?: Prisma.NoticeAttachmentOrderByWithRelationInput | Prisma.NoticeAttachmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NoticeAttachments.
   */
  cursor?: Prisma.NoticeAttachmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NoticeAttachments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NoticeAttachments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NoticeAttachments.
   */
  distinct?: Prisma.NoticeAttachmentScalarFieldEnum | Prisma.NoticeAttachmentScalarFieldEnum[]
}

/**
 * NoticeAttachment findFirstOrThrow
 */
export type NoticeAttachmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * Filter, which NoticeAttachment to fetch.
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NoticeAttachments to fetch.
   */
  orderBy?: Prisma.NoticeAttachmentOrderByWithRelationInput | Prisma.NoticeAttachmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NoticeAttachments.
   */
  cursor?: Prisma.NoticeAttachmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NoticeAttachments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NoticeAttachments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NoticeAttachments.
   */
  distinct?: Prisma.NoticeAttachmentScalarFieldEnum | Prisma.NoticeAttachmentScalarFieldEnum[]
}

/**
 * NoticeAttachment findMany
 */
export type NoticeAttachmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * Filter, which NoticeAttachments to fetch.
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NoticeAttachments to fetch.
   */
  orderBy?: Prisma.NoticeAttachmentOrderByWithRelationInput | Prisma.NoticeAttachmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing NoticeAttachments.
   */
  cursor?: Prisma.NoticeAttachmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NoticeAttachments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NoticeAttachments.
   */
  skip?: number
  distinct?: Prisma.NoticeAttachmentScalarFieldEnum | Prisma.NoticeAttachmentScalarFieldEnum[]
}

/**
 * NoticeAttachment create
 */
export type NoticeAttachmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * The data needed to create a NoticeAttachment.
   */
  data: Prisma.XOR<Prisma.NoticeAttachmentCreateInput, Prisma.NoticeAttachmentUncheckedCreateInput>
}

/**
 * NoticeAttachment createMany
 */
export type NoticeAttachmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many NoticeAttachments.
   */
  data: Prisma.NoticeAttachmentCreateManyInput | Prisma.NoticeAttachmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NoticeAttachment createManyAndReturn
 */
export type NoticeAttachmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * The data used to create many NoticeAttachments.
   */
  data: Prisma.NoticeAttachmentCreateManyInput | Prisma.NoticeAttachmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * NoticeAttachment update
 */
export type NoticeAttachmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * The data needed to update a NoticeAttachment.
   */
  data: Prisma.XOR<Prisma.NoticeAttachmentUpdateInput, Prisma.NoticeAttachmentUncheckedUpdateInput>
  /**
   * Choose, which NoticeAttachment to update.
   */
  where: Prisma.NoticeAttachmentWhereUniqueInput
}

/**
 * NoticeAttachment updateMany
 */
export type NoticeAttachmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update NoticeAttachments.
   */
  data: Prisma.XOR<Prisma.NoticeAttachmentUpdateManyMutationInput, Prisma.NoticeAttachmentUncheckedUpdateManyInput>
  /**
   * Filter which NoticeAttachments to update
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * Limit how many NoticeAttachments to update.
   */
  limit?: number
}

/**
 * NoticeAttachment updateManyAndReturn
 */
export type NoticeAttachmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * The data used to update NoticeAttachments.
   */
  data: Prisma.XOR<Prisma.NoticeAttachmentUpdateManyMutationInput, Prisma.NoticeAttachmentUncheckedUpdateManyInput>
  /**
   * Filter which NoticeAttachments to update
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * Limit how many NoticeAttachments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * NoticeAttachment upsert
 */
export type NoticeAttachmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * The filter to search for the NoticeAttachment to update in case it exists.
   */
  where: Prisma.NoticeAttachmentWhereUniqueInput
  /**
   * In case the NoticeAttachment found by the `where` argument doesn't exist, create a new NoticeAttachment with this data.
   */
  create: Prisma.XOR<Prisma.NoticeAttachmentCreateInput, Prisma.NoticeAttachmentUncheckedCreateInput>
  /**
   * In case the NoticeAttachment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NoticeAttachmentUpdateInput, Prisma.NoticeAttachmentUncheckedUpdateInput>
}

/**
 * NoticeAttachment delete
 */
export type NoticeAttachmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  /**
   * Filter which NoticeAttachment to delete.
   */
  where: Prisma.NoticeAttachmentWhereUniqueInput
}

/**
 * NoticeAttachment deleteMany
 */
export type NoticeAttachmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NoticeAttachments to delete
   */
  where?: Prisma.NoticeAttachmentWhereInput
  /**
   * Limit how many NoticeAttachments to delete.
   */
  limit?: number
}

/**
 * NoticeAttachment without action
 */
export type NoticeAttachmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
}
