
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `NotificationLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model NotificationLog
 * 
 */
export type NotificationLogModel = runtime.Types.Result.DefaultSelection<Prisma.$NotificationLogPayload>

export type AggregateNotificationLog = {
  _count: NotificationLogCountAggregateOutputType | null
  _avg: NotificationLogAvgAggregateOutputType | null
  _sum: NotificationLogSumAggregateOutputType | null
  _min: NotificationLogMinAggregateOutputType | null
  _max: NotificationLogMaxAggregateOutputType | null
}

export type NotificationLogAvgAggregateOutputType = {
  retryCount: number | null
  maxRetries: number | null
  units: number | null
  cost: number | null
}

export type NotificationLogSumAggregateOutputType = {
  retryCount: number | null
  maxRetries: number | null
  units: number | null
  cost: number | null
}

export type NotificationLogMinAggregateOutputType = {
  id: string | null
  organizationId: string | null
  userId: string | null
  parentId: string | null
  studentId: string | null
  channel: $Enums.NotificationChannel | null
  status: $Enums.NotificationStatus | null
  notificationType: $Enums.NotificationType | null
  noticeId: string | null
  errorMessage: string | null
  retryCount: number | null
  maxRetries: number | null
  units: number | null
  cost: number | null
  sentAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationLogMaxAggregateOutputType = {
  id: string | null
  organizationId: string | null
  userId: string | null
  parentId: string | null
  studentId: string | null
  channel: $Enums.NotificationChannel | null
  status: $Enums.NotificationStatus | null
  notificationType: $Enums.NotificationType | null
  noticeId: string | null
  errorMessage: string | null
  retryCount: number | null
  maxRetries: number | null
  units: number | null
  cost: number | null
  sentAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationLogCountAggregateOutputType = {
  id: number
  organizationId: number
  userId: number
  parentId: number
  studentId: number
  channel: number
  status: number
  notificationType: number
  noticeId: number
  errorMessage: number
  retryCount: number
  maxRetries: number
  units: number
  cost: number
  sentAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type NotificationLogAvgAggregateInputType = {
  retryCount?: true
  maxRetries?: true
  units?: true
  cost?: true
}

export type NotificationLogSumAggregateInputType = {
  retryCount?: true
  maxRetries?: true
  units?: true
  cost?: true
}

export type NotificationLogMinAggregateInputType = {
  id?: true
  organizationId?: true
  userId?: true
  parentId?: true
  studentId?: true
  channel?: true
  status?: true
  notificationType?: true
  noticeId?: true
  errorMessage?: true
  retryCount?: true
  maxRetries?: true
  units?: true
  cost?: true
  sentAt?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationLogMaxAggregateInputType = {
  id?: true
  organizationId?: true
  userId?: true
  parentId?: true
  studentId?: true
  channel?: true
  status?: true
  notificationType?: true
  noticeId?: true
  errorMessage?: true
  retryCount?: true
  maxRetries?: true
  units?: true
  cost?: true
  sentAt?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationLogCountAggregateInputType = {
  id?: true
  organizationId?: true
  userId?: true
  parentId?: true
  studentId?: true
  channel?: true
  status?: true
  notificationType?: true
  noticeId?: true
  errorMessage?: true
  retryCount?: true
  maxRetries?: true
  units?: true
  cost?: true
  sentAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NotificationLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NotificationLog to aggregate.
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationLogs to fetch.
   */
  orderBy?: Prisma.NotificationLogOrderByWithRelationInput | Prisma.NotificationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NotificationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned NotificationLogs
  **/
  _count?: true | NotificationLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NotificationLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NotificationLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NotificationLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NotificationLogMaxAggregateInputType
}

export type GetNotificationLogAggregateType<T extends NotificationLogAggregateArgs> = {
      [P in keyof T & keyof AggregateNotificationLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationLog[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationLog[P]>
}




export type NotificationLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationLogWhereInput
  orderBy?: Prisma.NotificationLogOrderByWithAggregationInput | Prisma.NotificationLogOrderByWithAggregationInput[]
  by: Prisma.NotificationLogScalarFieldEnum[] | Prisma.NotificationLogScalarFieldEnum
  having?: Prisma.NotificationLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotificationLogCountAggregateInputType | true
  _avg?: NotificationLogAvgAggregateInputType
  _sum?: NotificationLogSumAggregateInputType
  _min?: NotificationLogMinAggregateInputType
  _max?: NotificationLogMaxAggregateInputType
}

export type NotificationLogGroupByOutputType = {
  id: string
  organizationId: string
  userId: string | null
  parentId: string | null
  studentId: string | null
  channel: $Enums.NotificationChannel
  status: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId: string | null
  errorMessage: string | null
  retryCount: number
  maxRetries: number
  units: number
  cost: number
  sentAt: Date
  createdAt: Date
  updatedAt: Date
  _count: NotificationLogCountAggregateOutputType | null
  _avg: NotificationLogAvgAggregateOutputType | null
  _sum: NotificationLogSumAggregateOutputType | null
  _min: NotificationLogMinAggregateOutputType | null
  _max: NotificationLogMaxAggregateOutputType | null
}

type GetNotificationLogGroupByPayload<T extends NotificationLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotificationLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NotificationLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationLogGroupByOutputType[P]>
      }
    >
  >



export type NotificationLogWhereInput = {
  AND?: Prisma.NotificationLogWhereInput | Prisma.NotificationLogWhereInput[]
  OR?: Prisma.NotificationLogWhereInput[]
  NOT?: Prisma.NotificationLogWhereInput | Prisma.NotificationLogWhereInput[]
  id?: Prisma.StringFilter<"NotificationLog"> | string
  organizationId?: Prisma.StringFilter<"NotificationLog"> | string
  userId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  parentId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  studentId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  channel?: Prisma.EnumNotificationChannelFilter<"NotificationLog"> | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFilter<"NotificationLog"> | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFilter<"NotificationLog"> | $Enums.NotificationType
  noticeId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  retryCount?: Prisma.IntFilter<"NotificationLog"> | number
  maxRetries?: Prisma.IntFilter<"NotificationLog"> | number
  units?: Prisma.IntFilter<"NotificationLog"> | number
  cost?: Prisma.FloatFilter<"NotificationLog"> | number
  sentAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  parent?: Prisma.XOR<Prisma.ParentNullableScalarRelationFilter, Prisma.ParentWhereInput> | null
  student?: Prisma.XOR<Prisma.StudentNullableScalarRelationFilter, Prisma.StudentWhereInput> | null
  notice?: Prisma.XOR<Prisma.NoticeNullableScalarRelationFilter, Prisma.NoticeWhereInput> | null
}

export type NotificationLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  studentId?: Prisma.SortOrderInput | Prisma.SortOrder
  channel?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  noticeId?: Prisma.SortOrderInput | Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  parent?: Prisma.ParentOrderByWithRelationInput
  student?: Prisma.StudentOrderByWithRelationInput
  notice?: Prisma.NoticeOrderByWithRelationInput
}

export type NotificationLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.NotificationLogWhereInput | Prisma.NotificationLogWhereInput[]
  OR?: Prisma.NotificationLogWhereInput[]
  NOT?: Prisma.NotificationLogWhereInput | Prisma.NotificationLogWhereInput[]
  organizationId?: Prisma.StringFilter<"NotificationLog"> | string
  userId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  parentId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  studentId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  channel?: Prisma.EnumNotificationChannelFilter<"NotificationLog"> | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFilter<"NotificationLog"> | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFilter<"NotificationLog"> | $Enums.NotificationType
  noticeId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  retryCount?: Prisma.IntFilter<"NotificationLog"> | number
  maxRetries?: Prisma.IntFilter<"NotificationLog"> | number
  units?: Prisma.IntFilter<"NotificationLog"> | number
  cost?: Prisma.FloatFilter<"NotificationLog"> | number
  sentAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  parent?: Prisma.XOR<Prisma.ParentNullableScalarRelationFilter, Prisma.ParentWhereInput> | null
  student?: Prisma.XOR<Prisma.StudentNullableScalarRelationFilter, Prisma.StudentWhereInput> | null
  notice?: Prisma.XOR<Prisma.NoticeNullableScalarRelationFilter, Prisma.NoticeWhereInput> | null
}, "id">

export type NotificationLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  studentId?: Prisma.SortOrderInput | Prisma.SortOrder
  channel?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  noticeId?: Prisma.SortOrderInput | Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NotificationLogCountOrderByAggregateInput
  _avg?: Prisma.NotificationLogAvgOrderByAggregateInput
  _max?: Prisma.NotificationLogMaxOrderByAggregateInput
  _min?: Prisma.NotificationLogMinOrderByAggregateInput
  _sum?: Prisma.NotificationLogSumOrderByAggregateInput
}

export type NotificationLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.NotificationLogScalarWhereWithAggregatesInput | Prisma.NotificationLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.NotificationLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NotificationLogScalarWhereWithAggregatesInput | Prisma.NotificationLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"NotificationLog"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"NotificationLog"> | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"NotificationLog"> | string | null
  parentId?: Prisma.StringNullableWithAggregatesFilter<"NotificationLog"> | string | null
  studentId?: Prisma.StringNullableWithAggregatesFilter<"NotificationLog"> | string | null
  channel?: Prisma.EnumNotificationChannelWithAggregatesFilter<"NotificationLog"> | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusWithAggregatesFilter<"NotificationLog"> | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeWithAggregatesFilter<"NotificationLog"> | $Enums.NotificationType
  noticeId?: Prisma.StringNullableWithAggregatesFilter<"NotificationLog"> | string | null
  errorMessage?: Prisma.StringNullableWithAggregatesFilter<"NotificationLog"> | string | null
  retryCount?: Prisma.IntWithAggregatesFilter<"NotificationLog"> | number
  maxRetries?: Prisma.IntWithAggregatesFilter<"NotificationLog"> | number
  units?: Prisma.IntWithAggregatesFilter<"NotificationLog"> | number
  cost?: Prisma.FloatWithAggregatesFilter<"NotificationLog"> | number
  sentAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationLog"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationLog"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"NotificationLog"> | Date | string
}

export type NotificationLogCreateInput = {
  id?: string
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotificationLogInput
  user?: Prisma.UserCreateNestedOneWithoutNotificationLogInput
  parent?: Prisma.ParentCreateNestedOneWithoutNotificationLogInput
  student?: Prisma.StudentCreateNestedOneWithoutNotificationLogInput
  notice?: Prisma.NoticeCreateNestedOneWithoutNotificationsInput
}

export type NotificationLogUncheckedCreateInput = {
  id?: string
  organizationId: string
  userId?: string | null
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotificationLogNestedInput
  user?: Prisma.UserUpdateOneWithoutNotificationLogNestedInput
  parent?: Prisma.ParentUpdateOneWithoutNotificationLogNestedInput
  student?: Prisma.StudentUpdateOneWithoutNotificationLogNestedInput
  notice?: Prisma.NoticeUpdateOneWithoutNotificationsNestedInput
}

export type NotificationLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogCreateManyInput = {
  id?: string
  organizationId: string
  userId?: string | null
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogListRelationFilter = {
  every?: Prisma.NotificationLogWhereInput
  some?: Prisma.NotificationLogWhereInput
  none?: Prisma.NotificationLogWhereInput
}

export type NotificationLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NotificationLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationLogAvgOrderByAggregateInput = {
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type NotificationLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  noticeId?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationLogSumOrderByAggregateInput = {
  retryCount?: Prisma.SortOrder
  maxRetries?: Prisma.SortOrder
  units?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type NotificationLogCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutOrganizationInput, Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput> | Prisma.NotificationLogCreateWithoutOrganizationInput[] | Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput | Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.NotificationLogCreateManyOrganizationInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutOrganizationInput, Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput> | Prisma.NotificationLogCreateWithoutOrganizationInput[] | Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput | Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.NotificationLogCreateManyOrganizationInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutOrganizationInput, Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput> | Prisma.NotificationLogCreateWithoutOrganizationInput[] | Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput | Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.NotificationLogCreateManyOrganizationInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutOrganizationInput | Prisma.NotificationLogUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutOrganizationInput, Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput> | Prisma.NotificationLogCreateWithoutOrganizationInput[] | Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput | Prisma.NotificationLogCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.NotificationLogCreateManyOrganizationInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutOrganizationInput | Prisma.NotificationLogUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutUserInput, Prisma.NotificationLogUncheckedCreateWithoutUserInput> | Prisma.NotificationLogCreateWithoutUserInput[] | Prisma.NotificationLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutUserInput | Prisma.NotificationLogCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.NotificationLogCreateManyUserInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutUserInput, Prisma.NotificationLogUncheckedCreateWithoutUserInput> | Prisma.NotificationLogCreateWithoutUserInput[] | Prisma.NotificationLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutUserInput | Prisma.NotificationLogCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.NotificationLogCreateManyUserInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutUserInput, Prisma.NotificationLogUncheckedCreateWithoutUserInput> | Prisma.NotificationLogCreateWithoutUserInput[] | Prisma.NotificationLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutUserInput | Prisma.NotificationLogCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutUserInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.NotificationLogCreateManyUserInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutUserInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutUserInput | Prisma.NotificationLogUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutUserInput, Prisma.NotificationLogUncheckedCreateWithoutUserInput> | Prisma.NotificationLogCreateWithoutUserInput[] | Prisma.NotificationLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutUserInput | Prisma.NotificationLogCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutUserInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.NotificationLogCreateManyUserInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutUserInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutUserInput | Prisma.NotificationLogUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutStudentInput, Prisma.NotificationLogUncheckedCreateWithoutStudentInput> | Prisma.NotificationLogCreateWithoutStudentInput[] | Prisma.NotificationLogUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutStudentInput | Prisma.NotificationLogCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.NotificationLogCreateManyStudentInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutStudentInput, Prisma.NotificationLogUncheckedCreateWithoutStudentInput> | Prisma.NotificationLogCreateWithoutStudentInput[] | Prisma.NotificationLogUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutStudentInput | Prisma.NotificationLogCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.NotificationLogCreateManyStudentInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutStudentInput, Prisma.NotificationLogUncheckedCreateWithoutStudentInput> | Prisma.NotificationLogCreateWithoutStudentInput[] | Prisma.NotificationLogUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutStudentInput | Prisma.NotificationLogCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutStudentInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.NotificationLogCreateManyStudentInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutStudentInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutStudentInput | Prisma.NotificationLogUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutStudentInput, Prisma.NotificationLogUncheckedCreateWithoutStudentInput> | Prisma.NotificationLogCreateWithoutStudentInput[] | Prisma.NotificationLogUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutStudentInput | Prisma.NotificationLogCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutStudentInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.NotificationLogCreateManyStudentInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutStudentInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutStudentInput | Prisma.NotificationLogUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutParentInput, Prisma.NotificationLogUncheckedCreateWithoutParentInput> | Prisma.NotificationLogCreateWithoutParentInput[] | Prisma.NotificationLogUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutParentInput | Prisma.NotificationLogCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.NotificationLogCreateManyParentInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUncheckedCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutParentInput, Prisma.NotificationLogUncheckedCreateWithoutParentInput> | Prisma.NotificationLogCreateWithoutParentInput[] | Prisma.NotificationLogUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutParentInput | Prisma.NotificationLogCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.NotificationLogCreateManyParentInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutParentInput, Prisma.NotificationLogUncheckedCreateWithoutParentInput> | Prisma.NotificationLogCreateWithoutParentInput[] | Prisma.NotificationLogUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutParentInput | Prisma.NotificationLogCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutParentInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.NotificationLogCreateManyParentInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutParentInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutParentInput | Prisma.NotificationLogUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogUncheckedUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutParentInput, Prisma.NotificationLogUncheckedCreateWithoutParentInput> | Prisma.NotificationLogCreateWithoutParentInput[] | Prisma.NotificationLogUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutParentInput | Prisma.NotificationLogCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutParentInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.NotificationLogCreateManyParentInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutParentInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutParentInput | Prisma.NotificationLogUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogCreateNestedManyWithoutNoticeInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutNoticeInput, Prisma.NotificationLogUncheckedCreateWithoutNoticeInput> | Prisma.NotificationLogCreateWithoutNoticeInput[] | Prisma.NotificationLogUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutNoticeInput | Prisma.NotificationLogCreateOrConnectWithoutNoticeInput[]
  createMany?: Prisma.NotificationLogCreateManyNoticeInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUncheckedCreateNestedManyWithoutNoticeInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutNoticeInput, Prisma.NotificationLogUncheckedCreateWithoutNoticeInput> | Prisma.NotificationLogCreateWithoutNoticeInput[] | Prisma.NotificationLogUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutNoticeInput | Prisma.NotificationLogCreateOrConnectWithoutNoticeInput[]
  createMany?: Prisma.NotificationLogCreateManyNoticeInputEnvelope
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
}

export type NotificationLogUpdateManyWithoutNoticeNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutNoticeInput, Prisma.NotificationLogUncheckedCreateWithoutNoticeInput> | Prisma.NotificationLogCreateWithoutNoticeInput[] | Prisma.NotificationLogUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutNoticeInput | Prisma.NotificationLogCreateOrConnectWithoutNoticeInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutNoticeInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutNoticeInput[]
  createMany?: Prisma.NotificationLogCreateManyNoticeInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutNoticeInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutNoticeInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutNoticeInput | Prisma.NotificationLogUpdateManyWithWhereWithoutNoticeInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type NotificationLogUncheckedUpdateManyWithoutNoticeNestedInput = {
  create?: Prisma.XOR<Prisma.NotificationLogCreateWithoutNoticeInput, Prisma.NotificationLogUncheckedCreateWithoutNoticeInput> | Prisma.NotificationLogCreateWithoutNoticeInput[] | Prisma.NotificationLogUncheckedCreateWithoutNoticeInput[]
  connectOrCreate?: Prisma.NotificationLogCreateOrConnectWithoutNoticeInput | Prisma.NotificationLogCreateOrConnectWithoutNoticeInput[]
  upsert?: Prisma.NotificationLogUpsertWithWhereUniqueWithoutNoticeInput | Prisma.NotificationLogUpsertWithWhereUniqueWithoutNoticeInput[]
  createMany?: Prisma.NotificationLogCreateManyNoticeInputEnvelope
  set?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  disconnect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  delete?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  connect?: Prisma.NotificationLogWhereUniqueInput | Prisma.NotificationLogWhereUniqueInput[]
  update?: Prisma.NotificationLogUpdateWithWhereUniqueWithoutNoticeInput | Prisma.NotificationLogUpdateWithWhereUniqueWithoutNoticeInput[]
  updateMany?: Prisma.NotificationLogUpdateManyWithWhereWithoutNoticeInput | Prisma.NotificationLogUpdateManyWithWhereWithoutNoticeInput[]
  deleteMany?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
}

export type EnumNotificationChannelFieldUpdateOperationsInput = {
  set?: $Enums.NotificationChannel
}

export type EnumNotificationStatusFieldUpdateOperationsInput = {
  set?: $Enums.NotificationStatus
}

export type EnumNotificationTypeFieldUpdateOperationsInput = {
  set?: $Enums.NotificationType
}

export type NotificationLogCreateWithoutOrganizationInput = {
  id?: string
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutNotificationLogInput
  parent?: Prisma.ParentCreateNestedOneWithoutNotificationLogInput
  student?: Prisma.StudentCreateNestedOneWithoutNotificationLogInput
  notice?: Prisma.NoticeCreateNestedOneWithoutNotificationsInput
}

export type NotificationLogUncheckedCreateWithoutOrganizationInput = {
  id?: string
  userId?: string | null
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutOrganizationInput, Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput>
}

export type NotificationLogCreateManyOrganizationInputEnvelope = {
  data: Prisma.NotificationLogCreateManyOrganizationInput | Prisma.NotificationLogCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type NotificationLogUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationLogUpdateWithoutOrganizationInput, Prisma.NotificationLogUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutOrganizationInput, Prisma.NotificationLogUncheckedCreateWithoutOrganizationInput>
}

export type NotificationLogUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateWithoutOrganizationInput, Prisma.NotificationLogUncheckedUpdateWithoutOrganizationInput>
}

export type NotificationLogUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.NotificationLogScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyWithoutOrganizationInput>
}

export type NotificationLogScalarWhereInput = {
  AND?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
  OR?: Prisma.NotificationLogScalarWhereInput[]
  NOT?: Prisma.NotificationLogScalarWhereInput | Prisma.NotificationLogScalarWhereInput[]
  id?: Prisma.StringFilter<"NotificationLog"> | string
  organizationId?: Prisma.StringFilter<"NotificationLog"> | string
  userId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  parentId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  studentId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  channel?: Prisma.EnumNotificationChannelFilter<"NotificationLog"> | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFilter<"NotificationLog"> | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFilter<"NotificationLog"> | $Enums.NotificationType
  noticeId?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"NotificationLog"> | string | null
  retryCount?: Prisma.IntFilter<"NotificationLog"> | number
  maxRetries?: Prisma.IntFilter<"NotificationLog"> | number
  units?: Prisma.IntFilter<"NotificationLog"> | number
  cost?: Prisma.FloatFilter<"NotificationLog"> | number
  sentAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"NotificationLog"> | Date | string
}

export type NotificationLogCreateWithoutUserInput = {
  id?: string
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotificationLogInput
  parent?: Prisma.ParentCreateNestedOneWithoutNotificationLogInput
  student?: Prisma.StudentCreateNestedOneWithoutNotificationLogInput
  notice?: Prisma.NoticeCreateNestedOneWithoutNotificationsInput
}

export type NotificationLogUncheckedCreateWithoutUserInput = {
  id?: string
  organizationId: string
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogCreateOrConnectWithoutUserInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutUserInput, Prisma.NotificationLogUncheckedCreateWithoutUserInput>
}

export type NotificationLogCreateManyUserInputEnvelope = {
  data: Prisma.NotificationLogCreateManyUserInput | Prisma.NotificationLogCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type NotificationLogUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationLogUpdateWithoutUserInput, Prisma.NotificationLogUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutUserInput, Prisma.NotificationLogUncheckedCreateWithoutUserInput>
}

export type NotificationLogUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateWithoutUserInput, Prisma.NotificationLogUncheckedUpdateWithoutUserInput>
}

export type NotificationLogUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.NotificationLogScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyWithoutUserInput>
}

export type NotificationLogCreateWithoutStudentInput = {
  id?: string
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotificationLogInput
  user?: Prisma.UserCreateNestedOneWithoutNotificationLogInput
  parent?: Prisma.ParentCreateNestedOneWithoutNotificationLogInput
  notice?: Prisma.NoticeCreateNestedOneWithoutNotificationsInput
}

export type NotificationLogUncheckedCreateWithoutStudentInput = {
  id?: string
  organizationId: string
  userId?: string | null
  parentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogCreateOrConnectWithoutStudentInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutStudentInput, Prisma.NotificationLogUncheckedCreateWithoutStudentInput>
}

export type NotificationLogCreateManyStudentInputEnvelope = {
  data: Prisma.NotificationLogCreateManyStudentInput | Prisma.NotificationLogCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type NotificationLogUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationLogUpdateWithoutStudentInput, Prisma.NotificationLogUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutStudentInput, Prisma.NotificationLogUncheckedCreateWithoutStudentInput>
}

export type NotificationLogUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateWithoutStudentInput, Prisma.NotificationLogUncheckedUpdateWithoutStudentInput>
}

export type NotificationLogUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.NotificationLogScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyWithoutStudentInput>
}

export type NotificationLogCreateWithoutParentInput = {
  id?: string
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotificationLogInput
  user?: Prisma.UserCreateNestedOneWithoutNotificationLogInput
  student?: Prisma.StudentCreateNestedOneWithoutNotificationLogInput
  notice?: Prisma.NoticeCreateNestedOneWithoutNotificationsInput
}

export type NotificationLogUncheckedCreateWithoutParentInput = {
  id?: string
  organizationId: string
  userId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogCreateOrConnectWithoutParentInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutParentInput, Prisma.NotificationLogUncheckedCreateWithoutParentInput>
}

export type NotificationLogCreateManyParentInputEnvelope = {
  data: Prisma.NotificationLogCreateManyParentInput | Prisma.NotificationLogCreateManyParentInput[]
  skipDuplicates?: boolean
}

export type NotificationLogUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationLogUpdateWithoutParentInput, Prisma.NotificationLogUncheckedUpdateWithoutParentInput>
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutParentInput, Prisma.NotificationLogUncheckedCreateWithoutParentInput>
}

export type NotificationLogUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateWithoutParentInput, Prisma.NotificationLogUncheckedUpdateWithoutParentInput>
}

export type NotificationLogUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.NotificationLogScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyWithoutParentInput>
}

export type NotificationLogCreateWithoutNoticeInput = {
  id?: string
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotificationLogInput
  user?: Prisma.UserCreateNestedOneWithoutNotificationLogInput
  parent?: Prisma.ParentCreateNestedOneWithoutNotificationLogInput
  student?: Prisma.StudentCreateNestedOneWithoutNotificationLogInput
}

export type NotificationLogUncheckedCreateWithoutNoticeInput = {
  id?: string
  organizationId: string
  userId?: string | null
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogCreateOrConnectWithoutNoticeInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutNoticeInput, Prisma.NotificationLogUncheckedCreateWithoutNoticeInput>
}

export type NotificationLogCreateManyNoticeInputEnvelope = {
  data: Prisma.NotificationLogCreateManyNoticeInput | Prisma.NotificationLogCreateManyNoticeInput[]
  skipDuplicates?: boolean
}

export type NotificationLogUpsertWithWhereUniqueWithoutNoticeInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.NotificationLogUpdateWithoutNoticeInput, Prisma.NotificationLogUncheckedUpdateWithoutNoticeInput>
  create: Prisma.XOR<Prisma.NotificationLogCreateWithoutNoticeInput, Prisma.NotificationLogUncheckedCreateWithoutNoticeInput>
}

export type NotificationLogUpdateWithWhereUniqueWithoutNoticeInput = {
  where: Prisma.NotificationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateWithoutNoticeInput, Prisma.NotificationLogUncheckedUpdateWithoutNoticeInput>
}

export type NotificationLogUpdateManyWithWhereWithoutNoticeInput = {
  where: Prisma.NotificationLogScalarWhereInput
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyWithoutNoticeInput>
}

export type NotificationLogCreateManyOrganizationInput = {
  id?: string
  userId?: string | null
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutNotificationLogNestedInput
  parent?: Prisma.ParentUpdateOneWithoutNotificationLogNestedInput
  student?: Prisma.StudentUpdateOneWithoutNotificationLogNestedInput
  notice?: Prisma.NoticeUpdateOneWithoutNotificationsNestedInput
}

export type NotificationLogUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogCreateManyUserInput = {
  id?: string
  organizationId: string
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotificationLogNestedInput
  parent?: Prisma.ParentUpdateOneWithoutNotificationLogNestedInput
  student?: Prisma.StudentUpdateOneWithoutNotificationLogNestedInput
  notice?: Prisma.NoticeUpdateOneWithoutNotificationsNestedInput
}

export type NotificationLogUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogCreateManyStudentInput = {
  id?: string
  organizationId: string
  userId?: string | null
  parentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotificationLogNestedInput
  user?: Prisma.UserUpdateOneWithoutNotificationLogNestedInput
  parent?: Prisma.ParentUpdateOneWithoutNotificationLogNestedInput
  notice?: Prisma.NoticeUpdateOneWithoutNotificationsNestedInput
}

export type NotificationLogUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogCreateManyParentInput = {
  id?: string
  organizationId: string
  userId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  noticeId?: string | null
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotificationLogNestedInput
  user?: Prisma.UserUpdateOneWithoutNotificationLogNestedInput
  student?: Prisma.StudentUpdateOneWithoutNotificationLogNestedInput
  notice?: Prisma.NoticeUpdateOneWithoutNotificationsNestedInput
}

export type NotificationLogUncheckedUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogUncheckedUpdateManyWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  noticeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogCreateManyNoticeInput = {
  id?: string
  organizationId: string
  userId?: string | null
  parentId?: string | null
  studentId?: string | null
  channel: $Enums.NotificationChannel
  status?: $Enums.NotificationStatus
  notificationType: $Enums.NotificationType
  errorMessage?: string | null
  retryCount?: number
  maxRetries?: number
  units?: number
  cost?: number
  sentAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationLogUpdateWithoutNoticeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotificationLogNestedInput
  user?: Prisma.UserUpdateOneWithoutNotificationLogNestedInput
  parent?: Prisma.ParentUpdateOneWithoutNotificationLogNestedInput
  student?: Prisma.StudentUpdateOneWithoutNotificationLogNestedInput
}

export type NotificationLogUncheckedUpdateWithoutNoticeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationLogUncheckedUpdateManyWithoutNoticeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  studentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  channel?: Prisma.EnumNotificationChannelFieldUpdateOperationsInput | $Enums.NotificationChannel
  status?: Prisma.EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
  notificationType?: Prisma.EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  retryCount?: Prisma.IntFieldUpdateOperationsInput | number
  maxRetries?: Prisma.IntFieldUpdateOperationsInput | number
  units?: Prisma.IntFieldUpdateOperationsInput | number
  cost?: Prisma.FloatFieldUpdateOperationsInput | number
  sentAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type NotificationLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  userId?: boolean
  parentId?: boolean
  studentId?: boolean
  channel?: boolean
  status?: boolean
  notificationType?: boolean
  noticeId?: boolean
  errorMessage?: boolean
  retryCount?: boolean
  maxRetries?: boolean
  units?: boolean
  cost?: boolean
  sentAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.NotificationLog$userArgs<ExtArgs>
  parent?: boolean | Prisma.NotificationLog$parentArgs<ExtArgs>
  student?: boolean | Prisma.NotificationLog$studentArgs<ExtArgs>
  notice?: boolean | Prisma.NotificationLog$noticeArgs<ExtArgs>
}, ExtArgs["result"]["notificationLog"]>

export type NotificationLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  userId?: boolean
  parentId?: boolean
  studentId?: boolean
  channel?: boolean
  status?: boolean
  notificationType?: boolean
  noticeId?: boolean
  errorMessage?: boolean
  retryCount?: boolean
  maxRetries?: boolean
  units?: boolean
  cost?: boolean
  sentAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.NotificationLog$userArgs<ExtArgs>
  parent?: boolean | Prisma.NotificationLog$parentArgs<ExtArgs>
  student?: boolean | Prisma.NotificationLog$studentArgs<ExtArgs>
  notice?: boolean | Prisma.NotificationLog$noticeArgs<ExtArgs>
}, ExtArgs["result"]["notificationLog"]>

export type NotificationLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  organizationId?: boolean
  userId?: boolean
  parentId?: boolean
  studentId?: boolean
  channel?: boolean
  status?: boolean
  notificationType?: boolean
  noticeId?: boolean
  errorMessage?: boolean
  retryCount?: boolean
  maxRetries?: boolean
  units?: boolean
  cost?: boolean
  sentAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.NotificationLog$userArgs<ExtArgs>
  parent?: boolean | Prisma.NotificationLog$parentArgs<ExtArgs>
  student?: boolean | Prisma.NotificationLog$studentArgs<ExtArgs>
  notice?: boolean | Prisma.NotificationLog$noticeArgs<ExtArgs>
}, ExtArgs["result"]["notificationLog"]>

export type NotificationLogSelectScalar = {
  id?: boolean
  organizationId?: boolean
  userId?: boolean
  parentId?: boolean
  studentId?: boolean
  channel?: boolean
  status?: boolean
  notificationType?: boolean
  noticeId?: boolean
  errorMessage?: boolean
  retryCount?: boolean
  maxRetries?: boolean
  units?: boolean
  cost?: boolean
  sentAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NotificationLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "organizationId" | "userId" | "parentId" | "studentId" | "channel" | "status" | "notificationType" | "noticeId" | "errorMessage" | "retryCount" | "maxRetries" | "units" | "cost" | "sentAt" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationLog"]>
export type NotificationLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.NotificationLog$userArgs<ExtArgs>
  parent?: boolean | Prisma.NotificationLog$parentArgs<ExtArgs>
  student?: boolean | Prisma.NotificationLog$studentArgs<ExtArgs>
  notice?: boolean | Prisma.NotificationLog$noticeArgs<ExtArgs>
}
export type NotificationLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.NotificationLog$userArgs<ExtArgs>
  parent?: boolean | Prisma.NotificationLog$parentArgs<ExtArgs>
  student?: boolean | Prisma.NotificationLog$studentArgs<ExtArgs>
  notice?: boolean | Prisma.NotificationLog$noticeArgs<ExtArgs>
}
export type NotificationLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.NotificationLog$userArgs<ExtArgs>
  parent?: boolean | Prisma.NotificationLog$parentArgs<ExtArgs>
  student?: boolean | Prisma.NotificationLog$studentArgs<ExtArgs>
  notice?: boolean | Prisma.NotificationLog$noticeArgs<ExtArgs>
}

export type $NotificationLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "NotificationLog"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs> | null
    parent: Prisma.$ParentPayload<ExtArgs> | null
    student: Prisma.$StudentPayload<ExtArgs> | null
    notice: Prisma.$NoticePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    organizationId: string
    userId: string | null
    parentId: string | null
    studentId: string | null
    channel: $Enums.NotificationChannel
    status: $Enums.NotificationStatus
    notificationType: $Enums.NotificationType
    noticeId: string | null
    errorMessage: string | null
    retryCount: number
    maxRetries: number
    units: number
    cost: number
    sentAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["notificationLog"]>
  composites: {}
}

export type NotificationLogGetPayload<S extends boolean | null | undefined | NotificationLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload, S>

export type NotificationLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NotificationLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NotificationLogCountAggregateInputType | true
  }

export interface NotificationLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationLog'], meta: { name: 'NotificationLog' } }
  /**
   * Find zero or one NotificationLog that matches the filter.
   * @param {NotificationLogFindUniqueArgs} args - Arguments to find a NotificationLog
   * @example
   * // Get one NotificationLog
   * const notificationLog = await prisma.notificationLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationLogFindUniqueArgs>(args: Prisma.SelectSubset<T, NotificationLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one NotificationLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationLogFindUniqueOrThrowArgs} args - Arguments to find a NotificationLog
   * @example
   * // Get one NotificationLog
   * const notificationLog = await prisma.notificationLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NotificationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NotificationLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogFindFirstArgs} args - Arguments to find a NotificationLog
   * @example
   * // Get one NotificationLog
   * const notificationLog = await prisma.notificationLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationLogFindFirstArgs>(args?: Prisma.SelectSubset<T, NotificationLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NotificationLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogFindFirstOrThrowArgs} args - Arguments to find a NotificationLog
   * @example
   * // Get one NotificationLog
   * const notificationLog = await prisma.notificationLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NotificationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more NotificationLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationLogs
   * const notificationLogs = await prisma.notificationLog.findMany()
   * 
   * // Get first 10 NotificationLogs
   * const notificationLogs = await prisma.notificationLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const notificationLogWithIdOnly = await prisma.notificationLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NotificationLogFindManyArgs>(args?: Prisma.SelectSubset<T, NotificationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a NotificationLog.
   * @param {NotificationLogCreateArgs} args - Arguments to create a NotificationLog.
   * @example
   * // Create one NotificationLog
   * const NotificationLog = await prisma.notificationLog.create({
   *   data: {
   *     // ... data to create a NotificationLog
   *   }
   * })
   * 
   */
  create<T extends NotificationLogCreateArgs>(args: Prisma.SelectSubset<T, NotificationLogCreateArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many NotificationLogs.
   * @param {NotificationLogCreateManyArgs} args - Arguments to create many NotificationLogs.
   * @example
   * // Create many NotificationLogs
   * const notificationLog = await prisma.notificationLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NotificationLogCreateManyArgs>(args?: Prisma.SelectSubset<T, NotificationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many NotificationLogs and returns the data saved in the database.
   * @param {NotificationLogCreateManyAndReturnArgs} args - Arguments to create many NotificationLogs.
   * @example
   * // Create many NotificationLogs
   * const notificationLog = await prisma.notificationLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many NotificationLogs and only return the `id`
   * const notificationLogWithIdOnly = await prisma.notificationLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NotificationLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NotificationLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a NotificationLog.
   * @param {NotificationLogDeleteArgs} args - Arguments to delete one NotificationLog.
   * @example
   * // Delete one NotificationLog
   * const NotificationLog = await prisma.notificationLog.delete({
   *   where: {
   *     // ... filter to delete one NotificationLog
   *   }
   * })
   * 
   */
  delete<T extends NotificationLogDeleteArgs>(args: Prisma.SelectSubset<T, NotificationLogDeleteArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one NotificationLog.
   * @param {NotificationLogUpdateArgs} args - Arguments to update one NotificationLog.
   * @example
   * // Update one NotificationLog
   * const notificationLog = await prisma.notificationLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NotificationLogUpdateArgs>(args: Prisma.SelectSubset<T, NotificationLogUpdateArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more NotificationLogs.
   * @param {NotificationLogDeleteManyArgs} args - Arguments to filter NotificationLogs to delete.
   * @example
   * // Delete a few NotificationLogs
   * const { count } = await prisma.notificationLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NotificationLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, NotificationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationLogs
   * const notificationLog = await prisma.notificationLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NotificationLogUpdateManyArgs>(args: Prisma.SelectSubset<T, NotificationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationLogs and returns the data updated in the database.
   * @param {NotificationLogUpdateManyAndReturnArgs} args - Arguments to update many NotificationLogs.
   * @example
   * // Update many NotificationLogs
   * const notificationLog = await prisma.notificationLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more NotificationLogs and only return the `id`
   * const notificationLogWithIdOnly = await prisma.notificationLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NotificationLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NotificationLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one NotificationLog.
   * @param {NotificationLogUpsertArgs} args - Arguments to update or create a NotificationLog.
   * @example
   * // Update or create a NotificationLog
   * const notificationLog = await prisma.notificationLog.upsert({
   *   create: {
   *     // ... data to create a NotificationLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationLog we want to update
   *   }
   * })
   */
  upsert<T extends NotificationLogUpsertArgs>(args: Prisma.SelectSubset<T, NotificationLogUpsertArgs<ExtArgs>>): Prisma.Prisma__NotificationLogClient<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of NotificationLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogCountArgs} args - Arguments to filter NotificationLogs to count.
   * @example
   * // Count the number of NotificationLogs
   * const count = await prisma.notificationLog.count({
   *   where: {
   *     // ... the filter for the NotificationLogs we want to count
   *   }
   * })
  **/
  count<T extends NotificationLogCountArgs>(
    args?: Prisma.Subset<T, NotificationLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NotificationLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a NotificationLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NotificationLogAggregateArgs>(args: Prisma.Subset<T, NotificationLogAggregateArgs>): Prisma.PrismaPromise<GetNotificationLogAggregateType<T>>

  /**
   * Group by NotificationLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NotificationLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationLogGroupByArgs['orderBy'] }
      : { orderBy?: NotificationLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NotificationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the NotificationLog model
 */
readonly fields: NotificationLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.NotificationLog$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationLog$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  parent<T extends Prisma.NotificationLog$parentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationLog$parentArgs<ExtArgs>>): Prisma.Prisma__ParentClient<runtime.Types.Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  student<T extends Prisma.NotificationLog$studentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationLog$studentArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  notice<T extends Prisma.NotificationLog$noticeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NotificationLog$noticeArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the NotificationLog model
 */
export interface NotificationLogFieldRefs {
  readonly id: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly organizationId: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly userId: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly parentId: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly studentId: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly channel: Prisma.FieldRef<"NotificationLog", 'NotificationChannel'>
  readonly status: Prisma.FieldRef<"NotificationLog", 'NotificationStatus'>
  readonly notificationType: Prisma.FieldRef<"NotificationLog", 'NotificationType'>
  readonly noticeId: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly errorMessage: Prisma.FieldRef<"NotificationLog", 'String'>
  readonly retryCount: Prisma.FieldRef<"NotificationLog", 'Int'>
  readonly maxRetries: Prisma.FieldRef<"NotificationLog", 'Int'>
  readonly units: Prisma.FieldRef<"NotificationLog", 'Int'>
  readonly cost: Prisma.FieldRef<"NotificationLog", 'Float'>
  readonly sentAt: Prisma.FieldRef<"NotificationLog", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"NotificationLog", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"NotificationLog", 'DateTime'>
}
    

// Custom InputTypes
/**
 * NotificationLog findUnique
 */
export type NotificationLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * Filter, which NotificationLog to fetch.
   */
  where: Prisma.NotificationLogWhereUniqueInput
}

/**
 * NotificationLog findUniqueOrThrow
 */
export type NotificationLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * Filter, which NotificationLog to fetch.
   */
  where: Prisma.NotificationLogWhereUniqueInput
}

/**
 * NotificationLog findFirst
 */
export type NotificationLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * Filter, which NotificationLog to fetch.
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationLogs to fetch.
   */
  orderBy?: Prisma.NotificationLogOrderByWithRelationInput | Prisma.NotificationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NotificationLogs.
   */
  cursor?: Prisma.NotificationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NotificationLogs.
   */
  distinct?: Prisma.NotificationLogScalarFieldEnum | Prisma.NotificationLogScalarFieldEnum[]
}

/**
 * NotificationLog findFirstOrThrow
 */
export type NotificationLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * Filter, which NotificationLog to fetch.
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationLogs to fetch.
   */
  orderBy?: Prisma.NotificationLogOrderByWithRelationInput | Prisma.NotificationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NotificationLogs.
   */
  cursor?: Prisma.NotificationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NotificationLogs.
   */
  distinct?: Prisma.NotificationLogScalarFieldEnum | Prisma.NotificationLogScalarFieldEnum[]
}

/**
 * NotificationLog findMany
 */
export type NotificationLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * Filter, which NotificationLogs to fetch.
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NotificationLogs to fetch.
   */
  orderBy?: Prisma.NotificationLogOrderByWithRelationInput | Prisma.NotificationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing NotificationLogs.
   */
  cursor?: Prisma.NotificationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NotificationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NotificationLogs.
   */
  skip?: number
  distinct?: Prisma.NotificationLogScalarFieldEnum | Prisma.NotificationLogScalarFieldEnum[]
}

/**
 * NotificationLog create
 */
export type NotificationLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * The data needed to create a NotificationLog.
   */
  data: Prisma.XOR<Prisma.NotificationLogCreateInput, Prisma.NotificationLogUncheckedCreateInput>
}

/**
 * NotificationLog createMany
 */
export type NotificationLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many NotificationLogs.
   */
  data: Prisma.NotificationLogCreateManyInput | Prisma.NotificationLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NotificationLog createManyAndReturn
 */
export type NotificationLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * The data used to create many NotificationLogs.
   */
  data: Prisma.NotificationLogCreateManyInput | Prisma.NotificationLogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * NotificationLog update
 */
export type NotificationLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * The data needed to update a NotificationLog.
   */
  data: Prisma.XOR<Prisma.NotificationLogUpdateInput, Prisma.NotificationLogUncheckedUpdateInput>
  /**
   * Choose, which NotificationLog to update.
   */
  where: Prisma.NotificationLogWhereUniqueInput
}

/**
 * NotificationLog updateMany
 */
export type NotificationLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update NotificationLogs.
   */
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyInput>
  /**
   * Filter which NotificationLogs to update
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * Limit how many NotificationLogs to update.
   */
  limit?: number
}

/**
 * NotificationLog updateManyAndReturn
 */
export type NotificationLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * The data used to update NotificationLogs.
   */
  data: Prisma.XOR<Prisma.NotificationLogUpdateManyMutationInput, Prisma.NotificationLogUncheckedUpdateManyInput>
  /**
   * Filter which NotificationLogs to update
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * Limit how many NotificationLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * NotificationLog upsert
 */
export type NotificationLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * The filter to search for the NotificationLog to update in case it exists.
   */
  where: Prisma.NotificationLogWhereUniqueInput
  /**
   * In case the NotificationLog found by the `where` argument doesn't exist, create a new NotificationLog with this data.
   */
  create: Prisma.XOR<Prisma.NotificationLogCreateInput, Prisma.NotificationLogUncheckedCreateInput>
  /**
   * In case the NotificationLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NotificationLogUpdateInput, Prisma.NotificationLogUncheckedUpdateInput>
}

/**
 * NotificationLog delete
 */
export type NotificationLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  /**
   * Filter which NotificationLog to delete.
   */
  where: Prisma.NotificationLogWhereUniqueInput
}

/**
 * NotificationLog deleteMany
 */
export type NotificationLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NotificationLogs to delete
   */
  where?: Prisma.NotificationLogWhereInput
  /**
   * Limit how many NotificationLogs to delete.
   */
  limit?: number
}

/**
 * NotificationLog.user
 */
export type NotificationLog$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * NotificationLog.parent
 */
export type NotificationLog$parentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Parent
   */
  select?: Prisma.ParentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Parent
   */
  omit?: Prisma.ParentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentInclude<ExtArgs> | null
  where?: Prisma.ParentWhereInput
}

/**
 * NotificationLog.student
 */
export type NotificationLog$studentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Student
   */
  select?: Prisma.StudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Student
   */
  omit?: Prisma.StudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentInclude<ExtArgs> | null
  where?: Prisma.StudentWhereInput
}

/**
 * NotificationLog.notice
 */
export type NotificationLog$noticeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  where?: Prisma.NoticeWhereInput
}

/**
 * NotificationLog without action
 */
export type NotificationLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
}
