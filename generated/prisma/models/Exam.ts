
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Exam` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Exam
 * 
 */
export type ExamModel = runtime.Types.Result.DefaultSelection<Prisma.$ExamPayload>

export type AggregateExam = {
  _count: ExamCountAggregateOutputType | null
  _avg: ExamAvgAggregateOutputType | null
  _sum: ExamSumAggregateOutputType | null
  _min: ExamMinAggregateOutputType | null
  _max: ExamMaxAggregateOutputType | null
}

export type ExamAvgAggregateOutputType = {
  maxMarks: number | null
  passingMarks: number | null
  weightage: number | null
  durationInMinutes: number | null
}

export type ExamSumAggregateOutputType = {
  maxMarks: number | null
  passingMarks: number | null
  weightage: number | null
  durationInMinutes: number | null
}

export type ExamMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  examSessionId: string | null
  subjectId: string | null
  gradeId: string | null
  sectionId: string | null
  organizationId: string | null
  maxMarks: number | null
  passingMarks: number | null
  weightage: number | null
  evaluationType: $Enums.EvaluationType | null
  mode: $Enums.ExamMode | null
  status: $Enums.ExamStatus | null
  instructions: string | null
  durationInMinutes: number | null
  venueMapUrl: string | null
  venue: string | null
  isResultsPublished: boolean | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExamMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  examSessionId: string | null
  subjectId: string | null
  gradeId: string | null
  sectionId: string | null
  organizationId: string | null
  maxMarks: number | null
  passingMarks: number | null
  weightage: number | null
  evaluationType: $Enums.EvaluationType | null
  mode: $Enums.ExamMode | null
  status: $Enums.ExamStatus | null
  instructions: string | null
  durationInMinutes: number | null
  venueMapUrl: string | null
  venue: string | null
  isResultsPublished: boolean | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExamCountAggregateOutputType = {
  id: number
  title: number
  description: number
  examSessionId: number
  subjectId: number
  gradeId: number
  sectionId: number
  organizationId: number
  maxMarks: number
  passingMarks: number
  weightage: number
  evaluationType: number
  mode: number
  status: number
  instructions: number
  durationInMinutes: number
  venueMapUrl: number
  venue: number
  isResultsPublished: number
  supervisors: number
  startDate: number
  endDate: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExamAvgAggregateInputType = {
  maxMarks?: true
  passingMarks?: true
  weightage?: true
  durationInMinutes?: true
}

export type ExamSumAggregateInputType = {
  maxMarks?: true
  passingMarks?: true
  weightage?: true
  durationInMinutes?: true
}

export type ExamMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  examSessionId?: true
  subjectId?: true
  gradeId?: true
  sectionId?: true
  organizationId?: true
  maxMarks?: true
  passingMarks?: true
  weightage?: true
  evaluationType?: true
  mode?: true
  status?: true
  instructions?: true
  durationInMinutes?: true
  venueMapUrl?: true
  venue?: true
  isResultsPublished?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type ExamMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  examSessionId?: true
  subjectId?: true
  gradeId?: true
  sectionId?: true
  organizationId?: true
  maxMarks?: true
  passingMarks?: true
  weightage?: true
  evaluationType?: true
  mode?: true
  status?: true
  instructions?: true
  durationInMinutes?: true
  venueMapUrl?: true
  venue?: true
  isResultsPublished?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type ExamCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  examSessionId?: true
  subjectId?: true
  gradeId?: true
  sectionId?: true
  organizationId?: true
  maxMarks?: true
  passingMarks?: true
  weightage?: true
  evaluationType?: true
  mode?: true
  status?: true
  instructions?: true
  durationInMinutes?: true
  venueMapUrl?: true
  venue?: true
  isResultsPublished?: true
  supervisors?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExamAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exam to aggregate.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Exams
  **/
  _count?: true | ExamCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExamAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExamSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExamMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExamMaxAggregateInputType
}

export type GetExamAggregateType<T extends ExamAggregateArgs> = {
      [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExam[P]>
    : Prisma.GetScalarType<T[P], AggregateExam[P]>
}




export type ExamGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamWhereInput
  orderBy?: Prisma.ExamOrderByWithAggregationInput | Prisma.ExamOrderByWithAggregationInput[]
  by: Prisma.ExamScalarFieldEnum[] | Prisma.ExamScalarFieldEnum
  having?: Prisma.ExamScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExamCountAggregateInputType | true
  _avg?: ExamAvgAggregateInputType
  _sum?: ExamSumAggregateInputType
  _min?: ExamMinAggregateInputType
  _max?: ExamMaxAggregateInputType
}

export type ExamGroupByOutputType = {
  id: string
  title: string
  description: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks: number | null
  weightage: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status: $Enums.ExamStatus
  instructions: string | null
  durationInMinutes: number | null
  venueMapUrl: string | null
  venue: string | null
  isResultsPublished: boolean
  supervisors: string[]
  startDate: Date
  endDate: Date
  createdAt: Date
  updatedAt: Date
  _count: ExamCountAggregateOutputType | null
  _avg: ExamAvgAggregateOutputType | null
  _sum: ExamSumAggregateOutputType | null
  _min: ExamMinAggregateOutputType | null
  _max: ExamMaxAggregateOutputType | null
}

type GetExamGroupByPayload<T extends ExamGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExamGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExamGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExamGroupByOutputType[P]>
      }
    >
  >



export type ExamWhereInput = {
  AND?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  OR?: Prisma.ExamWhereInput[]
  NOT?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  id?: Prisma.StringFilter<"Exam"> | string
  title?: Prisma.StringFilter<"Exam"> | string
  description?: Prisma.StringNullableFilter<"Exam"> | string | null
  examSessionId?: Prisma.StringFilter<"Exam"> | string
  subjectId?: Prisma.StringFilter<"Exam"> | string
  gradeId?: Prisma.StringFilter<"Exam"> | string
  sectionId?: Prisma.StringFilter<"Exam"> | string
  organizationId?: Prisma.StringFilter<"Exam"> | string
  maxMarks?: Prisma.FloatFilter<"Exam"> | number
  passingMarks?: Prisma.FloatNullableFilter<"Exam"> | number | null
  weightage?: Prisma.FloatNullableFilter<"Exam"> | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFilter<"Exam"> | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFilter<"Exam"> | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFilter<"Exam"> | $Enums.ExamStatus
  instructions?: Prisma.StringNullableFilter<"Exam"> | string | null
  durationInMinutes?: Prisma.IntNullableFilter<"Exam"> | number | null
  venueMapUrl?: Prisma.StringNullableFilter<"Exam"> | string | null
  venue?: Prisma.StringNullableFilter<"Exam"> | string | null
  isResultsPublished?: Prisma.BoolFilter<"Exam"> | boolean
  supervisors?: Prisma.StringNullableListFilter<"Exam">
  startDate?: Prisma.DateTimeFilter<"Exam"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Exam"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
  examSession?: Prisma.XOR<Prisma.ExamSessionScalarRelationFilter, Prisma.ExamSessionWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  hallTickets?: Prisma.HallTicketListRelationFilter
  examResult?: Prisma.ExamResultListRelationFilter
  examEnrollment?: Prisma.ExamEnrollmentListRelationFilter
}

export type ExamOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrderInput | Prisma.SortOrder
  weightage?: Prisma.SortOrderInput | Prisma.SortOrder
  evaluationType?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  status?: Prisma.SortOrder
  instructions?: Prisma.SortOrderInput | Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrderInput | Prisma.SortOrder
  venueMapUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  venue?: Prisma.SortOrderInput | Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  supervisors?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  examSession?: Prisma.ExamSessionOrderByWithRelationInput
  subject?: Prisma.SubjectOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  hallTickets?: Prisma.HallTicketOrderByRelationAggregateInput
  examResult?: Prisma.ExamResultOrderByRelationAggregateInput
  examEnrollment?: Prisma.ExamEnrollmentOrderByRelationAggregateInput
}

export type ExamWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  examSessionId_gradeId_sectionId_subjectId_title?: Prisma.ExamExamSessionIdGradeIdSectionIdSubjectIdTitleCompoundUniqueInput
  AND?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  OR?: Prisma.ExamWhereInput[]
  NOT?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  title?: Prisma.StringFilter<"Exam"> | string
  description?: Prisma.StringNullableFilter<"Exam"> | string | null
  examSessionId?: Prisma.StringFilter<"Exam"> | string
  subjectId?: Prisma.StringFilter<"Exam"> | string
  gradeId?: Prisma.StringFilter<"Exam"> | string
  sectionId?: Prisma.StringFilter<"Exam"> | string
  organizationId?: Prisma.StringFilter<"Exam"> | string
  maxMarks?: Prisma.FloatFilter<"Exam"> | number
  passingMarks?: Prisma.FloatNullableFilter<"Exam"> | number | null
  weightage?: Prisma.FloatNullableFilter<"Exam"> | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFilter<"Exam"> | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFilter<"Exam"> | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFilter<"Exam"> | $Enums.ExamStatus
  instructions?: Prisma.StringNullableFilter<"Exam"> | string | null
  durationInMinutes?: Prisma.IntNullableFilter<"Exam"> | number | null
  venueMapUrl?: Prisma.StringNullableFilter<"Exam"> | string | null
  venue?: Prisma.StringNullableFilter<"Exam"> | string | null
  isResultsPublished?: Prisma.BoolFilter<"Exam"> | boolean
  supervisors?: Prisma.StringNullableListFilter<"Exam">
  startDate?: Prisma.DateTimeFilter<"Exam"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Exam"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
  examSession?: Prisma.XOR<Prisma.ExamSessionScalarRelationFilter, Prisma.ExamSessionWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  hallTickets?: Prisma.HallTicketListRelationFilter
  examResult?: Prisma.ExamResultListRelationFilter
  examEnrollment?: Prisma.ExamEnrollmentListRelationFilter
}, "id" | "examSessionId_gradeId_sectionId_subjectId_title">

export type ExamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrderInput | Prisma.SortOrder
  weightage?: Prisma.SortOrderInput | Prisma.SortOrder
  evaluationType?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  status?: Prisma.SortOrder
  instructions?: Prisma.SortOrderInput | Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrderInput | Prisma.SortOrder
  venueMapUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  venue?: Prisma.SortOrderInput | Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  supervisors?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExamCountOrderByAggregateInput
  _avg?: Prisma.ExamAvgOrderByAggregateInput
  _max?: Prisma.ExamMaxOrderByAggregateInput
  _min?: Prisma.ExamMinOrderByAggregateInput
  _sum?: Prisma.ExamSumOrderByAggregateInput
}

export type ExamScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExamScalarWhereWithAggregatesInput | Prisma.ExamScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExamScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExamScalarWhereWithAggregatesInput | Prisma.ExamScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  title?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Exam"> | string | null
  examSessionId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  subjectId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  gradeId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  sectionId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  maxMarks?: Prisma.FloatWithAggregatesFilter<"Exam"> | number
  passingMarks?: Prisma.FloatNullableWithAggregatesFilter<"Exam"> | number | null
  weightage?: Prisma.FloatNullableWithAggregatesFilter<"Exam"> | number | null
  evaluationType?: Prisma.EnumEvaluationTypeWithAggregatesFilter<"Exam"> | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeWithAggregatesFilter<"Exam"> | $Enums.ExamMode
  status?: Prisma.EnumExamStatusWithAggregatesFilter<"Exam"> | $Enums.ExamStatus
  instructions?: Prisma.StringNullableWithAggregatesFilter<"Exam"> | string | null
  durationInMinutes?: Prisma.IntNullableWithAggregatesFilter<"Exam"> | number | null
  venueMapUrl?: Prisma.StringNullableWithAggregatesFilter<"Exam"> | string | null
  venue?: Prisma.StringNullableWithAggregatesFilter<"Exam"> | string | null
  isResultsPublished?: Prisma.BoolWithAggregatesFilter<"Exam"> | boolean
  supervisors?: Prisma.StringNullableListFilter<"Exam">
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Exam"> | Date | string
  endDate?: Prisma.DateTimeWithAggregatesFilter<"Exam"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Exam"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Exam"> | Date | string
}

export type ExamCreateInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutExamsInput
  subject: Prisma.SubjectCreateNestedOneWithoutExamInput
  organization: Prisma.OrganizationCreateNestedOneWithoutExamInput
  hallTickets?: Prisma.HallTicketCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  hallTickets?: Prisma.HallTicketUncheckedCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultUncheckedCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput
}

export type ExamUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutExamsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutExamNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutExamNestedInput
  hallTickets?: Prisma.HallTicketUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hallTickets?: Prisma.HallTicketUncheckedUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUncheckedUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamListRelationFilter = {
  every?: Prisma.ExamWhereInput
  some?: Prisma.ExamWhereInput
  none?: Prisma.ExamWhereInput
}

export type ExamOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExamExamSessionIdGradeIdSectionIdSubjectIdTitleCompoundUniqueInput = {
  examSessionId: string
  gradeId: string
  sectionId: string
  subjectId: string
  title: string
}

export type ExamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrder
  weightage?: Prisma.SortOrder
  evaluationType?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  status?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrder
  venueMapUrl?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  supervisors?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamAvgOrderByAggregateInput = {
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrder
  weightage?: Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrder
}

export type ExamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrder
  weightage?: Prisma.SortOrder
  evaluationType?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  status?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrder
  venueMapUrl?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  examSessionId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  sectionId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrder
  weightage?: Prisma.SortOrder
  evaluationType?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  status?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrder
  venueMapUrl?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  isResultsPublished?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamSumOrderByAggregateInput = {
  maxMarks?: Prisma.SortOrder
  passingMarks?: Prisma.SortOrder
  weightage?: Prisma.SortOrder
  durationInMinutes?: Prisma.SortOrder
}

export type ExamScalarRelationFilter = {
  is?: Prisma.ExamWhereInput
  isNot?: Prisma.ExamWhereInput
}

export type ExamNullableScalarRelationFilter = {
  is?: Prisma.ExamWhereInput | null
  isNot?: Prisma.ExamWhereInput | null
}

export type ExamCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutOrganizationInput, Prisma.ExamUncheckedCreateWithoutOrganizationInput> | Prisma.ExamCreateWithoutOrganizationInput[] | Prisma.ExamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutOrganizationInput | Prisma.ExamCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ExamCreateManyOrganizationInputEnvelope
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
}

export type ExamUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutOrganizationInput, Prisma.ExamUncheckedCreateWithoutOrganizationInput> | Prisma.ExamCreateWithoutOrganizationInput[] | Prisma.ExamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutOrganizationInput | Prisma.ExamCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ExamCreateManyOrganizationInputEnvelope
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
}

export type ExamUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutOrganizationInput, Prisma.ExamUncheckedCreateWithoutOrganizationInput> | Prisma.ExamCreateWithoutOrganizationInput[] | Prisma.ExamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutOrganizationInput | Prisma.ExamCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ExamUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ExamUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ExamCreateManyOrganizationInputEnvelope
  set?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  disconnect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  delete?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  update?: Prisma.ExamUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ExamUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ExamUpdateManyWithWhereWithoutOrganizationInput | Prisma.ExamUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
}

export type ExamUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutOrganizationInput, Prisma.ExamUncheckedCreateWithoutOrganizationInput> | Prisma.ExamCreateWithoutOrganizationInput[] | Prisma.ExamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutOrganizationInput | Prisma.ExamCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ExamUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ExamUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ExamCreateManyOrganizationInputEnvelope
  set?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  disconnect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  delete?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  update?: Prisma.ExamUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ExamUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ExamUpdateManyWithWhereWithoutOrganizationInput | Prisma.ExamUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
}

export type ExamCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutSubjectInput, Prisma.ExamUncheckedCreateWithoutSubjectInput> | Prisma.ExamCreateWithoutSubjectInput[] | Prisma.ExamUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutSubjectInput | Prisma.ExamCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.ExamCreateManySubjectInputEnvelope
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
}

export type ExamUncheckedCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutSubjectInput, Prisma.ExamUncheckedCreateWithoutSubjectInput> | Prisma.ExamCreateWithoutSubjectInput[] | Prisma.ExamUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutSubjectInput | Prisma.ExamCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.ExamCreateManySubjectInputEnvelope
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
}

export type ExamUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutSubjectInput, Prisma.ExamUncheckedCreateWithoutSubjectInput> | Prisma.ExamCreateWithoutSubjectInput[] | Prisma.ExamUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutSubjectInput | Prisma.ExamCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.ExamUpsertWithWhereUniqueWithoutSubjectInput | Prisma.ExamUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.ExamCreateManySubjectInputEnvelope
  set?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  disconnect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  delete?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  update?: Prisma.ExamUpdateWithWhereUniqueWithoutSubjectInput | Prisma.ExamUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.ExamUpdateManyWithWhereWithoutSubjectInput | Prisma.ExamUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
}

export type ExamUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutSubjectInput, Prisma.ExamUncheckedCreateWithoutSubjectInput> | Prisma.ExamCreateWithoutSubjectInput[] | Prisma.ExamUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutSubjectInput | Prisma.ExamCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.ExamUpsertWithWhereUniqueWithoutSubjectInput | Prisma.ExamUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.ExamCreateManySubjectInputEnvelope
  set?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  disconnect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  delete?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  update?: Prisma.ExamUpdateWithWhereUniqueWithoutSubjectInput | Prisma.ExamUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.ExamUpdateManyWithWhereWithoutSubjectInput | Prisma.ExamUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
}

export type ExamCreateNestedManyWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamSessionInput, Prisma.ExamUncheckedCreateWithoutExamSessionInput> | Prisma.ExamCreateWithoutExamSessionInput[] | Prisma.ExamUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamSessionInput | Prisma.ExamCreateOrConnectWithoutExamSessionInput[]
  createMany?: Prisma.ExamCreateManyExamSessionInputEnvelope
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
}

export type ExamUncheckedCreateNestedManyWithoutExamSessionInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamSessionInput, Prisma.ExamUncheckedCreateWithoutExamSessionInput> | Prisma.ExamCreateWithoutExamSessionInput[] | Prisma.ExamUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamSessionInput | Prisma.ExamCreateOrConnectWithoutExamSessionInput[]
  createMany?: Prisma.ExamCreateManyExamSessionInputEnvelope
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
}

export type ExamUpdateManyWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamSessionInput, Prisma.ExamUncheckedCreateWithoutExamSessionInput> | Prisma.ExamCreateWithoutExamSessionInput[] | Prisma.ExamUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamSessionInput | Prisma.ExamCreateOrConnectWithoutExamSessionInput[]
  upsert?: Prisma.ExamUpsertWithWhereUniqueWithoutExamSessionInput | Prisma.ExamUpsertWithWhereUniqueWithoutExamSessionInput[]
  createMany?: Prisma.ExamCreateManyExamSessionInputEnvelope
  set?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  disconnect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  delete?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  update?: Prisma.ExamUpdateWithWhereUniqueWithoutExamSessionInput | Prisma.ExamUpdateWithWhereUniqueWithoutExamSessionInput[]
  updateMany?: Prisma.ExamUpdateManyWithWhereWithoutExamSessionInput | Prisma.ExamUpdateManyWithWhereWithoutExamSessionInput[]
  deleteMany?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
}

export type ExamUncheckedUpdateManyWithoutExamSessionNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamSessionInput, Prisma.ExamUncheckedCreateWithoutExamSessionInput> | Prisma.ExamCreateWithoutExamSessionInput[] | Prisma.ExamUncheckedCreateWithoutExamSessionInput[]
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamSessionInput | Prisma.ExamCreateOrConnectWithoutExamSessionInput[]
  upsert?: Prisma.ExamUpsertWithWhereUniqueWithoutExamSessionInput | Prisma.ExamUpsertWithWhereUniqueWithoutExamSessionInput[]
  createMany?: Prisma.ExamCreateManyExamSessionInputEnvelope
  set?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  disconnect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  delete?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  connect?: Prisma.ExamWhereUniqueInput | Prisma.ExamWhereUniqueInput[]
  update?: Prisma.ExamUpdateWithWhereUniqueWithoutExamSessionInput | Prisma.ExamUpdateWithWhereUniqueWithoutExamSessionInput[]
  updateMany?: Prisma.ExamUpdateManyWithWhereWithoutExamSessionInput | Prisma.ExamUpdateManyWithWhereWithoutExamSessionInput[]
  deleteMany?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
}

export type ExamCreatesupervisorsInput = {
  set: string[]
}

export type EnumEvaluationTypeFieldUpdateOperationsInput = {
  set?: $Enums.EvaluationType
}

export type EnumExamModeFieldUpdateOperationsInput = {
  set?: $Enums.ExamMode
}

export type EnumExamStatusFieldUpdateOperationsInput = {
  set?: $Enums.ExamStatus
}

export type ExamUpdatesupervisorsInput = {
  set?: string[]
  push?: string | string[]
}

export type ExamCreateNestedOneWithoutExamEnrollmentInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamEnrollmentInput, Prisma.ExamUncheckedCreateWithoutExamEnrollmentInput>
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamEnrollmentInput
  connect?: Prisma.ExamWhereUniqueInput
}

export type ExamUpdateOneRequiredWithoutExamEnrollmentNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamEnrollmentInput, Prisma.ExamUncheckedCreateWithoutExamEnrollmentInput>
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamEnrollmentInput
  upsert?: Prisma.ExamUpsertWithoutExamEnrollmentInput
  connect?: Prisma.ExamWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExamUpdateToOneWithWhereWithoutExamEnrollmentInput, Prisma.ExamUpdateWithoutExamEnrollmentInput>, Prisma.ExamUncheckedUpdateWithoutExamEnrollmentInput>
}

export type ExamCreateNestedOneWithoutExamResultInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamResultInput, Prisma.ExamUncheckedCreateWithoutExamResultInput>
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamResultInput
  connect?: Prisma.ExamWhereUniqueInput
}

export type ExamUpdateOneRequiredWithoutExamResultNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutExamResultInput, Prisma.ExamUncheckedCreateWithoutExamResultInput>
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutExamResultInput
  upsert?: Prisma.ExamUpsertWithoutExamResultInput
  connect?: Prisma.ExamWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExamUpdateToOneWithWhereWithoutExamResultInput, Prisma.ExamUpdateWithoutExamResultInput>, Prisma.ExamUncheckedUpdateWithoutExamResultInput>
}

export type ExamCreateNestedOneWithoutHallTicketsInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutHallTicketsInput, Prisma.ExamUncheckedCreateWithoutHallTicketsInput>
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutHallTicketsInput
  connect?: Prisma.ExamWhereUniqueInput
}

export type ExamUpdateOneWithoutHallTicketsNestedInput = {
  create?: Prisma.XOR<Prisma.ExamCreateWithoutHallTicketsInput, Prisma.ExamUncheckedCreateWithoutHallTicketsInput>
  connectOrCreate?: Prisma.ExamCreateOrConnectWithoutHallTicketsInput
  upsert?: Prisma.ExamUpsertWithoutHallTicketsInput
  disconnect?: Prisma.ExamWhereInput | boolean
  delete?: Prisma.ExamWhereInput | boolean
  connect?: Prisma.ExamWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExamUpdateToOneWithWhereWithoutHallTicketsInput, Prisma.ExamUpdateWithoutHallTicketsInput>, Prisma.ExamUncheckedUpdateWithoutHallTicketsInput>
}

export type ExamCreateWithoutOrganizationInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutExamsInput
  subject: Prisma.SubjectCreateNestedOneWithoutExamInput
  hallTickets?: Prisma.HallTicketCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateWithoutOrganizationInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  hallTickets?: Prisma.HallTicketUncheckedCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultUncheckedCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput
}

export type ExamCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ExamWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamCreateWithoutOrganizationInput, Prisma.ExamUncheckedCreateWithoutOrganizationInput>
}

export type ExamCreateManyOrganizationInputEnvelope = {
  data: Prisma.ExamCreateManyOrganizationInput | Prisma.ExamCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type ExamUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ExamWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamUpdateWithoutOrganizationInput, Prisma.ExamUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.ExamCreateWithoutOrganizationInput, Prisma.ExamUncheckedCreateWithoutOrganizationInput>
}

export type ExamUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ExamWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamUpdateWithoutOrganizationInput, Prisma.ExamUncheckedUpdateWithoutOrganizationInput>
}

export type ExamUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ExamScalarWhereInput
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyWithoutOrganizationInput>
}

export type ExamScalarWhereInput = {
  AND?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
  OR?: Prisma.ExamScalarWhereInput[]
  NOT?: Prisma.ExamScalarWhereInput | Prisma.ExamScalarWhereInput[]
  id?: Prisma.StringFilter<"Exam"> | string
  title?: Prisma.StringFilter<"Exam"> | string
  description?: Prisma.StringNullableFilter<"Exam"> | string | null
  examSessionId?: Prisma.StringFilter<"Exam"> | string
  subjectId?: Prisma.StringFilter<"Exam"> | string
  gradeId?: Prisma.StringFilter<"Exam"> | string
  sectionId?: Prisma.StringFilter<"Exam"> | string
  organizationId?: Prisma.StringFilter<"Exam"> | string
  maxMarks?: Prisma.FloatFilter<"Exam"> | number
  passingMarks?: Prisma.FloatNullableFilter<"Exam"> | number | null
  weightage?: Prisma.FloatNullableFilter<"Exam"> | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFilter<"Exam"> | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFilter<"Exam"> | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFilter<"Exam"> | $Enums.ExamStatus
  instructions?: Prisma.StringNullableFilter<"Exam"> | string | null
  durationInMinutes?: Prisma.IntNullableFilter<"Exam"> | number | null
  venueMapUrl?: Prisma.StringNullableFilter<"Exam"> | string | null
  venue?: Prisma.StringNullableFilter<"Exam"> | string | null
  isResultsPublished?: Prisma.BoolFilter<"Exam"> | boolean
  supervisors?: Prisma.StringNullableListFilter<"Exam">
  startDate?: Prisma.DateTimeFilter<"Exam"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Exam"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
}

export type ExamCreateWithoutSubjectInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutExamsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutExamInput
  hallTickets?: Prisma.HallTicketCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateWithoutSubjectInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  hallTickets?: Prisma.HallTicketUncheckedCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultUncheckedCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput
}

export type ExamCreateOrConnectWithoutSubjectInput = {
  where: Prisma.ExamWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamCreateWithoutSubjectInput, Prisma.ExamUncheckedCreateWithoutSubjectInput>
}

export type ExamCreateManySubjectInputEnvelope = {
  data: Prisma.ExamCreateManySubjectInput | Prisma.ExamCreateManySubjectInput[]
  skipDuplicates?: boolean
}

export type ExamUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.ExamWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamUpdateWithoutSubjectInput, Prisma.ExamUncheckedUpdateWithoutSubjectInput>
  create: Prisma.XOR<Prisma.ExamCreateWithoutSubjectInput, Prisma.ExamUncheckedCreateWithoutSubjectInput>
}

export type ExamUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.ExamWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamUpdateWithoutSubjectInput, Prisma.ExamUncheckedUpdateWithoutSubjectInput>
}

export type ExamUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.ExamScalarWhereInput
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyWithoutSubjectInput>
}

export type ExamCreateWithoutExamSessionInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  subject: Prisma.SubjectCreateNestedOneWithoutExamInput
  organization: Prisma.OrganizationCreateNestedOneWithoutExamInput
  hallTickets?: Prisma.HallTicketCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateWithoutExamSessionInput = {
  id?: string
  title: string
  description?: string | null
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  hallTickets?: Prisma.HallTicketUncheckedCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultUncheckedCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput
}

export type ExamCreateOrConnectWithoutExamSessionInput = {
  where: Prisma.ExamWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamCreateWithoutExamSessionInput, Prisma.ExamUncheckedCreateWithoutExamSessionInput>
}

export type ExamCreateManyExamSessionInputEnvelope = {
  data: Prisma.ExamCreateManyExamSessionInput | Prisma.ExamCreateManyExamSessionInput[]
  skipDuplicates?: boolean
}

export type ExamUpsertWithWhereUniqueWithoutExamSessionInput = {
  where: Prisma.ExamWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamUpdateWithoutExamSessionInput, Prisma.ExamUncheckedUpdateWithoutExamSessionInput>
  create: Prisma.XOR<Prisma.ExamCreateWithoutExamSessionInput, Prisma.ExamUncheckedCreateWithoutExamSessionInput>
}

export type ExamUpdateWithWhereUniqueWithoutExamSessionInput = {
  where: Prisma.ExamWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamUpdateWithoutExamSessionInput, Prisma.ExamUncheckedUpdateWithoutExamSessionInput>
}

export type ExamUpdateManyWithWhereWithoutExamSessionInput = {
  where: Prisma.ExamScalarWhereInput
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyWithoutExamSessionInput>
}

export type ExamCreateWithoutExamEnrollmentInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutExamsInput
  subject: Prisma.SubjectCreateNestedOneWithoutExamInput
  organization: Prisma.OrganizationCreateNestedOneWithoutExamInput
  hallTickets?: Prisma.HallTicketCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateWithoutExamEnrollmentInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  hallTickets?: Prisma.HallTicketUncheckedCreateNestedManyWithoutExamInput
  examResult?: Prisma.ExamResultUncheckedCreateNestedManyWithoutExamInput
}

export type ExamCreateOrConnectWithoutExamEnrollmentInput = {
  where: Prisma.ExamWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamCreateWithoutExamEnrollmentInput, Prisma.ExamUncheckedCreateWithoutExamEnrollmentInput>
}

export type ExamUpsertWithoutExamEnrollmentInput = {
  update: Prisma.XOR<Prisma.ExamUpdateWithoutExamEnrollmentInput, Prisma.ExamUncheckedUpdateWithoutExamEnrollmentInput>
  create: Prisma.XOR<Prisma.ExamCreateWithoutExamEnrollmentInput, Prisma.ExamUncheckedCreateWithoutExamEnrollmentInput>
  where?: Prisma.ExamWhereInput
}

export type ExamUpdateToOneWithWhereWithoutExamEnrollmentInput = {
  where?: Prisma.ExamWhereInput
  data: Prisma.XOR<Prisma.ExamUpdateWithoutExamEnrollmentInput, Prisma.ExamUncheckedUpdateWithoutExamEnrollmentInput>
}

export type ExamUpdateWithoutExamEnrollmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutExamsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutExamNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutExamNestedInput
  hallTickets?: Prisma.HallTicketUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateWithoutExamEnrollmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hallTickets?: Prisma.HallTicketUncheckedUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamCreateWithoutExamResultInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutExamsInput
  subject: Prisma.SubjectCreateNestedOneWithoutExamInput
  organization: Prisma.OrganizationCreateNestedOneWithoutExamInput
  hallTickets?: Prisma.HallTicketCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateWithoutExamResultInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  hallTickets?: Prisma.HallTicketUncheckedCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput
}

export type ExamCreateOrConnectWithoutExamResultInput = {
  where: Prisma.ExamWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamCreateWithoutExamResultInput, Prisma.ExamUncheckedCreateWithoutExamResultInput>
}

export type ExamUpsertWithoutExamResultInput = {
  update: Prisma.XOR<Prisma.ExamUpdateWithoutExamResultInput, Prisma.ExamUncheckedUpdateWithoutExamResultInput>
  create: Prisma.XOR<Prisma.ExamCreateWithoutExamResultInput, Prisma.ExamUncheckedCreateWithoutExamResultInput>
  where?: Prisma.ExamWhereInput
}

export type ExamUpdateToOneWithWhereWithoutExamResultInput = {
  where?: Prisma.ExamWhereInput
  data: Prisma.XOR<Prisma.ExamUpdateWithoutExamResultInput, Prisma.ExamUncheckedUpdateWithoutExamResultInput>
}

export type ExamUpdateWithoutExamResultInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutExamsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutExamNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutExamNestedInput
  hallTickets?: Prisma.HallTicketUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateWithoutExamResultInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hallTickets?: Prisma.HallTicketUncheckedUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamCreateWithoutHallTicketsInput = {
  id?: string
  title: string
  description?: string | null
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examSession: Prisma.ExamSessionCreateNestedOneWithoutExamsInput
  subject: Prisma.SubjectCreateNestedOneWithoutExamInput
  organization: Prisma.OrganizationCreateNestedOneWithoutExamInput
  examResult?: Prisma.ExamResultCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentCreateNestedManyWithoutExamInput
}

export type ExamUncheckedCreateWithoutHallTicketsInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  examResult?: Prisma.ExamResultUncheckedCreateNestedManyWithoutExamInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput
}

export type ExamCreateOrConnectWithoutHallTicketsInput = {
  where: Prisma.ExamWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamCreateWithoutHallTicketsInput, Prisma.ExamUncheckedCreateWithoutHallTicketsInput>
}

export type ExamUpsertWithoutHallTicketsInput = {
  update: Prisma.XOR<Prisma.ExamUpdateWithoutHallTicketsInput, Prisma.ExamUncheckedUpdateWithoutHallTicketsInput>
  create: Prisma.XOR<Prisma.ExamCreateWithoutHallTicketsInput, Prisma.ExamUncheckedCreateWithoutHallTicketsInput>
  where?: Prisma.ExamWhereInput
}

export type ExamUpdateToOneWithWhereWithoutHallTicketsInput = {
  where?: Prisma.ExamWhereInput
  data: Prisma.XOR<Prisma.ExamUpdateWithoutHallTicketsInput, Prisma.ExamUncheckedUpdateWithoutHallTicketsInput>
}

export type ExamUpdateWithoutHallTicketsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutExamsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutExamNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutExamNestedInput
  examResult?: Prisma.ExamResultUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateWithoutHallTicketsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examResult?: Prisma.ExamResultUncheckedUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamCreateManyOrganizationInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  subjectId: string
  gradeId: string
  sectionId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutExamsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutExamNestedInput
  hallTickets?: Prisma.HallTicketUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hallTickets?: Prisma.HallTicketUncheckedUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUncheckedUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamCreateManySubjectInput = {
  id?: string
  title: string
  description?: string | null
  examSessionId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  examSession?: Prisma.ExamSessionUpdateOneRequiredWithoutExamsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutExamNestedInput
  hallTickets?: Prisma.HallTicketUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hallTickets?: Prisma.HallTicketUncheckedUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUncheckedUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  examSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamCreateManyExamSessionInput = {
  id?: string
  title: string
  description?: string | null
  subjectId: string
  gradeId: string
  sectionId: string
  organizationId: string
  maxMarks: number
  passingMarks?: number | null
  weightage?: number | null
  evaluationType: $Enums.EvaluationType
  mode: $Enums.ExamMode
  status?: $Enums.ExamStatus
  instructions?: string | null
  durationInMinutes?: number | null
  venueMapUrl?: string | null
  venue?: string | null
  isResultsPublished?: boolean
  supervisors?: Prisma.ExamCreatesupervisorsInput | string[]
  startDate: Date | string
  endDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  subject?: Prisma.SubjectUpdateOneRequiredWithoutExamNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutExamNestedInput
  hallTickets?: Prisma.HallTicketUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hallTickets?: Prisma.HallTicketUncheckedUpdateManyWithoutExamNestedInput
  examResult?: Prisma.ExamResultUncheckedUpdateManyWithoutExamNestedInput
  examEnrollment?: Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput
}

export type ExamUncheckedUpdateManyWithoutExamSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.StringFieldUpdateOperationsInput | string
  sectionId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  maxMarks?: Prisma.FloatFieldUpdateOperationsInput | number
  passingMarks?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  weightage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  evaluationType?: Prisma.EnumEvaluationTypeFieldUpdateOperationsInput | $Enums.EvaluationType
  mode?: Prisma.EnumExamModeFieldUpdateOperationsInput | $Enums.ExamMode
  status?: Prisma.EnumExamStatusFieldUpdateOperationsInput | $Enums.ExamStatus
  instructions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  durationInMinutes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  venueMapUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  venue?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResultsPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  supervisors?: Prisma.ExamUpdatesupervisorsInput | string[]
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ExamCountOutputType
 */

export type ExamCountOutputType = {
  hallTickets: number
  examResult: number
  examEnrollment: number
}

export type ExamCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  hallTickets?: boolean | ExamCountOutputTypeCountHallTicketsArgs
  examResult?: boolean | ExamCountOutputTypeCountExamResultArgs
  examEnrollment?: boolean | ExamCountOutputTypeCountExamEnrollmentArgs
}

/**
 * ExamCountOutputType without action
 */
export type ExamCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamCountOutputType
   */
  select?: Prisma.ExamCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExamCountOutputType without action
 */
export type ExamCountOutputTypeCountHallTicketsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HallTicketWhereInput
}

/**
 * ExamCountOutputType without action
 */
export type ExamCountOutputTypeCountExamResultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamResultWhereInput
}

/**
 * ExamCountOutputType without action
 */
export type ExamCountOutputTypeCountExamEnrollmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamEnrollmentWhereInput
}


export type ExamSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  examSessionId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  maxMarks?: boolean
  passingMarks?: boolean
  weightage?: boolean
  evaluationType?: boolean
  mode?: boolean
  status?: boolean
  instructions?: boolean
  durationInMinutes?: boolean
  venueMapUrl?: boolean
  venue?: boolean
  isResultsPublished?: boolean
  supervisors?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  hallTickets?: boolean | Prisma.Exam$hallTicketsArgs<ExtArgs>
  examResult?: boolean | Prisma.Exam$examResultArgs<ExtArgs>
  examEnrollment?: boolean | Prisma.Exam$examEnrollmentArgs<ExtArgs>
  _count?: boolean | Prisma.ExamCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exam"]>

export type ExamSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  examSessionId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  maxMarks?: boolean
  passingMarks?: boolean
  weightage?: boolean
  evaluationType?: boolean
  mode?: boolean
  status?: boolean
  instructions?: boolean
  durationInMinutes?: boolean
  venueMapUrl?: boolean
  venue?: boolean
  isResultsPublished?: boolean
  supervisors?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exam"]>

export type ExamSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  examSessionId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  maxMarks?: boolean
  passingMarks?: boolean
  weightage?: boolean
  evaluationType?: boolean
  mode?: boolean
  status?: boolean
  instructions?: boolean
  durationInMinutes?: boolean
  venueMapUrl?: boolean
  venue?: boolean
  isResultsPublished?: boolean
  supervisors?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exam"]>

export type ExamSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  examSessionId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  sectionId?: boolean
  organizationId?: boolean
  maxMarks?: boolean
  passingMarks?: boolean
  weightage?: boolean
  evaluationType?: boolean
  mode?: boolean
  status?: boolean
  instructions?: boolean
  durationInMinutes?: boolean
  venueMapUrl?: boolean
  venue?: boolean
  isResultsPublished?: boolean
  supervisors?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExamOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "examSessionId" | "subjectId" | "gradeId" | "sectionId" | "organizationId" | "maxMarks" | "passingMarks" | "weightage" | "evaluationType" | "mode" | "status" | "instructions" | "durationInMinutes" | "venueMapUrl" | "venue" | "isResultsPublished" | "supervisors" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["exam"]>
export type ExamInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  hallTickets?: boolean | Prisma.Exam$hallTicketsArgs<ExtArgs>
  examResult?: boolean | Prisma.Exam$examResultArgs<ExtArgs>
  examEnrollment?: boolean | Prisma.Exam$examEnrollmentArgs<ExtArgs>
  _count?: boolean | Prisma.ExamCountOutputTypeDefaultArgs<ExtArgs>
}
export type ExamIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type ExamIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  examSession?: boolean | Prisma.ExamSessionDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $ExamPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Exam"
  objects: {
    examSession: Prisma.$ExamSessionPayload<ExtArgs>
    subject: Prisma.$SubjectPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
    hallTickets: Prisma.$HallTicketPayload<ExtArgs>[]
    examResult: Prisma.$ExamResultPayload<ExtArgs>[]
    examEnrollment: Prisma.$ExamEnrollmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    examSessionId: string
    subjectId: string
    gradeId: string
    sectionId: string
    organizationId: string
    maxMarks: number
    passingMarks: number | null
    weightage: number | null
    evaluationType: $Enums.EvaluationType
    mode: $Enums.ExamMode
    status: $Enums.ExamStatus
    instructions: string | null
    durationInMinutes: number | null
    venueMapUrl: string | null
    venue: string | null
    isResultsPublished: boolean
    supervisors: string[]
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["exam"]>
  composites: {}
}

export type ExamGetPayload<S extends boolean | null | undefined | ExamDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExamPayload, S>

export type ExamCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExamCountAggregateInputType | true
  }

export interface ExamDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exam'], meta: { name: 'Exam' } }
  /**
   * Find zero or one Exam that matches the filter.
   * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExamFindUniqueArgs>(args: Prisma.SelectSubset<T, ExamFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Exam that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExamFindUniqueOrThrowArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExamFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExamFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exam that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamFindFirstArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExamFindFirstArgs>(args?: Prisma.SelectSubset<T, ExamFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exam that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamFindFirstOrThrowArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExamFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExamFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Exams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Exams
   * const exams = await prisma.exam.findMany()
   * 
   * // Get first 10 Exams
   * const exams = await prisma.exam.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExamFindManyArgs>(args?: Prisma.SelectSubset<T, ExamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Exam.
   * @param {ExamCreateArgs} args - Arguments to create a Exam.
   * @example
   * // Create one Exam
   * const Exam = await prisma.exam.create({
   *   data: {
   *     // ... data to create a Exam
   *   }
   * })
   * 
   */
  create<T extends ExamCreateArgs>(args: Prisma.SelectSubset<T, ExamCreateArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Exams.
   * @param {ExamCreateManyArgs} args - Arguments to create many Exams.
   * @example
   * // Create many Exams
   * const exam = await prisma.exam.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExamCreateManyArgs>(args?: Prisma.SelectSubset<T, ExamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Exams and returns the data saved in the database.
   * @param {ExamCreateManyAndReturnArgs} args - Arguments to create many Exams.
   * @example
   * // Create many Exams
   * const exam = await prisma.exam.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Exams and only return the `id`
   * const examWithIdOnly = await prisma.exam.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExamCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Exam.
   * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
   * @example
   * // Delete one Exam
   * const Exam = await prisma.exam.delete({
   *   where: {
   *     // ... filter to delete one Exam
   *   }
   * })
   * 
   */
  delete<T extends ExamDeleteArgs>(args: Prisma.SelectSubset<T, ExamDeleteArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Exam.
   * @param {ExamUpdateArgs} args - Arguments to update one Exam.
   * @example
   * // Update one Exam
   * const exam = await prisma.exam.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExamUpdateArgs>(args: Prisma.SelectSubset<T, ExamUpdateArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Exams.
   * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
   * @example
   * // Delete a few Exams
   * const { count } = await prisma.exam.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExamDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Exams
   * const exam = await prisma.exam.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExamUpdateManyArgs>(args: Prisma.SelectSubset<T, ExamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exams and returns the data updated in the database.
   * @param {ExamUpdateManyAndReturnArgs} args - Arguments to update many Exams.
   * @example
   * // Update many Exams
   * const exam = await prisma.exam.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Exams and only return the `id`
   * const examWithIdOnly = await prisma.exam.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExamUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Exam.
   * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
   * @example
   * // Update or create a Exam
   * const exam = await prisma.exam.upsert({
   *   create: {
   *     // ... data to create a Exam
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Exam we want to update
   *   }
   * })
   */
  upsert<T extends ExamUpsertArgs>(args: Prisma.SelectSubset<T, ExamUpsertArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Exams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamCountArgs} args - Arguments to filter Exams to count.
   * @example
   * // Count the number of Exams
   * const count = await prisma.exam.count({
   *   where: {
   *     // ... the filter for the Exams we want to count
   *   }
   * })
  **/
  count<T extends ExamCountArgs>(
    args?: Prisma.Subset<T, ExamCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExamCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Exam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExamAggregateArgs>(args: Prisma.Subset<T, ExamAggregateArgs>): Prisma.PrismaPromise<GetExamAggregateType<T>>

  /**
   * Group by Exam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExamGroupByArgs['orderBy'] }
      : { orderBy?: ExamGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Exam model
 */
readonly fields: ExamFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Exam.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExamClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  examSession<T extends Prisma.ExamSessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExamSessionDefaultArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>): Prisma.Prisma__SubjectClient<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  hallTickets<T extends Prisma.Exam$hallTicketsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Exam$hallTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HallTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  examResult<T extends Prisma.Exam$examResultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Exam$examResultArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  examEnrollment<T extends Prisma.Exam$examEnrollmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Exam$examEnrollmentArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Exam model
 */
export interface ExamFieldRefs {
  readonly id: Prisma.FieldRef<"Exam", 'String'>
  readonly title: Prisma.FieldRef<"Exam", 'String'>
  readonly description: Prisma.FieldRef<"Exam", 'String'>
  readonly examSessionId: Prisma.FieldRef<"Exam", 'String'>
  readonly subjectId: Prisma.FieldRef<"Exam", 'String'>
  readonly gradeId: Prisma.FieldRef<"Exam", 'String'>
  readonly sectionId: Prisma.FieldRef<"Exam", 'String'>
  readonly organizationId: Prisma.FieldRef<"Exam", 'String'>
  readonly maxMarks: Prisma.FieldRef<"Exam", 'Float'>
  readonly passingMarks: Prisma.FieldRef<"Exam", 'Float'>
  readonly weightage: Prisma.FieldRef<"Exam", 'Float'>
  readonly evaluationType: Prisma.FieldRef<"Exam", 'EvaluationType'>
  readonly mode: Prisma.FieldRef<"Exam", 'ExamMode'>
  readonly status: Prisma.FieldRef<"Exam", 'ExamStatus'>
  readonly instructions: Prisma.FieldRef<"Exam", 'String'>
  readonly durationInMinutes: Prisma.FieldRef<"Exam", 'Int'>
  readonly venueMapUrl: Prisma.FieldRef<"Exam", 'String'>
  readonly venue: Prisma.FieldRef<"Exam", 'String'>
  readonly isResultsPublished: Prisma.FieldRef<"Exam", 'Boolean'>
  readonly supervisors: Prisma.FieldRef<"Exam", 'String[]'>
  readonly startDate: Prisma.FieldRef<"Exam", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Exam", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Exam", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Exam", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Exam findUnique
 */
export type ExamFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam findUniqueOrThrow
 */
export type ExamFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam findFirst
 */
export type ExamFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exams.
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exams.
   */
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Exam findFirstOrThrow
 */
export type ExamFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exams.
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exams.
   */
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Exam findMany
 */
export type ExamFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * Filter, which Exams to fetch.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Exams.
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Exam create
 */
export type ExamCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * The data needed to create a Exam.
   */
  data: Prisma.XOR<Prisma.ExamCreateInput, Prisma.ExamUncheckedCreateInput>
}

/**
 * Exam createMany
 */
export type ExamCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Exams.
   */
  data: Prisma.ExamCreateManyInput | Prisma.ExamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Exam createManyAndReturn
 */
export type ExamCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The data used to create many Exams.
   */
  data: Prisma.ExamCreateManyInput | Prisma.ExamCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Exam update
 */
export type ExamUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * The data needed to update a Exam.
   */
  data: Prisma.XOR<Prisma.ExamUpdateInput, Prisma.ExamUncheckedUpdateInput>
  /**
   * Choose, which Exam to update.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam updateMany
 */
export type ExamUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Exams.
   */
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyInput>
  /**
   * Filter which Exams to update
   */
  where?: Prisma.ExamWhereInput
  /**
   * Limit how many Exams to update.
   */
  limit?: number
}

/**
 * Exam updateManyAndReturn
 */
export type ExamUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The data used to update Exams.
   */
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyInput>
  /**
   * Filter which Exams to update
   */
  where?: Prisma.ExamWhereInput
  /**
   * Limit how many Exams to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Exam upsert
 */
export type ExamUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * The filter to search for the Exam to update in case it exists.
   */
  where: Prisma.ExamWhereUniqueInput
  /**
   * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
   */
  create: Prisma.XOR<Prisma.ExamCreateInput, Prisma.ExamUncheckedCreateInput>
  /**
   * In case the Exam was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExamUpdateInput, Prisma.ExamUncheckedUpdateInput>
}

/**
 * Exam delete
 */
export type ExamDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  /**
   * Filter which Exam to delete.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam deleteMany
 */
export type ExamDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exams to delete
   */
  where?: Prisma.ExamWhereInput
  /**
   * Limit how many Exams to delete.
   */
  limit?: number
}

/**
 * Exam.hallTickets
 */
export type Exam$hallTicketsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HallTicket
   */
  select?: Prisma.HallTicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HallTicket
   */
  omit?: Prisma.HallTicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HallTicketInclude<ExtArgs> | null
  where?: Prisma.HallTicketWhereInput
  orderBy?: Prisma.HallTicketOrderByWithRelationInput | Prisma.HallTicketOrderByWithRelationInput[]
  cursor?: Prisma.HallTicketWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.HallTicketScalarFieldEnum | Prisma.HallTicketScalarFieldEnum[]
}

/**
 * Exam.examResult
 */
export type Exam$examResultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamResult
   */
  select?: Prisma.ExamResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamResult
   */
  omit?: Prisma.ExamResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamResultInclude<ExtArgs> | null
  where?: Prisma.ExamResultWhereInput
  orderBy?: Prisma.ExamResultOrderByWithRelationInput | Prisma.ExamResultOrderByWithRelationInput[]
  cursor?: Prisma.ExamResultWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamResultScalarFieldEnum | Prisma.ExamResultScalarFieldEnum[]
}

/**
 * Exam.examEnrollment
 */
export type Exam$examEnrollmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  where?: Prisma.ExamEnrollmentWhereInput
  orderBy?: Prisma.ExamEnrollmentOrderByWithRelationInput | Prisma.ExamEnrollmentOrderByWithRelationInput[]
  cursor?: Prisma.ExamEnrollmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamEnrollmentScalarFieldEnum | Prisma.ExamEnrollmentScalarFieldEnum[]
}

/**
 * Exam without action
 */
export type ExamDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
}
