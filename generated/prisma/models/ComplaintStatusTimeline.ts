
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ComplaintStatusTimeline` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ComplaintStatusTimeline
 * 
 */
export type ComplaintStatusTimelineModel = runtime.Types.Result.DefaultSelection<Prisma.$ComplaintStatusTimelinePayload>

export type AggregateComplaintStatusTimeline = {
  _count: ComplaintStatusTimelineCountAggregateOutputType | null
  _min: ComplaintStatusTimelineMinAggregateOutputType | null
  _max: ComplaintStatusTimelineMaxAggregateOutputType | null
}

export type ComplaintStatusTimelineMinAggregateOutputType = {
  id: string | null
  complaintId: string | null
  note: string | null
  status: $Enums.ComplaintStatus | null
  changedBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ComplaintStatusTimelineMaxAggregateOutputType = {
  id: string | null
  complaintId: string | null
  note: string | null
  status: $Enums.ComplaintStatus | null
  changedBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ComplaintStatusTimelineCountAggregateOutputType = {
  id: number
  complaintId: number
  note: number
  status: number
  changedBy: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ComplaintStatusTimelineMinAggregateInputType = {
  id?: true
  complaintId?: true
  note?: true
  status?: true
  changedBy?: true
  createdAt?: true
  updatedAt?: true
}

export type ComplaintStatusTimelineMaxAggregateInputType = {
  id?: true
  complaintId?: true
  note?: true
  status?: true
  changedBy?: true
  createdAt?: true
  updatedAt?: true
}

export type ComplaintStatusTimelineCountAggregateInputType = {
  id?: true
  complaintId?: true
  note?: true
  status?: true
  changedBy?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ComplaintStatusTimelineAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ComplaintStatusTimeline to aggregate.
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ComplaintStatusTimelines to fetch.
   */
  orderBy?: Prisma.ComplaintStatusTimelineOrderByWithRelationInput | Prisma.ComplaintStatusTimelineOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ComplaintStatusTimelineWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ComplaintStatusTimelines from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ComplaintStatusTimelines.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ComplaintStatusTimelines
  **/
  _count?: true | ComplaintStatusTimelineCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ComplaintStatusTimelineMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ComplaintStatusTimelineMaxAggregateInputType
}

export type GetComplaintStatusTimelineAggregateType<T extends ComplaintStatusTimelineAggregateArgs> = {
      [P in keyof T & keyof AggregateComplaintStatusTimeline]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateComplaintStatusTimeline[P]>
    : Prisma.GetScalarType<T[P], AggregateComplaintStatusTimeline[P]>
}




export type ComplaintStatusTimelineGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ComplaintStatusTimelineWhereInput
  orderBy?: Prisma.ComplaintStatusTimelineOrderByWithAggregationInput | Prisma.ComplaintStatusTimelineOrderByWithAggregationInput[]
  by: Prisma.ComplaintStatusTimelineScalarFieldEnum[] | Prisma.ComplaintStatusTimelineScalarFieldEnum
  having?: Prisma.ComplaintStatusTimelineScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ComplaintStatusTimelineCountAggregateInputType | true
  _min?: ComplaintStatusTimelineMinAggregateInputType
  _max?: ComplaintStatusTimelineMaxAggregateInputType
}

export type ComplaintStatusTimelineGroupByOutputType = {
  id: string
  complaintId: string
  note: string | null
  status: $Enums.ComplaintStatus
  changedBy: string | null
  createdAt: Date
  updatedAt: Date
  _count: ComplaintStatusTimelineCountAggregateOutputType | null
  _min: ComplaintStatusTimelineMinAggregateOutputType | null
  _max: ComplaintStatusTimelineMaxAggregateOutputType | null
}

type GetComplaintStatusTimelineGroupByPayload<T extends ComplaintStatusTimelineGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ComplaintStatusTimelineGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ComplaintStatusTimelineGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ComplaintStatusTimelineGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ComplaintStatusTimelineGroupByOutputType[P]>
      }
    >
  >



export type ComplaintStatusTimelineWhereInput = {
  AND?: Prisma.ComplaintStatusTimelineWhereInput | Prisma.ComplaintStatusTimelineWhereInput[]
  OR?: Prisma.ComplaintStatusTimelineWhereInput[]
  NOT?: Prisma.ComplaintStatusTimelineWhereInput | Prisma.ComplaintStatusTimelineWhereInput[]
  id?: Prisma.StringFilter<"ComplaintStatusTimeline"> | string
  complaintId?: Prisma.StringFilter<"ComplaintStatusTimeline"> | string
  note?: Prisma.StringNullableFilter<"ComplaintStatusTimeline"> | string | null
  status?: Prisma.EnumComplaintStatusFilter<"ComplaintStatusTimeline"> | $Enums.ComplaintStatus
  changedBy?: Prisma.StringNullableFilter<"ComplaintStatusTimeline"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ComplaintStatusTimeline"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ComplaintStatusTimeline"> | Date | string
  complaint?: Prisma.XOR<Prisma.AnonymousComplaintScalarRelationFilter, Prisma.AnonymousComplaintWhereInput>
}

export type ComplaintStatusTimelineOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  complaintId?: Prisma.SortOrder
  note?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  changedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  complaint?: Prisma.AnonymousComplaintOrderByWithRelationInput
  _relevance?: Prisma.ComplaintStatusTimelineOrderByRelevanceInput
}

export type ComplaintStatusTimelineWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ComplaintStatusTimelineWhereInput | Prisma.ComplaintStatusTimelineWhereInput[]
  OR?: Prisma.ComplaintStatusTimelineWhereInput[]
  NOT?: Prisma.ComplaintStatusTimelineWhereInput | Prisma.ComplaintStatusTimelineWhereInput[]
  complaintId?: Prisma.StringFilter<"ComplaintStatusTimeline"> | string
  note?: Prisma.StringNullableFilter<"ComplaintStatusTimeline"> | string | null
  status?: Prisma.EnumComplaintStatusFilter<"ComplaintStatusTimeline"> | $Enums.ComplaintStatus
  changedBy?: Prisma.StringNullableFilter<"ComplaintStatusTimeline"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ComplaintStatusTimeline"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ComplaintStatusTimeline"> | Date | string
  complaint?: Prisma.XOR<Prisma.AnonymousComplaintScalarRelationFilter, Prisma.AnonymousComplaintWhereInput>
}, "id">

export type ComplaintStatusTimelineOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  complaintId?: Prisma.SortOrder
  note?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  changedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ComplaintStatusTimelineCountOrderByAggregateInput
  _max?: Prisma.ComplaintStatusTimelineMaxOrderByAggregateInput
  _min?: Prisma.ComplaintStatusTimelineMinOrderByAggregateInput
}

export type ComplaintStatusTimelineScalarWhereWithAggregatesInput = {
  AND?: Prisma.ComplaintStatusTimelineScalarWhereWithAggregatesInput | Prisma.ComplaintStatusTimelineScalarWhereWithAggregatesInput[]
  OR?: Prisma.ComplaintStatusTimelineScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ComplaintStatusTimelineScalarWhereWithAggregatesInput | Prisma.ComplaintStatusTimelineScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ComplaintStatusTimeline"> | string
  complaintId?: Prisma.StringWithAggregatesFilter<"ComplaintStatusTimeline"> | string
  note?: Prisma.StringNullableWithAggregatesFilter<"ComplaintStatusTimeline"> | string | null
  status?: Prisma.EnumComplaintStatusWithAggregatesFilter<"ComplaintStatusTimeline"> | $Enums.ComplaintStatus
  changedBy?: Prisma.StringNullableWithAggregatesFilter<"ComplaintStatusTimeline"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ComplaintStatusTimeline"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ComplaintStatusTimeline"> | Date | string
}

export type ComplaintStatusTimelineCreateInput = {
  id?: string
  note?: string | null
  status?: $Enums.ComplaintStatus
  changedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  complaint: Prisma.AnonymousComplaintCreateNestedOneWithoutComplaintStatusTimelineInput
}

export type ComplaintStatusTimelineUncheckedCreateInput = {
  id?: string
  complaintId: string
  note?: string | null
  status?: $Enums.ComplaintStatus
  changedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintStatusTimelineUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaint?: Prisma.AnonymousComplaintUpdateOneRequiredWithoutComplaintStatusTimelineNestedInput
}

export type ComplaintStatusTimelineUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  complaintId?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintStatusTimelineCreateManyInput = {
  id?: string
  complaintId: string
  note?: string | null
  status?: $Enums.ComplaintStatus
  changedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintStatusTimelineUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintStatusTimelineUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  complaintId?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintStatusTimelineListRelationFilter = {
  every?: Prisma.ComplaintStatusTimelineWhereInput
  some?: Prisma.ComplaintStatusTimelineWhereInput
  none?: Prisma.ComplaintStatusTimelineWhereInput
}

export type ComplaintStatusTimelineOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ComplaintStatusTimelineOrderByRelevanceInput = {
  fields: Prisma.ComplaintStatusTimelineOrderByRelevanceFieldEnum | Prisma.ComplaintStatusTimelineOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ComplaintStatusTimelineCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  complaintId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ComplaintStatusTimelineMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  complaintId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ComplaintStatusTimelineMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  complaintId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ComplaintStatusTimelineCreateNestedManyWithoutComplaintInput = {
  create?: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput> | Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput[] | Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput[]
  connectOrCreate?: Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput | Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput[]
  createMany?: Prisma.ComplaintStatusTimelineCreateManyComplaintInputEnvelope
  connect?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
}

export type ComplaintStatusTimelineUncheckedCreateNestedManyWithoutComplaintInput = {
  create?: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput> | Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput[] | Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput[]
  connectOrCreate?: Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput | Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput[]
  createMany?: Prisma.ComplaintStatusTimelineCreateManyComplaintInputEnvelope
  connect?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
}

export type ComplaintStatusTimelineUpdateManyWithoutComplaintNestedInput = {
  create?: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput> | Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput[] | Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput[]
  connectOrCreate?: Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput | Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput[]
  upsert?: Prisma.ComplaintStatusTimelineUpsertWithWhereUniqueWithoutComplaintInput | Prisma.ComplaintStatusTimelineUpsertWithWhereUniqueWithoutComplaintInput[]
  createMany?: Prisma.ComplaintStatusTimelineCreateManyComplaintInputEnvelope
  set?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  disconnect?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  delete?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  connect?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  update?: Prisma.ComplaintStatusTimelineUpdateWithWhereUniqueWithoutComplaintInput | Prisma.ComplaintStatusTimelineUpdateWithWhereUniqueWithoutComplaintInput[]
  updateMany?: Prisma.ComplaintStatusTimelineUpdateManyWithWhereWithoutComplaintInput | Prisma.ComplaintStatusTimelineUpdateManyWithWhereWithoutComplaintInput[]
  deleteMany?: Prisma.ComplaintStatusTimelineScalarWhereInput | Prisma.ComplaintStatusTimelineScalarWhereInput[]
}

export type ComplaintStatusTimelineUncheckedUpdateManyWithoutComplaintNestedInput = {
  create?: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput> | Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput[] | Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput[]
  connectOrCreate?: Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput | Prisma.ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput[]
  upsert?: Prisma.ComplaintStatusTimelineUpsertWithWhereUniqueWithoutComplaintInput | Prisma.ComplaintStatusTimelineUpsertWithWhereUniqueWithoutComplaintInput[]
  createMany?: Prisma.ComplaintStatusTimelineCreateManyComplaintInputEnvelope
  set?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  disconnect?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  delete?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  connect?: Prisma.ComplaintStatusTimelineWhereUniqueInput | Prisma.ComplaintStatusTimelineWhereUniqueInput[]
  update?: Prisma.ComplaintStatusTimelineUpdateWithWhereUniqueWithoutComplaintInput | Prisma.ComplaintStatusTimelineUpdateWithWhereUniqueWithoutComplaintInput[]
  updateMany?: Prisma.ComplaintStatusTimelineUpdateManyWithWhereWithoutComplaintInput | Prisma.ComplaintStatusTimelineUpdateManyWithWhereWithoutComplaintInput[]
  deleteMany?: Prisma.ComplaintStatusTimelineScalarWhereInput | Prisma.ComplaintStatusTimelineScalarWhereInput[]
}

export type ComplaintStatusTimelineCreateWithoutComplaintInput = {
  id?: string
  note?: string | null
  status?: $Enums.ComplaintStatus
  changedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput = {
  id?: string
  note?: string | null
  status?: $Enums.ComplaintStatus
  changedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintStatusTimelineCreateOrConnectWithoutComplaintInput = {
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
  create: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput>
}

export type ComplaintStatusTimelineCreateManyComplaintInputEnvelope = {
  data: Prisma.ComplaintStatusTimelineCreateManyComplaintInput | Prisma.ComplaintStatusTimelineCreateManyComplaintInput[]
  skipDuplicates?: boolean
}

export type ComplaintStatusTimelineUpsertWithWhereUniqueWithoutComplaintInput = {
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
  update: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedUpdateWithoutComplaintInput>
  create: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedCreateWithoutComplaintInput>
}

export type ComplaintStatusTimelineUpdateWithWhereUniqueWithoutComplaintInput = {
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
  data: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateWithoutComplaintInput, Prisma.ComplaintStatusTimelineUncheckedUpdateWithoutComplaintInput>
}

export type ComplaintStatusTimelineUpdateManyWithWhereWithoutComplaintInput = {
  where: Prisma.ComplaintStatusTimelineScalarWhereInput
  data: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateManyMutationInput, Prisma.ComplaintStatusTimelineUncheckedUpdateManyWithoutComplaintInput>
}

export type ComplaintStatusTimelineScalarWhereInput = {
  AND?: Prisma.ComplaintStatusTimelineScalarWhereInput | Prisma.ComplaintStatusTimelineScalarWhereInput[]
  OR?: Prisma.ComplaintStatusTimelineScalarWhereInput[]
  NOT?: Prisma.ComplaintStatusTimelineScalarWhereInput | Prisma.ComplaintStatusTimelineScalarWhereInput[]
  id?: Prisma.StringFilter<"ComplaintStatusTimeline"> | string
  complaintId?: Prisma.StringFilter<"ComplaintStatusTimeline"> | string
  note?: Prisma.StringNullableFilter<"ComplaintStatusTimeline"> | string | null
  status?: Prisma.EnumComplaintStatusFilter<"ComplaintStatusTimeline"> | $Enums.ComplaintStatus
  changedBy?: Prisma.StringNullableFilter<"ComplaintStatusTimeline"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ComplaintStatusTimeline"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ComplaintStatusTimeline"> | Date | string
}

export type ComplaintStatusTimelineCreateManyComplaintInput = {
  id?: string
  note?: string | null
  status?: $Enums.ComplaintStatus
  changedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintStatusTimelineUpdateWithoutComplaintInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintStatusTimelineUncheckedUpdateWithoutComplaintInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintStatusTimelineUncheckedUpdateManyWithoutComplaintInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ComplaintStatusTimelineSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  complaintId?: boolean
  note?: boolean
  status?: boolean
  changedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  complaint?: boolean | Prisma.AnonymousComplaintDefaultArgs<ExtArgs>
}, ExtArgs["result"]["complaintStatusTimeline"]>

export type ComplaintStatusTimelineSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  complaintId?: boolean
  note?: boolean
  status?: boolean
  changedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  complaint?: boolean | Prisma.AnonymousComplaintDefaultArgs<ExtArgs>
}, ExtArgs["result"]["complaintStatusTimeline"]>

export type ComplaintStatusTimelineSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  complaintId?: boolean
  note?: boolean
  status?: boolean
  changedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  complaint?: boolean | Prisma.AnonymousComplaintDefaultArgs<ExtArgs>
}, ExtArgs["result"]["complaintStatusTimeline"]>

export type ComplaintStatusTimelineSelectScalar = {
  id?: boolean
  complaintId?: boolean
  note?: boolean
  status?: boolean
  changedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ComplaintStatusTimelineOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "complaintId" | "note" | "status" | "changedBy" | "createdAt" | "updatedAt", ExtArgs["result"]["complaintStatusTimeline"]>
export type ComplaintStatusTimelineInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complaint?: boolean | Prisma.AnonymousComplaintDefaultArgs<ExtArgs>
}
export type ComplaintStatusTimelineIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complaint?: boolean | Prisma.AnonymousComplaintDefaultArgs<ExtArgs>
}
export type ComplaintStatusTimelineIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complaint?: boolean | Prisma.AnonymousComplaintDefaultArgs<ExtArgs>
}

export type $ComplaintStatusTimelinePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ComplaintStatusTimeline"
  objects: {
    complaint: Prisma.$AnonymousComplaintPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    complaintId: string
    note: string | null
    status: $Enums.ComplaintStatus
    changedBy: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["complaintStatusTimeline"]>
  composites: {}
}

export type ComplaintStatusTimelineGetPayload<S extends boolean | null | undefined | ComplaintStatusTimelineDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload, S>

export type ComplaintStatusTimelineCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ComplaintStatusTimelineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ComplaintStatusTimelineCountAggregateInputType | true
  }

export interface ComplaintStatusTimelineDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComplaintStatusTimeline'], meta: { name: 'ComplaintStatusTimeline' } }
  /**
   * Find zero or one ComplaintStatusTimeline that matches the filter.
   * @param {ComplaintStatusTimelineFindUniqueArgs} args - Arguments to find a ComplaintStatusTimeline
   * @example
   * // Get one ComplaintStatusTimeline
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ComplaintStatusTimelineFindUniqueArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ComplaintStatusTimeline that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ComplaintStatusTimelineFindUniqueOrThrowArgs} args - Arguments to find a ComplaintStatusTimeline
   * @example
   * // Get one ComplaintStatusTimeline
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ComplaintStatusTimelineFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ComplaintStatusTimeline that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineFindFirstArgs} args - Arguments to find a ComplaintStatusTimeline
   * @example
   * // Get one ComplaintStatusTimeline
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ComplaintStatusTimelineFindFirstArgs>(args?: Prisma.SelectSubset<T, ComplaintStatusTimelineFindFirstArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ComplaintStatusTimeline that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineFindFirstOrThrowArgs} args - Arguments to find a ComplaintStatusTimeline
   * @example
   * // Get one ComplaintStatusTimeline
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ComplaintStatusTimelineFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ComplaintStatusTimelineFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ComplaintStatusTimelines that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ComplaintStatusTimelines
   * const complaintStatusTimelines = await prisma.complaintStatusTimeline.findMany()
   * 
   * // Get first 10 ComplaintStatusTimelines
   * const complaintStatusTimelines = await prisma.complaintStatusTimeline.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const complaintStatusTimelineWithIdOnly = await prisma.complaintStatusTimeline.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ComplaintStatusTimelineFindManyArgs>(args?: Prisma.SelectSubset<T, ComplaintStatusTimelineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ComplaintStatusTimeline.
   * @param {ComplaintStatusTimelineCreateArgs} args - Arguments to create a ComplaintStatusTimeline.
   * @example
   * // Create one ComplaintStatusTimeline
   * const ComplaintStatusTimeline = await prisma.complaintStatusTimeline.create({
   *   data: {
   *     // ... data to create a ComplaintStatusTimeline
   *   }
   * })
   * 
   */
  create<T extends ComplaintStatusTimelineCreateArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineCreateArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ComplaintStatusTimelines.
   * @param {ComplaintStatusTimelineCreateManyArgs} args - Arguments to create many ComplaintStatusTimelines.
   * @example
   * // Create many ComplaintStatusTimelines
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ComplaintStatusTimelineCreateManyArgs>(args?: Prisma.SelectSubset<T, ComplaintStatusTimelineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ComplaintStatusTimelines and returns the data saved in the database.
   * @param {ComplaintStatusTimelineCreateManyAndReturnArgs} args - Arguments to create many ComplaintStatusTimelines.
   * @example
   * // Create many ComplaintStatusTimelines
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ComplaintStatusTimelines and only return the `id`
   * const complaintStatusTimelineWithIdOnly = await prisma.complaintStatusTimeline.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ComplaintStatusTimelineCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ComplaintStatusTimelineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ComplaintStatusTimeline.
   * @param {ComplaintStatusTimelineDeleteArgs} args - Arguments to delete one ComplaintStatusTimeline.
   * @example
   * // Delete one ComplaintStatusTimeline
   * const ComplaintStatusTimeline = await prisma.complaintStatusTimeline.delete({
   *   where: {
   *     // ... filter to delete one ComplaintStatusTimeline
   *   }
   * })
   * 
   */
  delete<T extends ComplaintStatusTimelineDeleteArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineDeleteArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ComplaintStatusTimeline.
   * @param {ComplaintStatusTimelineUpdateArgs} args - Arguments to update one ComplaintStatusTimeline.
   * @example
   * // Update one ComplaintStatusTimeline
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ComplaintStatusTimelineUpdateArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineUpdateArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ComplaintStatusTimelines.
   * @param {ComplaintStatusTimelineDeleteManyArgs} args - Arguments to filter ComplaintStatusTimelines to delete.
   * @example
   * // Delete a few ComplaintStatusTimelines
   * const { count } = await prisma.complaintStatusTimeline.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ComplaintStatusTimelineDeleteManyArgs>(args?: Prisma.SelectSubset<T, ComplaintStatusTimelineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ComplaintStatusTimelines.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ComplaintStatusTimelines
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ComplaintStatusTimelineUpdateManyArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ComplaintStatusTimelines and returns the data updated in the database.
   * @param {ComplaintStatusTimelineUpdateManyAndReturnArgs} args - Arguments to update many ComplaintStatusTimelines.
   * @example
   * // Update many ComplaintStatusTimelines
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ComplaintStatusTimelines and only return the `id`
   * const complaintStatusTimelineWithIdOnly = await prisma.complaintStatusTimeline.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ComplaintStatusTimelineUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ComplaintStatusTimeline.
   * @param {ComplaintStatusTimelineUpsertArgs} args - Arguments to update or create a ComplaintStatusTimeline.
   * @example
   * // Update or create a ComplaintStatusTimeline
   * const complaintStatusTimeline = await prisma.complaintStatusTimeline.upsert({
   *   create: {
   *     // ... data to create a ComplaintStatusTimeline
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ComplaintStatusTimeline we want to update
   *   }
   * })
   */
  upsert<T extends ComplaintStatusTimelineUpsertArgs>(args: Prisma.SelectSubset<T, ComplaintStatusTimelineUpsertArgs<ExtArgs>>): Prisma.Prisma__ComplaintStatusTimelineClient<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ComplaintStatusTimelines.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineCountArgs} args - Arguments to filter ComplaintStatusTimelines to count.
   * @example
   * // Count the number of ComplaintStatusTimelines
   * const count = await prisma.complaintStatusTimeline.count({
   *   where: {
   *     // ... the filter for the ComplaintStatusTimelines we want to count
   *   }
   * })
  **/
  count<T extends ComplaintStatusTimelineCountArgs>(
    args?: Prisma.Subset<T, ComplaintStatusTimelineCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ComplaintStatusTimelineCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ComplaintStatusTimeline.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ComplaintStatusTimelineAggregateArgs>(args: Prisma.Subset<T, ComplaintStatusTimelineAggregateArgs>): Prisma.PrismaPromise<GetComplaintStatusTimelineAggregateType<T>>

  /**
   * Group by ComplaintStatusTimeline.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintStatusTimelineGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ComplaintStatusTimelineGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ComplaintStatusTimelineGroupByArgs['orderBy'] }
      : { orderBy?: ComplaintStatusTimelineGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ComplaintStatusTimelineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintStatusTimelineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ComplaintStatusTimeline model
 */
readonly fields: ComplaintStatusTimelineFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ComplaintStatusTimeline.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ComplaintStatusTimelineClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  complaint<T extends Prisma.AnonymousComplaintDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AnonymousComplaintDefaultArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ComplaintStatusTimeline model
 */
export interface ComplaintStatusTimelineFieldRefs {
  readonly id: Prisma.FieldRef<"ComplaintStatusTimeline", 'String'>
  readonly complaintId: Prisma.FieldRef<"ComplaintStatusTimeline", 'String'>
  readonly note: Prisma.FieldRef<"ComplaintStatusTimeline", 'String'>
  readonly status: Prisma.FieldRef<"ComplaintStatusTimeline", 'ComplaintStatus'>
  readonly changedBy: Prisma.FieldRef<"ComplaintStatusTimeline", 'String'>
  readonly createdAt: Prisma.FieldRef<"ComplaintStatusTimeline", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ComplaintStatusTimeline", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ComplaintStatusTimeline findUnique
 */
export type ComplaintStatusTimelineFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * Filter, which ComplaintStatusTimeline to fetch.
   */
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
}

/**
 * ComplaintStatusTimeline findUniqueOrThrow
 */
export type ComplaintStatusTimelineFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * Filter, which ComplaintStatusTimeline to fetch.
   */
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
}

/**
 * ComplaintStatusTimeline findFirst
 */
export type ComplaintStatusTimelineFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * Filter, which ComplaintStatusTimeline to fetch.
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ComplaintStatusTimelines to fetch.
   */
  orderBy?: Prisma.ComplaintStatusTimelineOrderByWithRelationInput | Prisma.ComplaintStatusTimelineOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ComplaintStatusTimelines.
   */
  cursor?: Prisma.ComplaintStatusTimelineWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ComplaintStatusTimelines from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ComplaintStatusTimelines.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ComplaintStatusTimelines.
   */
  distinct?: Prisma.ComplaintStatusTimelineScalarFieldEnum | Prisma.ComplaintStatusTimelineScalarFieldEnum[]
}

/**
 * ComplaintStatusTimeline findFirstOrThrow
 */
export type ComplaintStatusTimelineFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * Filter, which ComplaintStatusTimeline to fetch.
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ComplaintStatusTimelines to fetch.
   */
  orderBy?: Prisma.ComplaintStatusTimelineOrderByWithRelationInput | Prisma.ComplaintStatusTimelineOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ComplaintStatusTimelines.
   */
  cursor?: Prisma.ComplaintStatusTimelineWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ComplaintStatusTimelines from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ComplaintStatusTimelines.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ComplaintStatusTimelines.
   */
  distinct?: Prisma.ComplaintStatusTimelineScalarFieldEnum | Prisma.ComplaintStatusTimelineScalarFieldEnum[]
}

/**
 * ComplaintStatusTimeline findMany
 */
export type ComplaintStatusTimelineFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * Filter, which ComplaintStatusTimelines to fetch.
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ComplaintStatusTimelines to fetch.
   */
  orderBy?: Prisma.ComplaintStatusTimelineOrderByWithRelationInput | Prisma.ComplaintStatusTimelineOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ComplaintStatusTimelines.
   */
  cursor?: Prisma.ComplaintStatusTimelineWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ComplaintStatusTimelines from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ComplaintStatusTimelines.
   */
  skip?: number
  distinct?: Prisma.ComplaintStatusTimelineScalarFieldEnum | Prisma.ComplaintStatusTimelineScalarFieldEnum[]
}

/**
 * ComplaintStatusTimeline create
 */
export type ComplaintStatusTimelineCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * The data needed to create a ComplaintStatusTimeline.
   */
  data: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateInput, Prisma.ComplaintStatusTimelineUncheckedCreateInput>
}

/**
 * ComplaintStatusTimeline createMany
 */
export type ComplaintStatusTimelineCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ComplaintStatusTimelines.
   */
  data: Prisma.ComplaintStatusTimelineCreateManyInput | Prisma.ComplaintStatusTimelineCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ComplaintStatusTimeline createManyAndReturn
 */
export type ComplaintStatusTimelineCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * The data used to create many ComplaintStatusTimelines.
   */
  data: Prisma.ComplaintStatusTimelineCreateManyInput | Prisma.ComplaintStatusTimelineCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ComplaintStatusTimeline update
 */
export type ComplaintStatusTimelineUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * The data needed to update a ComplaintStatusTimeline.
   */
  data: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateInput, Prisma.ComplaintStatusTimelineUncheckedUpdateInput>
  /**
   * Choose, which ComplaintStatusTimeline to update.
   */
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
}

/**
 * ComplaintStatusTimeline updateMany
 */
export type ComplaintStatusTimelineUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ComplaintStatusTimelines.
   */
  data: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateManyMutationInput, Prisma.ComplaintStatusTimelineUncheckedUpdateManyInput>
  /**
   * Filter which ComplaintStatusTimelines to update
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * Limit how many ComplaintStatusTimelines to update.
   */
  limit?: number
}

/**
 * ComplaintStatusTimeline updateManyAndReturn
 */
export type ComplaintStatusTimelineUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * The data used to update ComplaintStatusTimelines.
   */
  data: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateManyMutationInput, Prisma.ComplaintStatusTimelineUncheckedUpdateManyInput>
  /**
   * Filter which ComplaintStatusTimelines to update
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * Limit how many ComplaintStatusTimelines to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ComplaintStatusTimeline upsert
 */
export type ComplaintStatusTimelineUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * The filter to search for the ComplaintStatusTimeline to update in case it exists.
   */
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
  /**
   * In case the ComplaintStatusTimeline found by the `where` argument doesn't exist, create a new ComplaintStatusTimeline with this data.
   */
  create: Prisma.XOR<Prisma.ComplaintStatusTimelineCreateInput, Prisma.ComplaintStatusTimelineUncheckedCreateInput>
  /**
   * In case the ComplaintStatusTimeline was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ComplaintStatusTimelineUpdateInput, Prisma.ComplaintStatusTimelineUncheckedUpdateInput>
}

/**
 * ComplaintStatusTimeline delete
 */
export type ComplaintStatusTimelineDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  /**
   * Filter which ComplaintStatusTimeline to delete.
   */
  where: Prisma.ComplaintStatusTimelineWhereUniqueInput
}

/**
 * ComplaintStatusTimeline deleteMany
 */
export type ComplaintStatusTimelineDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ComplaintStatusTimelines to delete
   */
  where?: Prisma.ComplaintStatusTimelineWhereInput
  /**
   * Limit how many ComplaintStatusTimelines to delete.
   */
  limit?: number
}

/**
 * ComplaintStatusTimeline without action
 */
export type ComplaintStatusTimelineDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
}
