
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Leave` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Leave
 * 
 */
export type LeaveModel = runtime.Types.Result.DefaultSelection<Prisma.$LeavePayload>

export type AggregateLeave = {
  _count: LeaveCountAggregateOutputType | null
  _avg: LeaveAvgAggregateOutputType | null
  _sum: LeaveSumAggregateOutputType | null
  _min: LeaveMinAggregateOutputType | null
  _max: LeaveMaxAggregateOutputType | null
}

export type LeaveAvgAggregateOutputType = {
  totalDays: number | null
}

export type LeaveSumAggregateOutputType = {
  totalDays: number | null
}

export type LeaveMinAggregateOutputType = {
  id: string | null
  startDate: Date | null
  endDate: Date | null
  totalDays: number | null
  reason: string | null
  type: string | null
  emergencyContact: string | null
  currentStatus: $Enums.LeaveStatus | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedNote: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  organizationId: string | null
  academicYearId: string | null
}

export type LeaveMaxAggregateOutputType = {
  id: string | null
  startDate: Date | null
  endDate: Date | null
  totalDays: number | null
  reason: string | null
  type: string | null
  emergencyContact: string | null
  currentStatus: $Enums.LeaveStatus | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedNote: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  organizationId: string | null
  academicYearId: string | null
}

export type LeaveCountAggregateOutputType = {
  id: number
  startDate: number
  endDate: number
  totalDays: number
  reason: number
  type: number
  emergencyContact: number
  currentStatus: number
  approvedBy: number
  approvedAt: number
  rejectedNote: number
  userId: number
  createdAt: number
  updatedAt: number
  organizationId: number
  academicYearId: number
  _all: number
}


export type LeaveAvgAggregateInputType = {
  totalDays?: true
}

export type LeaveSumAggregateInputType = {
  totalDays?: true
}

export type LeaveMinAggregateInputType = {
  id?: true
  startDate?: true
  endDate?: true
  totalDays?: true
  reason?: true
  type?: true
  emergencyContact?: true
  currentStatus?: true
  approvedBy?: true
  approvedAt?: true
  rejectedNote?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  organizationId?: true
  academicYearId?: true
}

export type LeaveMaxAggregateInputType = {
  id?: true
  startDate?: true
  endDate?: true
  totalDays?: true
  reason?: true
  type?: true
  emergencyContact?: true
  currentStatus?: true
  approvedBy?: true
  approvedAt?: true
  rejectedNote?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  organizationId?: true
  academicYearId?: true
}

export type LeaveCountAggregateInputType = {
  id?: true
  startDate?: true
  endDate?: true
  totalDays?: true
  reason?: true
  type?: true
  emergencyContact?: true
  currentStatus?: true
  approvedBy?: true
  approvedAt?: true
  rejectedNote?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  organizationId?: true
  academicYearId?: true
  _all?: true
}

export type LeaveAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Leave to aggregate.
   */
  where?: Prisma.LeaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Leaves to fetch.
   */
  orderBy?: Prisma.LeaveOrderByWithRelationInput | Prisma.LeaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LeaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Leaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Leaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Leaves
  **/
  _count?: true | LeaveCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LeaveAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LeaveSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeaveMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeaveMaxAggregateInputType
}

export type GetLeaveAggregateType<T extends LeaveAggregateArgs> = {
      [P in keyof T & keyof AggregateLeave]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeave[P]>
    : Prisma.GetScalarType<T[P], AggregateLeave[P]>
}




export type LeaveGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LeaveWhereInput
  orderBy?: Prisma.LeaveOrderByWithAggregationInput | Prisma.LeaveOrderByWithAggregationInput[]
  by: Prisma.LeaveScalarFieldEnum[] | Prisma.LeaveScalarFieldEnum
  having?: Prisma.LeaveScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeaveCountAggregateInputType | true
  _avg?: LeaveAvgAggregateInputType
  _sum?: LeaveSumAggregateInputType
  _min?: LeaveMinAggregateInputType
  _max?: LeaveMaxAggregateInputType
}

export type LeaveGroupByOutputType = {
  id: string
  startDate: Date
  endDate: Date
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus: $Enums.LeaveStatus
  approvedBy: string | null
  approvedAt: Date | null
  rejectedNote: string | null
  userId: string
  createdAt: Date
  updatedAt: Date
  organizationId: string
  academicYearId: string
  _count: LeaveCountAggregateOutputType | null
  _avg: LeaveAvgAggregateOutputType | null
  _sum: LeaveSumAggregateOutputType | null
  _min: LeaveMinAggregateOutputType | null
  _max: LeaveMaxAggregateOutputType | null
}

type GetLeaveGroupByPayload<T extends LeaveGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeaveGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeaveGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeaveGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeaveGroupByOutputType[P]>
      }
    >
  >



export type LeaveWhereInput = {
  AND?: Prisma.LeaveWhereInput | Prisma.LeaveWhereInput[]
  OR?: Prisma.LeaveWhereInput[]
  NOT?: Prisma.LeaveWhereInput | Prisma.LeaveWhereInput[]
  id?: Prisma.StringFilter<"Leave"> | string
  startDate?: Prisma.DateTimeFilter<"Leave"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Leave"> | Date | string
  totalDays?: Prisma.IntFilter<"Leave"> | number
  reason?: Prisma.StringFilter<"Leave"> | string
  type?: Prisma.StringFilter<"Leave"> | string
  emergencyContact?: Prisma.StringFilter<"Leave"> | string
  currentStatus?: Prisma.EnumLeaveStatusFilter<"Leave"> | $Enums.LeaveStatus
  approvedBy?: Prisma.StringNullableFilter<"Leave"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Leave"> | Date | string | null
  rejectedNote?: Prisma.StringNullableFilter<"Leave"> | string | null
  userId?: Prisma.StringFilter<"Leave"> | string
  createdAt?: Prisma.DateTimeFilter<"Leave"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Leave"> | Date | string
  organizationId?: Prisma.StringFilter<"Leave"> | string
  academicYearId?: Prisma.StringFilter<"Leave"> | string
  appliedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  statusTimeline?: Prisma.LeaveStatusTimelineListRelationFilter
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
}

export type LeaveOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  totalDays?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  type?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectedNote?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  appliedBy?: Prisma.UserOrderByWithRelationInput
  statusTimeline?: Prisma.LeaveStatusTimelineOrderByRelationAggregateInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  _relevance?: Prisma.LeaveOrderByRelevanceInput
}

export type LeaveWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LeaveWhereInput | Prisma.LeaveWhereInput[]
  OR?: Prisma.LeaveWhereInput[]
  NOT?: Prisma.LeaveWhereInput | Prisma.LeaveWhereInput[]
  startDate?: Prisma.DateTimeFilter<"Leave"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Leave"> | Date | string
  totalDays?: Prisma.IntFilter<"Leave"> | number
  reason?: Prisma.StringFilter<"Leave"> | string
  type?: Prisma.StringFilter<"Leave"> | string
  emergencyContact?: Prisma.StringFilter<"Leave"> | string
  currentStatus?: Prisma.EnumLeaveStatusFilter<"Leave"> | $Enums.LeaveStatus
  approvedBy?: Prisma.StringNullableFilter<"Leave"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Leave"> | Date | string | null
  rejectedNote?: Prisma.StringNullableFilter<"Leave"> | string | null
  userId?: Prisma.StringFilter<"Leave"> | string
  createdAt?: Prisma.DateTimeFilter<"Leave"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Leave"> | Date | string
  organizationId?: Prisma.StringFilter<"Leave"> | string
  academicYearId?: Prisma.StringFilter<"Leave"> | string
  appliedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  statusTimeline?: Prisma.LeaveStatusTimelineListRelationFilter
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
}, "id">

export type LeaveOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  totalDays?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  type?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectedNote?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  _count?: Prisma.LeaveCountOrderByAggregateInput
  _avg?: Prisma.LeaveAvgOrderByAggregateInput
  _max?: Prisma.LeaveMaxOrderByAggregateInput
  _min?: Prisma.LeaveMinOrderByAggregateInput
  _sum?: Prisma.LeaveSumOrderByAggregateInput
}

export type LeaveScalarWhereWithAggregatesInput = {
  AND?: Prisma.LeaveScalarWhereWithAggregatesInput | Prisma.LeaveScalarWhereWithAggregatesInput[]
  OR?: Prisma.LeaveScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LeaveScalarWhereWithAggregatesInput | Prisma.LeaveScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Leave"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Leave"> | Date | string
  endDate?: Prisma.DateTimeWithAggregatesFilter<"Leave"> | Date | string
  totalDays?: Prisma.IntWithAggregatesFilter<"Leave"> | number
  reason?: Prisma.StringWithAggregatesFilter<"Leave"> | string
  type?: Prisma.StringWithAggregatesFilter<"Leave"> | string
  emergencyContact?: Prisma.StringWithAggregatesFilter<"Leave"> | string
  currentStatus?: Prisma.EnumLeaveStatusWithAggregatesFilter<"Leave"> | $Enums.LeaveStatus
  approvedBy?: Prisma.StringNullableWithAggregatesFilter<"Leave"> | string | null
  approvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Leave"> | Date | string | null
  rejectedNote?: Prisma.StringNullableWithAggregatesFilter<"Leave"> | string | null
  userId?: Prisma.StringWithAggregatesFilter<"Leave"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Leave"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Leave"> | Date | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Leave"> | string
  academicYearId?: Prisma.StringWithAggregatesFilter<"Leave"> | string
}

export type LeaveCreateInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  appliedBy: Prisma.UserCreateNestedOneWithoutLeaveInput
  statusTimeline?: Prisma.LeaveStatusTimelineCreateNestedManyWithoutLeaveInput
  organization: Prisma.OrganizationCreateNestedOneWithoutLeavesInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutLeavesInput
}

export type LeaveUncheckedCreateInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  academicYearId: string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedCreateNestedManyWithoutLeaveInput
}

export type LeaveUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appliedBy?: Prisma.UserUpdateOneRequiredWithoutLeaveNestedInput
  statusTimeline?: Prisma.LeaveStatusTimelineUpdateManyWithoutLeaveNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutLeavesNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutLeavesNestedInput
}

export type LeaveUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedUpdateManyWithoutLeaveNestedInput
}

export type LeaveCreateManyInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  academicYearId: string
}

export type LeaveUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaveUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LeaveListRelationFilter = {
  every?: Prisma.LeaveWhereInput
  some?: Prisma.LeaveWhereInput
  none?: Prisma.LeaveWhereInput
}

export type LeaveOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LeaveOrderByRelevanceInput = {
  fields: Prisma.LeaveOrderByRelevanceFieldEnum | Prisma.LeaveOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type LeaveCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  totalDays?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  type?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedNote?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type LeaveAvgOrderByAggregateInput = {
  totalDays?: Prisma.SortOrder
}

export type LeaveMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  totalDays?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  type?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedNote?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type LeaveMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  totalDays?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  type?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedNote?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type LeaveSumOrderByAggregateInput = {
  totalDays?: Prisma.SortOrder
}

export type LeaveScalarRelationFilter = {
  is?: Prisma.LeaveWhereInput
  isNot?: Prisma.LeaveWhereInput
}

export type LeaveCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAcademicYearInput, Prisma.LeaveUncheckedCreateWithoutAcademicYearInput> | Prisma.LeaveCreateWithoutAcademicYearInput[] | Prisma.LeaveUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAcademicYearInput | Prisma.LeaveCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.LeaveCreateManyAcademicYearInputEnvelope
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
}

export type LeaveUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAcademicYearInput, Prisma.LeaveUncheckedCreateWithoutAcademicYearInput> | Prisma.LeaveCreateWithoutAcademicYearInput[] | Prisma.LeaveUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAcademicYearInput | Prisma.LeaveCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.LeaveCreateManyAcademicYearInputEnvelope
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
}

export type LeaveUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAcademicYearInput, Prisma.LeaveUncheckedCreateWithoutAcademicYearInput> | Prisma.LeaveCreateWithoutAcademicYearInput[] | Prisma.LeaveUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAcademicYearInput | Prisma.LeaveCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.LeaveUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.LeaveUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.LeaveCreateManyAcademicYearInputEnvelope
  set?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  disconnect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  delete?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  update?: Prisma.LeaveUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.LeaveUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.LeaveUpdateManyWithWhereWithoutAcademicYearInput | Prisma.LeaveUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
}

export type LeaveUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAcademicYearInput, Prisma.LeaveUncheckedCreateWithoutAcademicYearInput> | Prisma.LeaveCreateWithoutAcademicYearInput[] | Prisma.LeaveUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAcademicYearInput | Prisma.LeaveCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.LeaveUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.LeaveUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.LeaveCreateManyAcademicYearInputEnvelope
  set?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  disconnect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  delete?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  update?: Prisma.LeaveUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.LeaveUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.LeaveUpdateManyWithWhereWithoutAcademicYearInput | Prisma.LeaveUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
}

export type LeaveCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutOrganizationInput, Prisma.LeaveUncheckedCreateWithoutOrganizationInput> | Prisma.LeaveCreateWithoutOrganizationInput[] | Prisma.LeaveUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutOrganizationInput | Prisma.LeaveCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.LeaveCreateManyOrganizationInputEnvelope
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
}

export type LeaveUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutOrganizationInput, Prisma.LeaveUncheckedCreateWithoutOrganizationInput> | Prisma.LeaveCreateWithoutOrganizationInput[] | Prisma.LeaveUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutOrganizationInput | Prisma.LeaveCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.LeaveCreateManyOrganizationInputEnvelope
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
}

export type LeaveUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutOrganizationInput, Prisma.LeaveUncheckedCreateWithoutOrganizationInput> | Prisma.LeaveCreateWithoutOrganizationInput[] | Prisma.LeaveUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutOrganizationInput | Prisma.LeaveCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.LeaveUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.LeaveUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.LeaveCreateManyOrganizationInputEnvelope
  set?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  disconnect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  delete?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  update?: Prisma.LeaveUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.LeaveUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.LeaveUpdateManyWithWhereWithoutOrganizationInput | Prisma.LeaveUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
}

export type LeaveUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutOrganizationInput, Prisma.LeaveUncheckedCreateWithoutOrganizationInput> | Prisma.LeaveCreateWithoutOrganizationInput[] | Prisma.LeaveUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutOrganizationInput | Prisma.LeaveCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.LeaveUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.LeaveUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.LeaveCreateManyOrganizationInputEnvelope
  set?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  disconnect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  delete?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  update?: Prisma.LeaveUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.LeaveUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.LeaveUpdateManyWithWhereWithoutOrganizationInput | Prisma.LeaveUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
}

export type LeaveCreateNestedManyWithoutAppliedByInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAppliedByInput, Prisma.LeaveUncheckedCreateWithoutAppliedByInput> | Prisma.LeaveCreateWithoutAppliedByInput[] | Prisma.LeaveUncheckedCreateWithoutAppliedByInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAppliedByInput | Prisma.LeaveCreateOrConnectWithoutAppliedByInput[]
  createMany?: Prisma.LeaveCreateManyAppliedByInputEnvelope
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
}

export type LeaveUncheckedCreateNestedManyWithoutAppliedByInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAppliedByInput, Prisma.LeaveUncheckedCreateWithoutAppliedByInput> | Prisma.LeaveCreateWithoutAppliedByInput[] | Prisma.LeaveUncheckedCreateWithoutAppliedByInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAppliedByInput | Prisma.LeaveCreateOrConnectWithoutAppliedByInput[]
  createMany?: Prisma.LeaveCreateManyAppliedByInputEnvelope
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
}

export type LeaveUpdateManyWithoutAppliedByNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAppliedByInput, Prisma.LeaveUncheckedCreateWithoutAppliedByInput> | Prisma.LeaveCreateWithoutAppliedByInput[] | Prisma.LeaveUncheckedCreateWithoutAppliedByInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAppliedByInput | Prisma.LeaveCreateOrConnectWithoutAppliedByInput[]
  upsert?: Prisma.LeaveUpsertWithWhereUniqueWithoutAppliedByInput | Prisma.LeaveUpsertWithWhereUniqueWithoutAppliedByInput[]
  createMany?: Prisma.LeaveCreateManyAppliedByInputEnvelope
  set?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  disconnect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  delete?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  update?: Prisma.LeaveUpdateWithWhereUniqueWithoutAppliedByInput | Prisma.LeaveUpdateWithWhereUniqueWithoutAppliedByInput[]
  updateMany?: Prisma.LeaveUpdateManyWithWhereWithoutAppliedByInput | Prisma.LeaveUpdateManyWithWhereWithoutAppliedByInput[]
  deleteMany?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
}

export type LeaveUncheckedUpdateManyWithoutAppliedByNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutAppliedByInput, Prisma.LeaveUncheckedCreateWithoutAppliedByInput> | Prisma.LeaveCreateWithoutAppliedByInput[] | Prisma.LeaveUncheckedCreateWithoutAppliedByInput[]
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutAppliedByInput | Prisma.LeaveCreateOrConnectWithoutAppliedByInput[]
  upsert?: Prisma.LeaveUpsertWithWhereUniqueWithoutAppliedByInput | Prisma.LeaveUpsertWithWhereUniqueWithoutAppliedByInput[]
  createMany?: Prisma.LeaveCreateManyAppliedByInputEnvelope
  set?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  disconnect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  delete?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  connect?: Prisma.LeaveWhereUniqueInput | Prisma.LeaveWhereUniqueInput[]
  update?: Prisma.LeaveUpdateWithWhereUniqueWithoutAppliedByInput | Prisma.LeaveUpdateWithWhereUniqueWithoutAppliedByInput[]
  updateMany?: Prisma.LeaveUpdateManyWithWhereWithoutAppliedByInput | Prisma.LeaveUpdateManyWithWhereWithoutAppliedByInput[]
  deleteMany?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
}

export type EnumLeaveStatusFieldUpdateOperationsInput = {
  set?: $Enums.LeaveStatus
}

export type LeaveCreateNestedOneWithoutStatusTimelineInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutStatusTimelineInput, Prisma.LeaveUncheckedCreateWithoutStatusTimelineInput>
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutStatusTimelineInput
  connect?: Prisma.LeaveWhereUniqueInput
}

export type LeaveUpdateOneRequiredWithoutStatusTimelineNestedInput = {
  create?: Prisma.XOR<Prisma.LeaveCreateWithoutStatusTimelineInput, Prisma.LeaveUncheckedCreateWithoutStatusTimelineInput>
  connectOrCreate?: Prisma.LeaveCreateOrConnectWithoutStatusTimelineInput
  upsert?: Prisma.LeaveUpsertWithoutStatusTimelineInput
  connect?: Prisma.LeaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LeaveUpdateToOneWithWhereWithoutStatusTimelineInput, Prisma.LeaveUpdateWithoutStatusTimelineInput>, Prisma.LeaveUncheckedUpdateWithoutStatusTimelineInput>
}

export type LeaveCreateWithoutAcademicYearInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  appliedBy: Prisma.UserCreateNestedOneWithoutLeaveInput
  statusTimeline?: Prisma.LeaveStatusTimelineCreateNestedManyWithoutLeaveInput
  organization: Prisma.OrganizationCreateNestedOneWithoutLeavesInput
}

export type LeaveUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedCreateNestedManyWithoutLeaveInput
}

export type LeaveCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.LeaveWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaveCreateWithoutAcademicYearInput, Prisma.LeaveUncheckedCreateWithoutAcademicYearInput>
}

export type LeaveCreateManyAcademicYearInputEnvelope = {
  data: Prisma.LeaveCreateManyAcademicYearInput | Prisma.LeaveCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type LeaveUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.LeaveWhereUniqueInput
  update: Prisma.XOR<Prisma.LeaveUpdateWithoutAcademicYearInput, Prisma.LeaveUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.LeaveCreateWithoutAcademicYearInput, Prisma.LeaveUncheckedCreateWithoutAcademicYearInput>
}

export type LeaveUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.LeaveWhereUniqueInput
  data: Prisma.XOR<Prisma.LeaveUpdateWithoutAcademicYearInput, Prisma.LeaveUncheckedUpdateWithoutAcademicYearInput>
}

export type LeaveUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.LeaveScalarWhereInput
  data: Prisma.XOR<Prisma.LeaveUpdateManyMutationInput, Prisma.LeaveUncheckedUpdateManyWithoutAcademicYearInput>
}

export type LeaveScalarWhereInput = {
  AND?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
  OR?: Prisma.LeaveScalarWhereInput[]
  NOT?: Prisma.LeaveScalarWhereInput | Prisma.LeaveScalarWhereInput[]
  id?: Prisma.StringFilter<"Leave"> | string
  startDate?: Prisma.DateTimeFilter<"Leave"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Leave"> | Date | string
  totalDays?: Prisma.IntFilter<"Leave"> | number
  reason?: Prisma.StringFilter<"Leave"> | string
  type?: Prisma.StringFilter<"Leave"> | string
  emergencyContact?: Prisma.StringFilter<"Leave"> | string
  currentStatus?: Prisma.EnumLeaveStatusFilter<"Leave"> | $Enums.LeaveStatus
  approvedBy?: Prisma.StringNullableFilter<"Leave"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Leave"> | Date | string | null
  rejectedNote?: Prisma.StringNullableFilter<"Leave"> | string | null
  userId?: Prisma.StringFilter<"Leave"> | string
  createdAt?: Prisma.DateTimeFilter<"Leave"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Leave"> | Date | string
  organizationId?: Prisma.StringFilter<"Leave"> | string
  academicYearId?: Prisma.StringFilter<"Leave"> | string
}

export type LeaveCreateWithoutOrganizationInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  appliedBy: Prisma.UserCreateNestedOneWithoutLeaveInput
  statusTimeline?: Prisma.LeaveStatusTimelineCreateNestedManyWithoutLeaveInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutLeavesInput
}

export type LeaveUncheckedCreateWithoutOrganizationInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedCreateNestedManyWithoutLeaveInput
}

export type LeaveCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.LeaveWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaveCreateWithoutOrganizationInput, Prisma.LeaveUncheckedCreateWithoutOrganizationInput>
}

export type LeaveCreateManyOrganizationInputEnvelope = {
  data: Prisma.LeaveCreateManyOrganizationInput | Prisma.LeaveCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type LeaveUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.LeaveWhereUniqueInput
  update: Prisma.XOR<Prisma.LeaveUpdateWithoutOrganizationInput, Prisma.LeaveUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.LeaveCreateWithoutOrganizationInput, Prisma.LeaveUncheckedCreateWithoutOrganizationInput>
}

export type LeaveUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.LeaveWhereUniqueInput
  data: Prisma.XOR<Prisma.LeaveUpdateWithoutOrganizationInput, Prisma.LeaveUncheckedUpdateWithoutOrganizationInput>
}

export type LeaveUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.LeaveScalarWhereInput
  data: Prisma.XOR<Prisma.LeaveUpdateManyMutationInput, Prisma.LeaveUncheckedUpdateManyWithoutOrganizationInput>
}

export type LeaveCreateWithoutAppliedByInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  statusTimeline?: Prisma.LeaveStatusTimelineCreateNestedManyWithoutLeaveInput
  organization: Prisma.OrganizationCreateNestedOneWithoutLeavesInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutLeavesInput
}

export type LeaveUncheckedCreateWithoutAppliedByInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  academicYearId: string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedCreateNestedManyWithoutLeaveInput
}

export type LeaveCreateOrConnectWithoutAppliedByInput = {
  where: Prisma.LeaveWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaveCreateWithoutAppliedByInput, Prisma.LeaveUncheckedCreateWithoutAppliedByInput>
}

export type LeaveCreateManyAppliedByInputEnvelope = {
  data: Prisma.LeaveCreateManyAppliedByInput | Prisma.LeaveCreateManyAppliedByInput[]
  skipDuplicates?: boolean
}

export type LeaveUpsertWithWhereUniqueWithoutAppliedByInput = {
  where: Prisma.LeaveWhereUniqueInput
  update: Prisma.XOR<Prisma.LeaveUpdateWithoutAppliedByInput, Prisma.LeaveUncheckedUpdateWithoutAppliedByInput>
  create: Prisma.XOR<Prisma.LeaveCreateWithoutAppliedByInput, Prisma.LeaveUncheckedCreateWithoutAppliedByInput>
}

export type LeaveUpdateWithWhereUniqueWithoutAppliedByInput = {
  where: Prisma.LeaveWhereUniqueInput
  data: Prisma.XOR<Prisma.LeaveUpdateWithoutAppliedByInput, Prisma.LeaveUncheckedUpdateWithoutAppliedByInput>
}

export type LeaveUpdateManyWithWhereWithoutAppliedByInput = {
  where: Prisma.LeaveScalarWhereInput
  data: Prisma.XOR<Prisma.LeaveUpdateManyMutationInput, Prisma.LeaveUncheckedUpdateManyWithoutAppliedByInput>
}

export type LeaveCreateWithoutStatusTimelineInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  appliedBy: Prisma.UserCreateNestedOneWithoutLeaveInput
  organization: Prisma.OrganizationCreateNestedOneWithoutLeavesInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutLeavesInput
}

export type LeaveUncheckedCreateWithoutStatusTimelineInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  academicYearId: string
}

export type LeaveCreateOrConnectWithoutStatusTimelineInput = {
  where: Prisma.LeaveWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaveCreateWithoutStatusTimelineInput, Prisma.LeaveUncheckedCreateWithoutStatusTimelineInput>
}

export type LeaveUpsertWithoutStatusTimelineInput = {
  update: Prisma.XOR<Prisma.LeaveUpdateWithoutStatusTimelineInput, Prisma.LeaveUncheckedUpdateWithoutStatusTimelineInput>
  create: Prisma.XOR<Prisma.LeaveCreateWithoutStatusTimelineInput, Prisma.LeaveUncheckedCreateWithoutStatusTimelineInput>
  where?: Prisma.LeaveWhereInput
}

export type LeaveUpdateToOneWithWhereWithoutStatusTimelineInput = {
  where?: Prisma.LeaveWhereInput
  data: Prisma.XOR<Prisma.LeaveUpdateWithoutStatusTimelineInput, Prisma.LeaveUncheckedUpdateWithoutStatusTimelineInput>
}

export type LeaveUpdateWithoutStatusTimelineInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appliedBy?: Prisma.UserUpdateOneRequiredWithoutLeaveNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutLeavesNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutLeavesNestedInput
}

export type LeaveUncheckedUpdateWithoutStatusTimelineInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LeaveCreateManyAcademicYearInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
}

export type LeaveUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appliedBy?: Prisma.UserUpdateOneRequiredWithoutLeaveNestedInput
  statusTimeline?: Prisma.LeaveStatusTimelineUpdateManyWithoutLeaveNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutLeavesNestedInput
}

export type LeaveUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedUpdateManyWithoutLeaveNestedInput
}

export type LeaveUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LeaveCreateManyOrganizationInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId: string
}

export type LeaveUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appliedBy?: Prisma.UserUpdateOneRequiredWithoutLeaveNestedInput
  statusTimeline?: Prisma.LeaveStatusTimelineUpdateManyWithoutLeaveNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutLeavesNestedInput
}

export type LeaveUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedUpdateManyWithoutLeaveNestedInput
}

export type LeaveUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LeaveCreateManyAppliedByInput = {
  id?: string
  startDate: Date | string
  endDate: Date | string
  totalDays: number
  reason: string
  type: string
  emergencyContact: string
  currentStatus?: $Enums.LeaveStatus
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  academicYearId: string
}

export type LeaveUpdateWithoutAppliedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  statusTimeline?: Prisma.LeaveStatusTimelineUpdateManyWithoutLeaveNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutLeavesNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutLeavesNestedInput
}

export type LeaveUncheckedUpdateWithoutAppliedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  statusTimeline?: Prisma.LeaveStatusTimelineUncheckedUpdateManyWithoutLeaveNestedInput
}

export type LeaveUncheckedUpdateManyWithoutAppliedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalDays?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  currentStatus?: Prisma.EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type LeaveCountOutputType
 */

export type LeaveCountOutputType = {
  statusTimeline: number
}

export type LeaveCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  statusTimeline?: boolean | LeaveCountOutputTypeCountStatusTimelineArgs
}

/**
 * LeaveCountOutputType without action
 */
export type LeaveCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaveCountOutputType
   */
  select?: Prisma.LeaveCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LeaveCountOutputType without action
 */
export type LeaveCountOutputTypeCountStatusTimelineArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LeaveStatusTimelineWhereInput
}


export type LeaveSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  startDate?: boolean
  endDate?: boolean
  totalDays?: boolean
  reason?: boolean
  type?: boolean
  emergencyContact?: boolean
  currentStatus?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedNote?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  appliedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  statusTimeline?: boolean | Prisma.Leave$statusTimelineArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.LeaveCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leave"]>

export type LeaveSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  startDate?: boolean
  endDate?: boolean
  totalDays?: boolean
  reason?: boolean
  type?: boolean
  emergencyContact?: boolean
  currentStatus?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedNote?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  appliedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leave"]>

export type LeaveSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  startDate?: boolean
  endDate?: boolean
  totalDays?: boolean
  reason?: boolean
  type?: boolean
  emergencyContact?: boolean
  currentStatus?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedNote?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  appliedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leave"]>

export type LeaveSelectScalar = {
  id?: boolean
  startDate?: boolean
  endDate?: boolean
  totalDays?: boolean
  reason?: boolean
  type?: boolean
  emergencyContact?: boolean
  currentStatus?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedNote?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organizationId?: boolean
  academicYearId?: boolean
}

export type LeaveOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "startDate" | "endDate" | "totalDays" | "reason" | "type" | "emergencyContact" | "currentStatus" | "approvedBy" | "approvedAt" | "rejectedNote" | "userId" | "createdAt" | "updatedAt" | "organizationId" | "academicYearId", ExtArgs["result"]["leave"]>
export type LeaveInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  appliedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  statusTimeline?: boolean | Prisma.Leave$statusTimelineArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.LeaveCountOutputTypeDefaultArgs<ExtArgs>
}
export type LeaveIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  appliedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}
export type LeaveIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  appliedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}

export type $LeavePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Leave"
  objects: {
    appliedBy: Prisma.$UserPayload<ExtArgs>
    statusTimeline: Prisma.$LeaveStatusTimelinePayload<ExtArgs>[]
    organization: Prisma.$OrganizationPayload<ExtArgs>
    academicYear: Prisma.$AcademicYearPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    startDate: Date
    endDate: Date
    totalDays: number
    reason: string
    type: string
    emergencyContact: string
    currentStatus: $Enums.LeaveStatus
    approvedBy: string | null
    approvedAt: Date | null
    rejectedNote: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
    organizationId: string
    academicYearId: string
  }, ExtArgs["result"]["leave"]>
  composites: {}
}

export type LeaveGetPayload<S extends boolean | null | undefined | LeaveDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LeavePayload, S>

export type LeaveCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LeaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeaveCountAggregateInputType | true
  }

export interface LeaveDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Leave'], meta: { name: 'Leave' } }
  /**
   * Find zero or one Leave that matches the filter.
   * @param {LeaveFindUniqueArgs} args - Arguments to find a Leave
   * @example
   * // Get one Leave
   * const leave = await prisma.leave.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LeaveFindUniqueArgs>(args: Prisma.SelectSubset<T, LeaveFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Leave that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LeaveFindUniqueOrThrowArgs} args - Arguments to find a Leave
   * @example
   * // Get one Leave
   * const leave = await prisma.leave.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LeaveFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LeaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leave that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveFindFirstArgs} args - Arguments to find a Leave
   * @example
   * // Get one Leave
   * const leave = await prisma.leave.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LeaveFindFirstArgs>(args?: Prisma.SelectSubset<T, LeaveFindFirstArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leave that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveFindFirstOrThrowArgs} args - Arguments to find a Leave
   * @example
   * // Get one Leave
   * const leave = await prisma.leave.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LeaveFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LeaveFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Leaves that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Leaves
   * const leaves = await prisma.leave.findMany()
   * 
   * // Get first 10 Leaves
   * const leaves = await prisma.leave.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const leaveWithIdOnly = await prisma.leave.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LeaveFindManyArgs>(args?: Prisma.SelectSubset<T, LeaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Leave.
   * @param {LeaveCreateArgs} args - Arguments to create a Leave.
   * @example
   * // Create one Leave
   * const Leave = await prisma.leave.create({
   *   data: {
   *     // ... data to create a Leave
   *   }
   * })
   * 
   */
  create<T extends LeaveCreateArgs>(args: Prisma.SelectSubset<T, LeaveCreateArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Leaves.
   * @param {LeaveCreateManyArgs} args - Arguments to create many Leaves.
   * @example
   * // Create many Leaves
   * const leave = await prisma.leave.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LeaveCreateManyArgs>(args?: Prisma.SelectSubset<T, LeaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Leaves and returns the data saved in the database.
   * @param {LeaveCreateManyAndReturnArgs} args - Arguments to create many Leaves.
   * @example
   * // Create many Leaves
   * const leave = await prisma.leave.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Leaves and only return the `id`
   * const leaveWithIdOnly = await prisma.leave.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LeaveCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LeaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Leave.
   * @param {LeaveDeleteArgs} args - Arguments to delete one Leave.
   * @example
   * // Delete one Leave
   * const Leave = await prisma.leave.delete({
   *   where: {
   *     // ... filter to delete one Leave
   *   }
   * })
   * 
   */
  delete<T extends LeaveDeleteArgs>(args: Prisma.SelectSubset<T, LeaveDeleteArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Leave.
   * @param {LeaveUpdateArgs} args - Arguments to update one Leave.
   * @example
   * // Update one Leave
   * const leave = await prisma.leave.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LeaveUpdateArgs>(args: Prisma.SelectSubset<T, LeaveUpdateArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Leaves.
   * @param {LeaveDeleteManyArgs} args - Arguments to filter Leaves to delete.
   * @example
   * // Delete a few Leaves
   * const { count } = await prisma.leave.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LeaveDeleteManyArgs>(args?: Prisma.SelectSubset<T, LeaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaves.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Leaves
   * const leave = await prisma.leave.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LeaveUpdateManyArgs>(args: Prisma.SelectSubset<T, LeaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaves and returns the data updated in the database.
   * @param {LeaveUpdateManyAndReturnArgs} args - Arguments to update many Leaves.
   * @example
   * // Update many Leaves
   * const leave = await prisma.leave.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Leaves and only return the `id`
   * const leaveWithIdOnly = await prisma.leave.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LeaveUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LeaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Leave.
   * @param {LeaveUpsertArgs} args - Arguments to update or create a Leave.
   * @example
   * // Update or create a Leave
   * const leave = await prisma.leave.upsert({
   *   create: {
   *     // ... data to create a Leave
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Leave we want to update
   *   }
   * })
   */
  upsert<T extends LeaveUpsertArgs>(args: Prisma.SelectSubset<T, LeaveUpsertArgs<ExtArgs>>): Prisma.Prisma__LeaveClient<runtime.Types.Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Leaves.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveCountArgs} args - Arguments to filter Leaves to count.
   * @example
   * // Count the number of Leaves
   * const count = await prisma.leave.count({
   *   where: {
   *     // ... the filter for the Leaves we want to count
   *   }
   * })
  **/
  count<T extends LeaveCountArgs>(
    args?: Prisma.Subset<T, LeaveCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeaveCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Leave.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeaveAggregateArgs>(args: Prisma.Subset<T, LeaveAggregateArgs>): Prisma.PrismaPromise<GetLeaveAggregateType<T>>

  /**
   * Group by Leave.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaveGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LeaveGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LeaveGroupByArgs['orderBy'] }
      : { orderBy?: LeaveGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LeaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Leave model
 */
readonly fields: LeaveFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Leave.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LeaveClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  appliedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  statusTimeline<T extends Prisma.Leave$statusTimelineArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Leave$statusTimelineArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaveStatusTimelinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  academicYear<T extends Prisma.AcademicYearDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYearDefaultArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Leave model
 */
export interface LeaveFieldRefs {
  readonly id: Prisma.FieldRef<"Leave", 'String'>
  readonly startDate: Prisma.FieldRef<"Leave", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Leave", 'DateTime'>
  readonly totalDays: Prisma.FieldRef<"Leave", 'Int'>
  readonly reason: Prisma.FieldRef<"Leave", 'String'>
  readonly type: Prisma.FieldRef<"Leave", 'String'>
  readonly emergencyContact: Prisma.FieldRef<"Leave", 'String'>
  readonly currentStatus: Prisma.FieldRef<"Leave", 'LeaveStatus'>
  readonly approvedBy: Prisma.FieldRef<"Leave", 'String'>
  readonly approvedAt: Prisma.FieldRef<"Leave", 'DateTime'>
  readonly rejectedNote: Prisma.FieldRef<"Leave", 'String'>
  readonly userId: Prisma.FieldRef<"Leave", 'String'>
  readonly createdAt: Prisma.FieldRef<"Leave", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Leave", 'DateTime'>
  readonly organizationId: Prisma.FieldRef<"Leave", 'String'>
  readonly academicYearId: Prisma.FieldRef<"Leave", 'String'>
}
    

// Custom InputTypes
/**
 * Leave findUnique
 */
export type LeaveFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * Filter, which Leave to fetch.
   */
  where: Prisma.LeaveWhereUniqueInput
}

/**
 * Leave findUniqueOrThrow
 */
export type LeaveFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * Filter, which Leave to fetch.
   */
  where: Prisma.LeaveWhereUniqueInput
}

/**
 * Leave findFirst
 */
export type LeaveFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * Filter, which Leave to fetch.
   */
  where?: Prisma.LeaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Leaves to fetch.
   */
  orderBy?: Prisma.LeaveOrderByWithRelationInput | Prisma.LeaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Leaves.
   */
  cursor?: Prisma.LeaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Leaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Leaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Leaves.
   */
  distinct?: Prisma.LeaveScalarFieldEnum | Prisma.LeaveScalarFieldEnum[]
}

/**
 * Leave findFirstOrThrow
 */
export type LeaveFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * Filter, which Leave to fetch.
   */
  where?: Prisma.LeaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Leaves to fetch.
   */
  orderBy?: Prisma.LeaveOrderByWithRelationInput | Prisma.LeaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Leaves.
   */
  cursor?: Prisma.LeaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Leaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Leaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Leaves.
   */
  distinct?: Prisma.LeaveScalarFieldEnum | Prisma.LeaveScalarFieldEnum[]
}

/**
 * Leave findMany
 */
export type LeaveFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * Filter, which Leaves to fetch.
   */
  where?: Prisma.LeaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Leaves to fetch.
   */
  orderBy?: Prisma.LeaveOrderByWithRelationInput | Prisma.LeaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Leaves.
   */
  cursor?: Prisma.LeaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Leaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Leaves.
   */
  skip?: number
  distinct?: Prisma.LeaveScalarFieldEnum | Prisma.LeaveScalarFieldEnum[]
}

/**
 * Leave create
 */
export type LeaveCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * The data needed to create a Leave.
   */
  data: Prisma.XOR<Prisma.LeaveCreateInput, Prisma.LeaveUncheckedCreateInput>
}

/**
 * Leave createMany
 */
export type LeaveCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Leaves.
   */
  data: Prisma.LeaveCreateManyInput | Prisma.LeaveCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Leave createManyAndReturn
 */
export type LeaveCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * The data used to create many Leaves.
   */
  data: Prisma.LeaveCreateManyInput | Prisma.LeaveCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Leave update
 */
export type LeaveUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * The data needed to update a Leave.
   */
  data: Prisma.XOR<Prisma.LeaveUpdateInput, Prisma.LeaveUncheckedUpdateInput>
  /**
   * Choose, which Leave to update.
   */
  where: Prisma.LeaveWhereUniqueInput
}

/**
 * Leave updateMany
 */
export type LeaveUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Leaves.
   */
  data: Prisma.XOR<Prisma.LeaveUpdateManyMutationInput, Prisma.LeaveUncheckedUpdateManyInput>
  /**
   * Filter which Leaves to update
   */
  where?: Prisma.LeaveWhereInput
  /**
   * Limit how many Leaves to update.
   */
  limit?: number
}

/**
 * Leave updateManyAndReturn
 */
export type LeaveUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * The data used to update Leaves.
   */
  data: Prisma.XOR<Prisma.LeaveUpdateManyMutationInput, Prisma.LeaveUncheckedUpdateManyInput>
  /**
   * Filter which Leaves to update
   */
  where?: Prisma.LeaveWhereInput
  /**
   * Limit how many Leaves to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Leave upsert
 */
export type LeaveUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * The filter to search for the Leave to update in case it exists.
   */
  where: Prisma.LeaveWhereUniqueInput
  /**
   * In case the Leave found by the `where` argument doesn't exist, create a new Leave with this data.
   */
  create: Prisma.XOR<Prisma.LeaveCreateInput, Prisma.LeaveUncheckedCreateInput>
  /**
   * In case the Leave was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LeaveUpdateInput, Prisma.LeaveUncheckedUpdateInput>
}

/**
 * Leave delete
 */
export type LeaveDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
  /**
   * Filter which Leave to delete.
   */
  where: Prisma.LeaveWhereUniqueInput
}

/**
 * Leave deleteMany
 */
export type LeaveDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Leaves to delete
   */
  where?: Prisma.LeaveWhereInput
  /**
   * Limit how many Leaves to delete.
   */
  limit?: number
}

/**
 * Leave.statusTimeline
 */
export type Leave$statusTimelineArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaveStatusTimeline
   */
  select?: Prisma.LeaveStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaveStatusTimeline
   */
  omit?: Prisma.LeaveStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveStatusTimelineInclude<ExtArgs> | null
  where?: Prisma.LeaveStatusTimelineWhereInput
  orderBy?: Prisma.LeaveStatusTimelineOrderByWithRelationInput | Prisma.LeaveStatusTimelineOrderByWithRelationInput[]
  cursor?: Prisma.LeaveStatusTimelineWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LeaveStatusTimelineScalarFieldEnum | Prisma.LeaveStatusTimelineScalarFieldEnum[]
}

/**
 * Leave without action
 */
export type LeaveDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leave
   */
  select?: Prisma.LeaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leave
   */
  omit?: Prisma.LeaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaveInclude<ExtArgs> | null
}
