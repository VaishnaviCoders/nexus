
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExamSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExamSession
 * 
 */
export type ExamSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$ExamSessionPayload>

export type AggregateExamSession = {
  _count: ExamSessionCountAggregateOutputType | null
  _min: ExamSessionMinAggregateOutputType | null
  _max: ExamSessionMaxAggregateOutputType | null
}

export type ExamSessionMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  academicYearId: string | null
  startDate: Date | null
  endDate: Date | null
  createdBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExamSessionMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  academicYearId: string | null
  startDate: Date | null
  endDate: Date | null
  createdBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExamSessionCountAggregateOutputType = {
  id: number
  title: number
  description: number
  academicYearId: number
  startDate: number
  endDate: number
  createdBy: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExamSessionMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  academicYearId?: true
  startDate?: true
  endDate?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
}

export type ExamSessionMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  academicYearId?: true
  startDate?: true
  endDate?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
}

export type ExamSessionCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  academicYearId?: true
  startDate?: true
  endDate?: true
  createdBy?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExamSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExamSession to aggregate.
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamSessions to fetch.
   */
  orderBy?: Prisma.ExamSessionOrderByWithRelationInput | Prisma.ExamSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExamSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExamSessions
  **/
  _count?: true | ExamSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExamSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExamSessionMaxAggregateInputType
}

export type GetExamSessionAggregateType<T extends ExamSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateExamSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExamSession[P]>
    : Prisma.GetScalarType<T[P], AggregateExamSession[P]>
}




export type ExamSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamSessionWhereInput
  orderBy?: Prisma.ExamSessionOrderByWithAggregationInput | Prisma.ExamSessionOrderByWithAggregationInput[]
  by: Prisma.ExamSessionScalarFieldEnum[] | Prisma.ExamSessionScalarFieldEnum
  having?: Prisma.ExamSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExamSessionCountAggregateInputType | true
  _min?: ExamSessionMinAggregateInputType
  _max?: ExamSessionMaxAggregateInputType
}

export type ExamSessionGroupByOutputType = {
  id: string
  title: string
  description: string | null
  academicYearId: string
  startDate: Date
  endDate: Date
  createdBy: string
  createdAt: Date
  updatedAt: Date
  _count: ExamSessionCountAggregateOutputType | null
  _min: ExamSessionMinAggregateOutputType | null
  _max: ExamSessionMaxAggregateOutputType | null
}

type GetExamSessionGroupByPayload<T extends ExamSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExamSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExamSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExamSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExamSessionGroupByOutputType[P]>
      }
    >
  >



export type ExamSessionWhereInput = {
  AND?: Prisma.ExamSessionWhereInput | Prisma.ExamSessionWhereInput[]
  OR?: Prisma.ExamSessionWhereInput[]
  NOT?: Prisma.ExamSessionWhereInput | Prisma.ExamSessionWhereInput[]
  id?: Prisma.StringFilter<"ExamSession"> | string
  title?: Prisma.StringFilter<"ExamSession"> | string
  description?: Prisma.StringNullableFilter<"ExamSession"> | string | null
  academicYearId?: Prisma.StringFilter<"ExamSession"> | string
  startDate?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  endDate?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  createdBy?: Prisma.StringFilter<"ExamSession"> | string
  createdAt?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
  exams?: Prisma.ExamListRelationFilter
  ReportCard?: Prisma.ReportCardListRelationFilter
}

export type ExamSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  exams?: Prisma.ExamOrderByRelationAggregateInput
  ReportCard?: Prisma.ReportCardOrderByRelationAggregateInput
  _relevance?: Prisma.ExamSessionOrderByRelevanceInput
}

export type ExamSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  academicYearId_title?: Prisma.ExamSessionAcademicYearIdTitleCompoundUniqueInput
  AND?: Prisma.ExamSessionWhereInput | Prisma.ExamSessionWhereInput[]
  OR?: Prisma.ExamSessionWhereInput[]
  NOT?: Prisma.ExamSessionWhereInput | Prisma.ExamSessionWhereInput[]
  title?: Prisma.StringFilter<"ExamSession"> | string
  description?: Prisma.StringNullableFilter<"ExamSession"> | string | null
  academicYearId?: Prisma.StringFilter<"ExamSession"> | string
  startDate?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  endDate?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  createdBy?: Prisma.StringFilter<"ExamSession"> | string
  createdAt?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
  exams?: Prisma.ExamListRelationFilter
  ReportCard?: Prisma.ReportCardListRelationFilter
}, "id" | "academicYearId_title">

export type ExamSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExamSessionCountOrderByAggregateInput
  _max?: Prisma.ExamSessionMaxOrderByAggregateInput
  _min?: Prisma.ExamSessionMinOrderByAggregateInput
}

export type ExamSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExamSessionScalarWhereWithAggregatesInput | Prisma.ExamSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExamSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExamSessionScalarWhereWithAggregatesInput | Prisma.ExamSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExamSession"> | string
  title?: Prisma.StringWithAggregatesFilter<"ExamSession"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"ExamSession"> | string | null
  academicYearId?: Prisma.StringWithAggregatesFilter<"ExamSession"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"ExamSession"> | Date | string
  endDate?: Prisma.DateTimeWithAggregatesFilter<"ExamSession"> | Date | string
  createdBy?: Prisma.StringWithAggregatesFilter<"ExamSession"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ExamSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ExamSession"> | Date | string
}

export type ExamSessionCreateInput = {
  id?: string
  title: string
  description?: string | null
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutExamSessionInput
  exams?: Prisma.ExamCreateNestedManyWithoutExamSessionInput
  ReportCard?: Prisma.ReportCardCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  academicYearId: string
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutExamSessionInput
  ReportCard?: Prisma.ReportCardUncheckedCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutExamSessionNestedInput
  exams?: Prisma.ExamUpdateManyWithoutExamSessionNestedInput
  ReportCard?: Prisma.ReportCardUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutExamSessionNestedInput
  ReportCard?: Prisma.ReportCardUncheckedUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  academicYearId: string
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamSessionListRelationFilter = {
  every?: Prisma.ExamSessionWhereInput
  some?: Prisma.ExamSessionWhereInput
  none?: Prisma.ExamSessionWhereInput
}

export type ExamSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExamSessionOrderByRelevanceInput = {
  fields: Prisma.ExamSessionOrderByRelevanceFieldEnum | Prisma.ExamSessionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ExamSessionAcademicYearIdTitleCompoundUniqueInput = {
  academicYearId: string
  title: string
}

export type ExamSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExamSessionScalarRelationFilter = {
  is?: Prisma.ExamSessionWhereInput
  isNot?: Prisma.ExamSessionWhereInput
}

export type ExamSessionCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput> | Prisma.ExamSessionCreateWithoutAcademicYearInput[] | Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput | Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.ExamSessionCreateManyAcademicYearInputEnvelope
  connect?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
}

export type ExamSessionUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput> | Prisma.ExamSessionCreateWithoutAcademicYearInput[] | Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput | Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.ExamSessionCreateManyAcademicYearInputEnvelope
  connect?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
}

export type ExamSessionUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput> | Prisma.ExamSessionCreateWithoutAcademicYearInput[] | Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput | Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.ExamSessionUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.ExamSessionUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.ExamSessionCreateManyAcademicYearInputEnvelope
  set?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  disconnect?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  delete?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  connect?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  update?: Prisma.ExamSessionUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.ExamSessionUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.ExamSessionUpdateManyWithWhereWithoutAcademicYearInput | Prisma.ExamSessionUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.ExamSessionScalarWhereInput | Prisma.ExamSessionScalarWhereInput[]
}

export type ExamSessionUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput> | Prisma.ExamSessionCreateWithoutAcademicYearInput[] | Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput | Prisma.ExamSessionCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.ExamSessionUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.ExamSessionUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.ExamSessionCreateManyAcademicYearInputEnvelope
  set?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  disconnect?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  delete?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  connect?: Prisma.ExamSessionWhereUniqueInput | Prisma.ExamSessionWhereUniqueInput[]
  update?: Prisma.ExamSessionUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.ExamSessionUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.ExamSessionUpdateManyWithWhereWithoutAcademicYearInput | Prisma.ExamSessionUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.ExamSessionScalarWhereInput | Prisma.ExamSessionScalarWhereInput[]
}

export type ExamSessionCreateNestedOneWithoutExamsInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutExamsInput, Prisma.ExamSessionUncheckedCreateWithoutExamsInput>
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutExamsInput
  connect?: Prisma.ExamSessionWhereUniqueInput
}

export type ExamSessionUpdateOneRequiredWithoutExamsNestedInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutExamsInput, Prisma.ExamSessionUncheckedCreateWithoutExamsInput>
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutExamsInput
  upsert?: Prisma.ExamSessionUpsertWithoutExamsInput
  connect?: Prisma.ExamSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExamSessionUpdateToOneWithWhereWithoutExamsInput, Prisma.ExamSessionUpdateWithoutExamsInput>, Prisma.ExamSessionUncheckedUpdateWithoutExamsInput>
}

export type ExamSessionCreateNestedOneWithoutReportCardInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutReportCardInput, Prisma.ExamSessionUncheckedCreateWithoutReportCardInput>
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutReportCardInput
  connect?: Prisma.ExamSessionWhereUniqueInput
}

export type ExamSessionUpdateOneRequiredWithoutReportCardNestedInput = {
  create?: Prisma.XOR<Prisma.ExamSessionCreateWithoutReportCardInput, Prisma.ExamSessionUncheckedCreateWithoutReportCardInput>
  connectOrCreate?: Prisma.ExamSessionCreateOrConnectWithoutReportCardInput
  upsert?: Prisma.ExamSessionUpsertWithoutReportCardInput
  connect?: Prisma.ExamSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExamSessionUpdateToOneWithWhereWithoutReportCardInput, Prisma.ExamSessionUpdateWithoutReportCardInput>, Prisma.ExamSessionUncheckedUpdateWithoutReportCardInput>
}

export type ExamSessionCreateWithoutAcademicYearInput = {
  id?: string
  title: string
  description?: string | null
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  exams?: Prisma.ExamCreateNestedManyWithoutExamSessionInput
  ReportCard?: Prisma.ReportCardCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  title: string
  description?: string | null
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutExamSessionInput
  ReportCard?: Prisma.ReportCardUncheckedCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.ExamSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamSessionCreateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput>
}

export type ExamSessionCreateManyAcademicYearInputEnvelope = {
  data: Prisma.ExamSessionCreateManyAcademicYearInput | Prisma.ExamSessionCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type ExamSessionUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.ExamSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamSessionUpdateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.ExamSessionCreateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedCreateWithoutAcademicYearInput>
}

export type ExamSessionUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.ExamSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamSessionUpdateWithoutAcademicYearInput, Prisma.ExamSessionUncheckedUpdateWithoutAcademicYearInput>
}

export type ExamSessionUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.ExamSessionScalarWhereInput
  data: Prisma.XOR<Prisma.ExamSessionUpdateManyMutationInput, Prisma.ExamSessionUncheckedUpdateManyWithoutAcademicYearInput>
}

export type ExamSessionScalarWhereInput = {
  AND?: Prisma.ExamSessionScalarWhereInput | Prisma.ExamSessionScalarWhereInput[]
  OR?: Prisma.ExamSessionScalarWhereInput[]
  NOT?: Prisma.ExamSessionScalarWhereInput | Prisma.ExamSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"ExamSession"> | string
  title?: Prisma.StringFilter<"ExamSession"> | string
  description?: Prisma.StringNullableFilter<"ExamSession"> | string | null
  academicYearId?: Prisma.StringFilter<"ExamSession"> | string
  startDate?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  endDate?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  createdBy?: Prisma.StringFilter<"ExamSession"> | string
  createdAt?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExamSession"> | Date | string
}

export type ExamSessionCreateWithoutExamsInput = {
  id?: string
  title: string
  description?: string | null
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutExamSessionInput
  ReportCard?: Prisma.ReportCardCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionUncheckedCreateWithoutExamsInput = {
  id?: string
  title: string
  description?: string | null
  academicYearId: string
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  ReportCard?: Prisma.ReportCardUncheckedCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionCreateOrConnectWithoutExamsInput = {
  where: Prisma.ExamSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamSessionCreateWithoutExamsInput, Prisma.ExamSessionUncheckedCreateWithoutExamsInput>
}

export type ExamSessionUpsertWithoutExamsInput = {
  update: Prisma.XOR<Prisma.ExamSessionUpdateWithoutExamsInput, Prisma.ExamSessionUncheckedUpdateWithoutExamsInput>
  create: Prisma.XOR<Prisma.ExamSessionCreateWithoutExamsInput, Prisma.ExamSessionUncheckedCreateWithoutExamsInput>
  where?: Prisma.ExamSessionWhereInput
}

export type ExamSessionUpdateToOneWithWhereWithoutExamsInput = {
  where?: Prisma.ExamSessionWhereInput
  data: Prisma.XOR<Prisma.ExamSessionUpdateWithoutExamsInput, Prisma.ExamSessionUncheckedUpdateWithoutExamsInput>
}

export type ExamSessionUpdateWithoutExamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutExamSessionNestedInput
  ReportCard?: Prisma.ReportCardUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionUncheckedUpdateWithoutExamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ReportCard?: Prisma.ReportCardUncheckedUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionCreateWithoutReportCardInput = {
  id?: string
  title: string
  description?: string | null
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutExamSessionInput
  exams?: Prisma.ExamCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionUncheckedCreateWithoutReportCardInput = {
  id?: string
  title: string
  description?: string | null
  academicYearId: string
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutExamSessionInput
}

export type ExamSessionCreateOrConnectWithoutReportCardInput = {
  where: Prisma.ExamSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamSessionCreateWithoutReportCardInput, Prisma.ExamSessionUncheckedCreateWithoutReportCardInput>
}

export type ExamSessionUpsertWithoutReportCardInput = {
  update: Prisma.XOR<Prisma.ExamSessionUpdateWithoutReportCardInput, Prisma.ExamSessionUncheckedUpdateWithoutReportCardInput>
  create: Prisma.XOR<Prisma.ExamSessionCreateWithoutReportCardInput, Prisma.ExamSessionUncheckedCreateWithoutReportCardInput>
  where?: Prisma.ExamSessionWhereInput
}

export type ExamSessionUpdateToOneWithWhereWithoutReportCardInput = {
  where?: Prisma.ExamSessionWhereInput
  data: Prisma.XOR<Prisma.ExamSessionUpdateWithoutReportCardInput, Prisma.ExamSessionUncheckedUpdateWithoutReportCardInput>
}

export type ExamSessionUpdateWithoutReportCardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutExamSessionNestedInput
  exams?: Prisma.ExamUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionUncheckedUpdateWithoutReportCardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionCreateManyAcademicYearInput = {
  id?: string
  title: string
  description?: string | null
  startDate: Date | string
  endDate: Date | string
  createdBy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExamSessionUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exams?: Prisma.ExamUpdateManyWithoutExamSessionNestedInput
  ReportCard?: Prisma.ReportCardUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutExamSessionNestedInput
  ReportCard?: Prisma.ReportCardUncheckedUpdateManyWithoutExamSessionNestedInput
}

export type ExamSessionUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ExamSessionCountOutputType
 */

export type ExamSessionCountOutputType = {
  exams: number
  ReportCard: number
}

export type ExamSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  exams?: boolean | ExamSessionCountOutputTypeCountExamsArgs
  ReportCard?: boolean | ExamSessionCountOutputTypeCountReportCardArgs
}

/**
 * ExamSessionCountOutputType without action
 */
export type ExamSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSessionCountOutputType
   */
  select?: Prisma.ExamSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExamSessionCountOutputType without action
 */
export type ExamSessionCountOutputTypeCountExamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamWhereInput
}

/**
 * ExamSessionCountOutputType without action
 */
export type ExamSessionCountOutputTypeCountReportCardArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReportCardWhereInput
}


export type ExamSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  academicYearId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  exams?: boolean | Prisma.ExamSession$examsArgs<ExtArgs>
  ReportCard?: boolean | Prisma.ExamSession$ReportCardArgs<ExtArgs>
  _count?: boolean | Prisma.ExamSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examSession"]>

export type ExamSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  academicYearId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examSession"]>

export type ExamSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  academicYearId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examSession"]>

export type ExamSessionSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  academicYearId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExamSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "academicYearId" | "startDate" | "endDate" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["examSession"]>
export type ExamSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  exams?: boolean | Prisma.ExamSession$examsArgs<ExtArgs>
  ReportCard?: boolean | Prisma.ExamSession$ReportCardArgs<ExtArgs>
  _count?: boolean | Prisma.ExamSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type ExamSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}
export type ExamSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}

export type $ExamSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExamSession"
  objects: {
    academicYear: Prisma.$AcademicYearPayload<ExtArgs>
    exams: Prisma.$ExamPayload<ExtArgs>[]
    ReportCard: Prisma.$ReportCardPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    academicYearId: string
    startDate: Date
    endDate: Date
    createdBy: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["examSession"]>
  composites: {}
}

export type ExamSessionGetPayload<S extends boolean | null | undefined | ExamSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload, S>

export type ExamSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExamSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExamSessionCountAggregateInputType | true
  }

export interface ExamSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamSession'], meta: { name: 'ExamSession' } }
  /**
   * Find zero or one ExamSession that matches the filter.
   * @param {ExamSessionFindUniqueArgs} args - Arguments to find a ExamSession
   * @example
   * // Get one ExamSession
   * const examSession = await prisma.examSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExamSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, ExamSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExamSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExamSessionFindUniqueOrThrowArgs} args - Arguments to find a ExamSession
   * @example
   * // Get one ExamSession
   * const examSession = await prisma.examSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExamSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExamSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExamSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionFindFirstArgs} args - Arguments to find a ExamSession
   * @example
   * // Get one ExamSession
   * const examSession = await prisma.examSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExamSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, ExamSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExamSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionFindFirstOrThrowArgs} args - Arguments to find a ExamSession
   * @example
   * // Get one ExamSession
   * const examSession = await prisma.examSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExamSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExamSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExamSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExamSessions
   * const examSessions = await prisma.examSession.findMany()
   * 
   * // Get first 10 ExamSessions
   * const examSessions = await prisma.examSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const examSessionWithIdOnly = await prisma.examSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExamSessionFindManyArgs>(args?: Prisma.SelectSubset<T, ExamSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExamSession.
   * @param {ExamSessionCreateArgs} args - Arguments to create a ExamSession.
   * @example
   * // Create one ExamSession
   * const ExamSession = await prisma.examSession.create({
   *   data: {
   *     // ... data to create a ExamSession
   *   }
   * })
   * 
   */
  create<T extends ExamSessionCreateArgs>(args: Prisma.SelectSubset<T, ExamSessionCreateArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExamSessions.
   * @param {ExamSessionCreateManyArgs} args - Arguments to create many ExamSessions.
   * @example
   * // Create many ExamSessions
   * const examSession = await prisma.examSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExamSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, ExamSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExamSessions and returns the data saved in the database.
   * @param {ExamSessionCreateManyAndReturnArgs} args - Arguments to create many ExamSessions.
   * @example
   * // Create many ExamSessions
   * const examSession = await prisma.examSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExamSessions and only return the `id`
   * const examSessionWithIdOnly = await prisma.examSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExamSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExamSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExamSession.
   * @param {ExamSessionDeleteArgs} args - Arguments to delete one ExamSession.
   * @example
   * // Delete one ExamSession
   * const ExamSession = await prisma.examSession.delete({
   *   where: {
   *     // ... filter to delete one ExamSession
   *   }
   * })
   * 
   */
  delete<T extends ExamSessionDeleteArgs>(args: Prisma.SelectSubset<T, ExamSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExamSession.
   * @param {ExamSessionUpdateArgs} args - Arguments to update one ExamSession.
   * @example
   * // Update one ExamSession
   * const examSession = await prisma.examSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExamSessionUpdateArgs>(args: Prisma.SelectSubset<T, ExamSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExamSessions.
   * @param {ExamSessionDeleteManyArgs} args - Arguments to filter ExamSessions to delete.
   * @example
   * // Delete a few ExamSessions
   * const { count } = await prisma.examSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExamSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExamSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExamSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExamSessions
   * const examSession = await prisma.examSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExamSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, ExamSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExamSessions and returns the data updated in the database.
   * @param {ExamSessionUpdateManyAndReturnArgs} args - Arguments to update many ExamSessions.
   * @example
   * // Update many ExamSessions
   * const examSession = await prisma.examSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExamSessions and only return the `id`
   * const examSessionWithIdOnly = await prisma.examSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExamSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExamSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExamSession.
   * @param {ExamSessionUpsertArgs} args - Arguments to update or create a ExamSession.
   * @example
   * // Update or create a ExamSession
   * const examSession = await prisma.examSession.upsert({
   *   create: {
   *     // ... data to create a ExamSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExamSession we want to update
   *   }
   * })
   */
  upsert<T extends ExamSessionUpsertArgs>(args: Prisma.SelectSubset<T, ExamSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__ExamSessionClient<runtime.Types.Result.GetResult<Prisma.$ExamSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExamSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionCountArgs} args - Arguments to filter ExamSessions to count.
   * @example
   * // Count the number of ExamSessions
   * const count = await prisma.examSession.count({
   *   where: {
   *     // ... the filter for the ExamSessions we want to count
   *   }
   * })
  **/
  count<T extends ExamSessionCountArgs>(
    args?: Prisma.Subset<T, ExamSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExamSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExamSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExamSessionAggregateArgs>(args: Prisma.Subset<T, ExamSessionAggregateArgs>): Prisma.PrismaPromise<GetExamSessionAggregateType<T>>

  /**
   * Group by ExamSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExamSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExamSessionGroupByArgs['orderBy'] }
      : { orderBy?: ExamSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExamSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExamSession model
 */
readonly fields: ExamSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExamSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExamSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  academicYear<T extends Prisma.AcademicYearDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYearDefaultArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  exams<T extends Prisma.ExamSession$examsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExamSession$examsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  ReportCard<T extends Prisma.ExamSession$ReportCardArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExamSession$ReportCardArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExamSession model
 */
export interface ExamSessionFieldRefs {
  readonly id: Prisma.FieldRef<"ExamSession", 'String'>
  readonly title: Prisma.FieldRef<"ExamSession", 'String'>
  readonly description: Prisma.FieldRef<"ExamSession", 'String'>
  readonly academicYearId: Prisma.FieldRef<"ExamSession", 'String'>
  readonly startDate: Prisma.FieldRef<"ExamSession", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"ExamSession", 'DateTime'>
  readonly createdBy: Prisma.FieldRef<"ExamSession", 'String'>
  readonly createdAt: Prisma.FieldRef<"ExamSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ExamSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ExamSession findUnique
 */
export type ExamSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * Filter, which ExamSession to fetch.
   */
  where: Prisma.ExamSessionWhereUniqueInput
}

/**
 * ExamSession findUniqueOrThrow
 */
export type ExamSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * Filter, which ExamSession to fetch.
   */
  where: Prisma.ExamSessionWhereUniqueInput
}

/**
 * ExamSession findFirst
 */
export type ExamSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * Filter, which ExamSession to fetch.
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamSessions to fetch.
   */
  orderBy?: Prisma.ExamSessionOrderByWithRelationInput | Prisma.ExamSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExamSessions.
   */
  cursor?: Prisma.ExamSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExamSessions.
   */
  distinct?: Prisma.ExamSessionScalarFieldEnum | Prisma.ExamSessionScalarFieldEnum[]
}

/**
 * ExamSession findFirstOrThrow
 */
export type ExamSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * Filter, which ExamSession to fetch.
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamSessions to fetch.
   */
  orderBy?: Prisma.ExamSessionOrderByWithRelationInput | Prisma.ExamSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExamSessions.
   */
  cursor?: Prisma.ExamSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExamSessions.
   */
  distinct?: Prisma.ExamSessionScalarFieldEnum | Prisma.ExamSessionScalarFieldEnum[]
}

/**
 * ExamSession findMany
 */
export type ExamSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * Filter, which ExamSessions to fetch.
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamSessions to fetch.
   */
  orderBy?: Prisma.ExamSessionOrderByWithRelationInput | Prisma.ExamSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExamSessions.
   */
  cursor?: Prisma.ExamSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamSessions.
   */
  skip?: number
  distinct?: Prisma.ExamSessionScalarFieldEnum | Prisma.ExamSessionScalarFieldEnum[]
}

/**
 * ExamSession create
 */
export type ExamSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a ExamSession.
   */
  data: Prisma.XOR<Prisma.ExamSessionCreateInput, Prisma.ExamSessionUncheckedCreateInput>
}

/**
 * ExamSession createMany
 */
export type ExamSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExamSessions.
   */
  data: Prisma.ExamSessionCreateManyInput | Prisma.ExamSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExamSession createManyAndReturn
 */
export type ExamSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * The data used to create many ExamSessions.
   */
  data: Prisma.ExamSessionCreateManyInput | Prisma.ExamSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExamSession update
 */
export type ExamSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a ExamSession.
   */
  data: Prisma.XOR<Prisma.ExamSessionUpdateInput, Prisma.ExamSessionUncheckedUpdateInput>
  /**
   * Choose, which ExamSession to update.
   */
  where: Prisma.ExamSessionWhereUniqueInput
}

/**
 * ExamSession updateMany
 */
export type ExamSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExamSessions.
   */
  data: Prisma.XOR<Prisma.ExamSessionUpdateManyMutationInput, Prisma.ExamSessionUncheckedUpdateManyInput>
  /**
   * Filter which ExamSessions to update
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * Limit how many ExamSessions to update.
   */
  limit?: number
}

/**
 * ExamSession updateManyAndReturn
 */
export type ExamSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * The data used to update ExamSessions.
   */
  data: Prisma.XOR<Prisma.ExamSessionUpdateManyMutationInput, Prisma.ExamSessionUncheckedUpdateManyInput>
  /**
   * Filter which ExamSessions to update
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * Limit how many ExamSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExamSession upsert
 */
export type ExamSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the ExamSession to update in case it exists.
   */
  where: Prisma.ExamSessionWhereUniqueInput
  /**
   * In case the ExamSession found by the `where` argument doesn't exist, create a new ExamSession with this data.
   */
  create: Prisma.XOR<Prisma.ExamSessionCreateInput, Prisma.ExamSessionUncheckedCreateInput>
  /**
   * In case the ExamSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExamSessionUpdateInput, Prisma.ExamSessionUncheckedUpdateInput>
}

/**
 * ExamSession delete
 */
export type ExamSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
  /**
   * Filter which ExamSession to delete.
   */
  where: Prisma.ExamSessionWhereUniqueInput
}

/**
 * ExamSession deleteMany
 */
export type ExamSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExamSessions to delete
   */
  where?: Prisma.ExamSessionWhereInput
  /**
   * Limit how many ExamSessions to delete.
   */
  limit?: number
}

/**
 * ExamSession.exams
 */
export type ExamSession$examsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  where?: Prisma.ExamWhereInput
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  cursor?: Prisma.ExamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * ExamSession.ReportCard
 */
export type ExamSession$ReportCardArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportCard
   */
  select?: Prisma.ReportCardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportCard
   */
  omit?: Prisma.ReportCardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportCardInclude<ExtArgs> | null
  where?: Prisma.ReportCardWhereInput
  orderBy?: Prisma.ReportCardOrderByWithRelationInput | Prisma.ReportCardOrderByWithRelationInput[]
  cursor?: Prisma.ReportCardWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReportCardScalarFieldEnum | Prisma.ReportCardScalarFieldEnum[]
}

/**
 * ExamSession without action
 */
export type ExamSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamSession
   */
  select?: Prisma.ExamSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamSession
   */
  omit?: Prisma.ExamSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamSessionInclude<ExtArgs> | null
}
