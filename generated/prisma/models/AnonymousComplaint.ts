
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AnonymousComplaint` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AnonymousComplaint
 * 
 */
export type AnonymousComplaintModel = runtime.Types.Result.DefaultSelection<Prisma.$AnonymousComplaintPayload>

export type AggregateAnonymousComplaint = {
  _count: AnonymousComplaintCountAggregateOutputType | null
  _min: AnonymousComplaintMinAggregateOutputType | null
  _max: AnonymousComplaintMaxAggregateOutputType | null
}

export type AnonymousComplaintMinAggregateOutputType = {
  id: string | null
  trackingId: string | null
  category: string | null
  severity: $Enums.Severity | null
  subject: string | null
  description: string | null
  submittedAt: Date | null
  currentStatus: $Enums.ComplaintStatus | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type AnonymousComplaintMaxAggregateOutputType = {
  id: string | null
  trackingId: string | null
  category: string | null
  severity: $Enums.Severity | null
  subject: string | null
  description: string | null
  submittedAt: Date | null
  currentStatus: $Enums.ComplaintStatus | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  academicYearId: string | null
}

export type AnonymousComplaintCountAggregateOutputType = {
  id: number
  trackingId: number
  category: number
  severity: number
  subject: number
  description: number
  evidenceUrls: number
  submittedAt: number
  currentStatus: number
  organizationId: number
  createdAt: number
  updatedAt: number
  academicYearId: number
  _all: number
}


export type AnonymousComplaintMinAggregateInputType = {
  id?: true
  trackingId?: true
  category?: true
  severity?: true
  subject?: true
  description?: true
  submittedAt?: true
  currentStatus?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type AnonymousComplaintMaxAggregateInputType = {
  id?: true
  trackingId?: true
  category?: true
  severity?: true
  subject?: true
  description?: true
  submittedAt?: true
  currentStatus?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
}

export type AnonymousComplaintCountAggregateInputType = {
  id?: true
  trackingId?: true
  category?: true
  severity?: true
  subject?: true
  description?: true
  evidenceUrls?: true
  submittedAt?: true
  currentStatus?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  academicYearId?: true
  _all?: true
}

export type AnonymousComplaintAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AnonymousComplaint to aggregate.
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnonymousComplaints to fetch.
   */
  orderBy?: Prisma.AnonymousComplaintOrderByWithRelationInput | Prisma.AnonymousComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AnonymousComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnonymousComplaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnonymousComplaints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AnonymousComplaints
  **/
  _count?: true | AnonymousComplaintCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnonymousComplaintMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnonymousComplaintMaxAggregateInputType
}

export type GetAnonymousComplaintAggregateType<T extends AnonymousComplaintAggregateArgs> = {
      [P in keyof T & keyof AggregateAnonymousComplaint]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnonymousComplaint[P]>
    : Prisma.GetScalarType<T[P], AggregateAnonymousComplaint[P]>
}




export type AnonymousComplaintGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnonymousComplaintWhereInput
  orderBy?: Prisma.AnonymousComplaintOrderByWithAggregationInput | Prisma.AnonymousComplaintOrderByWithAggregationInput[]
  by: Prisma.AnonymousComplaintScalarFieldEnum[] | Prisma.AnonymousComplaintScalarFieldEnum
  having?: Prisma.AnonymousComplaintScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnonymousComplaintCountAggregateInputType | true
  _min?: AnonymousComplaintMinAggregateInputType
  _max?: AnonymousComplaintMaxAggregateInputType
}

export type AnonymousComplaintGroupByOutputType = {
  id: string
  trackingId: string
  category: string
  severity: $Enums.Severity
  subject: string
  description: string
  evidenceUrls: string[]
  submittedAt: Date
  currentStatus: $Enums.ComplaintStatus
  organizationId: string
  createdAt: Date
  updatedAt: Date
  academicYearId: string | null
  _count: AnonymousComplaintCountAggregateOutputType | null
  _min: AnonymousComplaintMinAggregateOutputType | null
  _max: AnonymousComplaintMaxAggregateOutputType | null
}

type GetAnonymousComplaintGroupByPayload<T extends AnonymousComplaintGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnonymousComplaintGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnonymousComplaintGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnonymousComplaintGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnonymousComplaintGroupByOutputType[P]>
      }
    >
  >



export type AnonymousComplaintWhereInput = {
  AND?: Prisma.AnonymousComplaintWhereInput | Prisma.AnonymousComplaintWhereInput[]
  OR?: Prisma.AnonymousComplaintWhereInput[]
  NOT?: Prisma.AnonymousComplaintWhereInput | Prisma.AnonymousComplaintWhereInput[]
  id?: Prisma.StringFilter<"AnonymousComplaint"> | string
  trackingId?: Prisma.StringFilter<"AnonymousComplaint"> | string
  category?: Prisma.StringFilter<"AnonymousComplaint"> | string
  severity?: Prisma.EnumSeverityFilter<"AnonymousComplaint"> | $Enums.Severity
  subject?: Prisma.StringFilter<"AnonymousComplaint"> | string
  description?: Prisma.StringFilter<"AnonymousComplaint"> | string
  evidenceUrls?: Prisma.StringNullableListFilter<"AnonymousComplaint">
  submittedAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFilter<"AnonymousComplaint"> | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFilter<"AnonymousComplaint"> | string
  createdAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"AnonymousComplaint"> | string | null
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineListRelationFilter
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}

export type AnonymousComplaintOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  trackingId?: Prisma.SortOrder
  category?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  evidenceUrls?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineOrderByRelationAggregateInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  _relevance?: Prisma.AnonymousComplaintOrderByRelevanceInput
}

export type AnonymousComplaintWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  trackingId?: string
  AND?: Prisma.AnonymousComplaintWhereInput | Prisma.AnonymousComplaintWhereInput[]
  OR?: Prisma.AnonymousComplaintWhereInput[]
  NOT?: Prisma.AnonymousComplaintWhereInput | Prisma.AnonymousComplaintWhereInput[]
  category?: Prisma.StringFilter<"AnonymousComplaint"> | string
  severity?: Prisma.EnumSeverityFilter<"AnonymousComplaint"> | $Enums.Severity
  subject?: Prisma.StringFilter<"AnonymousComplaint"> | string
  description?: Prisma.StringFilter<"AnonymousComplaint"> | string
  evidenceUrls?: Prisma.StringNullableListFilter<"AnonymousComplaint">
  submittedAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFilter<"AnonymousComplaint"> | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFilter<"AnonymousComplaint"> | string
  createdAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"AnonymousComplaint"> | string | null
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineListRelationFilter
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}, "id" | "trackingId">

export type AnonymousComplaintOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  trackingId?: Prisma.SortOrder
  category?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  evidenceUrls?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AnonymousComplaintCountOrderByAggregateInput
  _max?: Prisma.AnonymousComplaintMaxOrderByAggregateInput
  _min?: Prisma.AnonymousComplaintMinOrderByAggregateInput
}

export type AnonymousComplaintScalarWhereWithAggregatesInput = {
  AND?: Prisma.AnonymousComplaintScalarWhereWithAggregatesInput | Prisma.AnonymousComplaintScalarWhereWithAggregatesInput[]
  OR?: Prisma.AnonymousComplaintScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AnonymousComplaintScalarWhereWithAggregatesInput | Prisma.AnonymousComplaintScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AnonymousComplaint"> | string
  trackingId?: Prisma.StringWithAggregatesFilter<"AnonymousComplaint"> | string
  category?: Prisma.StringWithAggregatesFilter<"AnonymousComplaint"> | string
  severity?: Prisma.EnumSeverityWithAggregatesFilter<"AnonymousComplaint"> | $Enums.Severity
  subject?: Prisma.StringWithAggregatesFilter<"AnonymousComplaint"> | string
  description?: Prisma.StringWithAggregatesFilter<"AnonymousComplaint"> | string
  evidenceUrls?: Prisma.StringNullableListFilter<"AnonymousComplaint">
  submittedAt?: Prisma.DateTimeWithAggregatesFilter<"AnonymousComplaint"> | Date | string
  currentStatus?: Prisma.EnumComplaintStatusWithAggregatesFilter<"AnonymousComplaint"> | $Enums.ComplaintStatus
  organizationId?: Prisma.StringWithAggregatesFilter<"AnonymousComplaint"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AnonymousComplaint"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AnonymousComplaint"> | Date | string
  academicYearId?: Prisma.StringNullableWithAggregatesFilter<"AnonymousComplaint"> | string | null
}

export type AnonymousComplaintCreateInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAnonymousComplaintInput
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineCreateNestedManyWithoutComplaintInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutComplaintsInput
}

export type AnonymousComplaintUncheckedCreateInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUncheckedCreateNestedManyWithoutComplaintInput
}

export type AnonymousComplaintUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAnonymousComplaintNestedInput
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUpdateManyWithoutComplaintNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutComplaintsNestedInput
}

export type AnonymousComplaintUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUncheckedUpdateManyWithoutComplaintNestedInput
}

export type AnonymousComplaintCreateManyInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AnonymousComplaintUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnonymousComplaintUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AnonymousComplaintListRelationFilter = {
  every?: Prisma.AnonymousComplaintWhereInput
  some?: Prisma.AnonymousComplaintWhereInput
  none?: Prisma.AnonymousComplaintWhereInput
}

export type AnonymousComplaintOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AnonymousComplaintOrderByRelevanceInput = {
  fields: Prisma.AnonymousComplaintOrderByRelevanceFieldEnum | Prisma.AnonymousComplaintOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type AnonymousComplaintCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trackingId?: Prisma.SortOrder
  category?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  evidenceUrls?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type AnonymousComplaintMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trackingId?: Prisma.SortOrder
  category?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type AnonymousComplaintMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trackingId?: Prisma.SortOrder
  category?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  currentStatus?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type AnonymousComplaintScalarRelationFilter = {
  is?: Prisma.AnonymousComplaintWhereInput
  isNot?: Prisma.AnonymousComplaintWhereInput
}

export type AnonymousComplaintCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput> | Prisma.AnonymousComplaintCreateWithoutAcademicYearInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput | Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyAcademicYearInputEnvelope
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
}

export type AnonymousComplaintUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput> | Prisma.AnonymousComplaintCreateWithoutAcademicYearInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput | Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyAcademicYearInputEnvelope
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
}

export type AnonymousComplaintUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput> | Prisma.AnonymousComplaintCreateWithoutAcademicYearInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput | Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyAcademicYearInputEnvelope
  set?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  disconnect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  delete?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  update?: Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.AnonymousComplaintUpdateManyWithWhereWithoutAcademicYearInput | Prisma.AnonymousComplaintUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.AnonymousComplaintScalarWhereInput | Prisma.AnonymousComplaintScalarWhereInput[]
}

export type AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput> | Prisma.AnonymousComplaintCreateWithoutAcademicYearInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput | Prisma.AnonymousComplaintCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyAcademicYearInputEnvelope
  set?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  disconnect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  delete?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  update?: Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.AnonymousComplaintUpdateManyWithWhereWithoutAcademicYearInput | Prisma.AnonymousComplaintUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.AnonymousComplaintScalarWhereInput | Prisma.AnonymousComplaintScalarWhereInput[]
}

export type AnonymousComplaintCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput> | Prisma.AnonymousComplaintCreateWithoutOrganizationInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput | Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyOrganizationInputEnvelope
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
}

export type AnonymousComplaintUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput> | Prisma.AnonymousComplaintCreateWithoutOrganizationInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput | Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyOrganizationInputEnvelope
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
}

export type AnonymousComplaintUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput> | Prisma.AnonymousComplaintCreateWithoutOrganizationInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput | Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyOrganizationInputEnvelope
  set?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  disconnect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  delete?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  update?: Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.AnonymousComplaintUpdateManyWithWhereWithoutOrganizationInput | Prisma.AnonymousComplaintUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.AnonymousComplaintScalarWhereInput | Prisma.AnonymousComplaintScalarWhereInput[]
}

export type AnonymousComplaintUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput> | Prisma.AnonymousComplaintCreateWithoutOrganizationInput[] | Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput | Prisma.AnonymousComplaintCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.AnonymousComplaintUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.AnonymousComplaintCreateManyOrganizationInputEnvelope
  set?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  disconnect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  delete?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  connect?: Prisma.AnonymousComplaintWhereUniqueInput | Prisma.AnonymousComplaintWhereUniqueInput[]
  update?: Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.AnonymousComplaintUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.AnonymousComplaintUpdateManyWithWhereWithoutOrganizationInput | Prisma.AnonymousComplaintUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.AnonymousComplaintScalarWhereInput | Prisma.AnonymousComplaintScalarWhereInput[]
}

export type AnonymousComplaintCreateevidenceUrlsInput = {
  set: string[]
}

export type EnumSeverityFieldUpdateOperationsInput = {
  set?: $Enums.Severity
}

export type AnonymousComplaintUpdateevidenceUrlsInput = {
  set?: string[]
  push?: string | string[]
}

export type EnumComplaintStatusFieldUpdateOperationsInput = {
  set?: $Enums.ComplaintStatus
}

export type AnonymousComplaintCreateNestedOneWithoutComplaintStatusTimelineInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUncheckedCreateWithoutComplaintStatusTimelineInput>
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutComplaintStatusTimelineInput
  connect?: Prisma.AnonymousComplaintWhereUniqueInput
}

export type AnonymousComplaintUpdateOneRequiredWithoutComplaintStatusTimelineNestedInput = {
  create?: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUncheckedCreateWithoutComplaintStatusTimelineInput>
  connectOrCreate?: Prisma.AnonymousComplaintCreateOrConnectWithoutComplaintStatusTimelineInput
  upsert?: Prisma.AnonymousComplaintUpsertWithoutComplaintStatusTimelineInput
  connect?: Prisma.AnonymousComplaintWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AnonymousComplaintUpdateToOneWithWhereWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUpdateWithoutComplaintStatusTimelineInput>, Prisma.AnonymousComplaintUncheckedUpdateWithoutComplaintStatusTimelineInput>
}

export type AnonymousComplaintCreateWithoutAcademicYearInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAnonymousComplaintInput
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineCreateNestedManyWithoutComplaintInput
}

export type AnonymousComplaintUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUncheckedCreateNestedManyWithoutComplaintInput
}

export type AnonymousComplaintCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput>
}

export type AnonymousComplaintCreateManyAcademicYearInputEnvelope = {
  data: Prisma.AnonymousComplaintCreateManyAcademicYearInput | Prisma.AnonymousComplaintCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type AnonymousComplaintUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  update: Prisma.XOR<Prisma.AnonymousComplaintUpdateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedCreateWithoutAcademicYearInput>
}

export type AnonymousComplaintUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateWithoutAcademicYearInput, Prisma.AnonymousComplaintUncheckedUpdateWithoutAcademicYearInput>
}

export type AnonymousComplaintUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.AnonymousComplaintScalarWhereInput
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateManyMutationInput, Prisma.AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearInput>
}

export type AnonymousComplaintScalarWhereInput = {
  AND?: Prisma.AnonymousComplaintScalarWhereInput | Prisma.AnonymousComplaintScalarWhereInput[]
  OR?: Prisma.AnonymousComplaintScalarWhereInput[]
  NOT?: Prisma.AnonymousComplaintScalarWhereInput | Prisma.AnonymousComplaintScalarWhereInput[]
  id?: Prisma.StringFilter<"AnonymousComplaint"> | string
  trackingId?: Prisma.StringFilter<"AnonymousComplaint"> | string
  category?: Prisma.StringFilter<"AnonymousComplaint"> | string
  severity?: Prisma.EnumSeverityFilter<"AnonymousComplaint"> | $Enums.Severity
  subject?: Prisma.StringFilter<"AnonymousComplaint"> | string
  description?: Prisma.StringFilter<"AnonymousComplaint"> | string
  evidenceUrls?: Prisma.StringNullableListFilter<"AnonymousComplaint">
  submittedAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFilter<"AnonymousComplaint"> | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFilter<"AnonymousComplaint"> | string
  createdAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AnonymousComplaint"> | Date | string
  academicYearId?: Prisma.StringNullableFilter<"AnonymousComplaint"> | string | null
}

export type AnonymousComplaintCreateWithoutOrganizationInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineCreateNestedManyWithoutComplaintInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutComplaintsInput
}

export type AnonymousComplaintUncheckedCreateWithoutOrganizationInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUncheckedCreateNestedManyWithoutComplaintInput
}

export type AnonymousComplaintCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput>
}

export type AnonymousComplaintCreateManyOrganizationInputEnvelope = {
  data: Prisma.AnonymousComplaintCreateManyOrganizationInput | Prisma.AnonymousComplaintCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type AnonymousComplaintUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  update: Prisma.XOR<Prisma.AnonymousComplaintUpdateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedCreateWithoutOrganizationInput>
}

export type AnonymousComplaintUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateWithoutOrganizationInput, Prisma.AnonymousComplaintUncheckedUpdateWithoutOrganizationInput>
}

export type AnonymousComplaintUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.AnonymousComplaintScalarWhereInput
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateManyMutationInput, Prisma.AnonymousComplaintUncheckedUpdateManyWithoutOrganizationInput>
}

export type AnonymousComplaintCreateWithoutComplaintStatusTimelineInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutAnonymousComplaintInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutComplaintsInput
}

export type AnonymousComplaintUncheckedCreateWithoutComplaintStatusTimelineInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AnonymousComplaintCreateOrConnectWithoutComplaintStatusTimelineInput = {
  where: Prisma.AnonymousComplaintWhereUniqueInput
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUncheckedCreateWithoutComplaintStatusTimelineInput>
}

export type AnonymousComplaintUpsertWithoutComplaintStatusTimelineInput = {
  update: Prisma.XOR<Prisma.AnonymousComplaintUpdateWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUncheckedUpdateWithoutComplaintStatusTimelineInput>
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUncheckedCreateWithoutComplaintStatusTimelineInput>
  where?: Prisma.AnonymousComplaintWhereInput
}

export type AnonymousComplaintUpdateToOneWithWhereWithoutComplaintStatusTimelineInput = {
  where?: Prisma.AnonymousComplaintWhereInput
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateWithoutComplaintStatusTimelineInput, Prisma.AnonymousComplaintUncheckedUpdateWithoutComplaintStatusTimelineInput>
}

export type AnonymousComplaintUpdateWithoutComplaintStatusTimelineInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAnonymousComplaintNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutComplaintsNestedInput
}

export type AnonymousComplaintUncheckedUpdateWithoutComplaintStatusTimelineInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AnonymousComplaintCreateManyAcademicYearInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnonymousComplaintUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutAnonymousComplaintNestedInput
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUpdateManyWithoutComplaintNestedInput
}

export type AnonymousComplaintUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUncheckedUpdateManyWithoutComplaintNestedInput
}

export type AnonymousComplaintUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnonymousComplaintCreateManyOrganizationInput = {
  id?: string
  trackingId: string
  category: string
  severity?: $Enums.Severity
  subject: string
  description: string
  evidenceUrls?: Prisma.AnonymousComplaintCreateevidenceUrlsInput | string[]
  submittedAt?: Date | string
  currentStatus?: $Enums.ComplaintStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  academicYearId?: string | null
}

export type AnonymousComplaintUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUpdateManyWithoutComplaintNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutComplaintsNestedInput
}

export type AnonymousComplaintUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ComplaintStatusTimeline?: Prisma.ComplaintStatusTimelineUncheckedUpdateManyWithoutComplaintNestedInput
}

export type AnonymousComplaintUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  trackingId?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  evidenceUrls?: Prisma.AnonymousComplaintUpdateevidenceUrlsInput | string[]
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentStatus?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type AnonymousComplaintCountOutputType
 */

export type AnonymousComplaintCountOutputType = {
  ComplaintStatusTimeline: number
}

export type AnonymousComplaintCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ComplaintStatusTimeline?: boolean | AnonymousComplaintCountOutputTypeCountComplaintStatusTimelineArgs
}

/**
 * AnonymousComplaintCountOutputType without action
 */
export type AnonymousComplaintCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaintCountOutputType
   */
  select?: Prisma.AnonymousComplaintCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AnonymousComplaintCountOutputType without action
 */
export type AnonymousComplaintCountOutputTypeCountComplaintStatusTimelineArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ComplaintStatusTimelineWhereInput
}


export type AnonymousComplaintSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  trackingId?: boolean
  category?: boolean
  severity?: boolean
  subject?: boolean
  description?: boolean
  evidenceUrls?: boolean
  submittedAt?: boolean
  currentStatus?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  ComplaintStatusTimeline?: boolean | Prisma.AnonymousComplaint$ComplaintStatusTimelineArgs<ExtArgs>
  academicYear?: boolean | Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>
  _count?: boolean | Prisma.AnonymousComplaintCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["anonymousComplaint"]>

export type AnonymousComplaintSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  trackingId?: boolean
  category?: boolean
  severity?: boolean
  subject?: boolean
  description?: boolean
  evidenceUrls?: boolean
  submittedAt?: boolean
  currentStatus?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["anonymousComplaint"]>

export type AnonymousComplaintSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  trackingId?: boolean
  category?: boolean
  severity?: boolean
  subject?: boolean
  description?: boolean
  evidenceUrls?: boolean
  submittedAt?: boolean
  currentStatus?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["anonymousComplaint"]>

export type AnonymousComplaintSelectScalar = {
  id?: boolean
  trackingId?: boolean
  category?: boolean
  severity?: boolean
  subject?: boolean
  description?: boolean
  evidenceUrls?: boolean
  submittedAt?: boolean
  currentStatus?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  academicYearId?: boolean
}

export type AnonymousComplaintOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "trackingId" | "category" | "severity" | "subject" | "description" | "evidenceUrls" | "submittedAt" | "currentStatus" | "organizationId" | "createdAt" | "updatedAt" | "academicYearId", ExtArgs["result"]["anonymousComplaint"]>
export type AnonymousComplaintInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  ComplaintStatusTimeline?: boolean | Prisma.AnonymousComplaint$ComplaintStatusTimelineArgs<ExtArgs>
  academicYear?: boolean | Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>
  _count?: boolean | Prisma.AnonymousComplaintCountOutputTypeDefaultArgs<ExtArgs>
}
export type AnonymousComplaintIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>
}
export type AnonymousComplaintIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>
}

export type $AnonymousComplaintPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AnonymousComplaint"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    ComplaintStatusTimeline: Prisma.$ComplaintStatusTimelinePayload<ExtArgs>[]
    academicYear: Prisma.$AcademicYearPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    trackingId: string
    category: string
    severity: $Enums.Severity
    subject: string
    description: string
    evidenceUrls: string[]
    submittedAt: Date
    currentStatus: $Enums.ComplaintStatus
    organizationId: string
    createdAt: Date
    updatedAt: Date
    academicYearId: string | null
  }, ExtArgs["result"]["anonymousComplaint"]>
  composites: {}
}

export type AnonymousComplaintGetPayload<S extends boolean | null | undefined | AnonymousComplaintDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload, S>

export type AnonymousComplaintCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AnonymousComplaintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnonymousComplaintCountAggregateInputType | true
  }

export interface AnonymousComplaintDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnonymousComplaint'], meta: { name: 'AnonymousComplaint' } }
  /**
   * Find zero or one AnonymousComplaint that matches the filter.
   * @param {AnonymousComplaintFindUniqueArgs} args - Arguments to find a AnonymousComplaint
   * @example
   * // Get one AnonymousComplaint
   * const anonymousComplaint = await prisma.anonymousComplaint.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnonymousComplaintFindUniqueArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AnonymousComplaint that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnonymousComplaintFindUniqueOrThrowArgs} args - Arguments to find a AnonymousComplaint
   * @example
   * // Get one AnonymousComplaint
   * const anonymousComplaint = await prisma.anonymousComplaint.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnonymousComplaintFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AnonymousComplaint that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintFindFirstArgs} args - Arguments to find a AnonymousComplaint
   * @example
   * // Get one AnonymousComplaint
   * const anonymousComplaint = await prisma.anonymousComplaint.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnonymousComplaintFindFirstArgs>(args?: Prisma.SelectSubset<T, AnonymousComplaintFindFirstArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AnonymousComplaint that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintFindFirstOrThrowArgs} args - Arguments to find a AnonymousComplaint
   * @example
   * // Get one AnonymousComplaint
   * const anonymousComplaint = await prisma.anonymousComplaint.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnonymousComplaintFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AnonymousComplaintFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AnonymousComplaints that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AnonymousComplaints
   * const anonymousComplaints = await prisma.anonymousComplaint.findMany()
   * 
   * // Get first 10 AnonymousComplaints
   * const anonymousComplaints = await prisma.anonymousComplaint.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const anonymousComplaintWithIdOnly = await prisma.anonymousComplaint.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AnonymousComplaintFindManyArgs>(args?: Prisma.SelectSubset<T, AnonymousComplaintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AnonymousComplaint.
   * @param {AnonymousComplaintCreateArgs} args - Arguments to create a AnonymousComplaint.
   * @example
   * // Create one AnonymousComplaint
   * const AnonymousComplaint = await prisma.anonymousComplaint.create({
   *   data: {
   *     // ... data to create a AnonymousComplaint
   *   }
   * })
   * 
   */
  create<T extends AnonymousComplaintCreateArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintCreateArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AnonymousComplaints.
   * @param {AnonymousComplaintCreateManyArgs} args - Arguments to create many AnonymousComplaints.
   * @example
   * // Create many AnonymousComplaints
   * const anonymousComplaint = await prisma.anonymousComplaint.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AnonymousComplaintCreateManyArgs>(args?: Prisma.SelectSubset<T, AnonymousComplaintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AnonymousComplaints and returns the data saved in the database.
   * @param {AnonymousComplaintCreateManyAndReturnArgs} args - Arguments to create many AnonymousComplaints.
   * @example
   * // Create many AnonymousComplaints
   * const anonymousComplaint = await prisma.anonymousComplaint.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AnonymousComplaints and only return the `id`
   * const anonymousComplaintWithIdOnly = await prisma.anonymousComplaint.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AnonymousComplaintCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AnonymousComplaintCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AnonymousComplaint.
   * @param {AnonymousComplaintDeleteArgs} args - Arguments to delete one AnonymousComplaint.
   * @example
   * // Delete one AnonymousComplaint
   * const AnonymousComplaint = await prisma.anonymousComplaint.delete({
   *   where: {
   *     // ... filter to delete one AnonymousComplaint
   *   }
   * })
   * 
   */
  delete<T extends AnonymousComplaintDeleteArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintDeleteArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AnonymousComplaint.
   * @param {AnonymousComplaintUpdateArgs} args - Arguments to update one AnonymousComplaint.
   * @example
   * // Update one AnonymousComplaint
   * const anonymousComplaint = await prisma.anonymousComplaint.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AnonymousComplaintUpdateArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintUpdateArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AnonymousComplaints.
   * @param {AnonymousComplaintDeleteManyArgs} args - Arguments to filter AnonymousComplaints to delete.
   * @example
   * // Delete a few AnonymousComplaints
   * const { count } = await prisma.anonymousComplaint.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AnonymousComplaintDeleteManyArgs>(args?: Prisma.SelectSubset<T, AnonymousComplaintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AnonymousComplaints.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AnonymousComplaints
   * const anonymousComplaint = await prisma.anonymousComplaint.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AnonymousComplaintUpdateManyArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AnonymousComplaints and returns the data updated in the database.
   * @param {AnonymousComplaintUpdateManyAndReturnArgs} args - Arguments to update many AnonymousComplaints.
   * @example
   * // Update many AnonymousComplaints
   * const anonymousComplaint = await prisma.anonymousComplaint.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AnonymousComplaints and only return the `id`
   * const anonymousComplaintWithIdOnly = await prisma.anonymousComplaint.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AnonymousComplaintUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AnonymousComplaint.
   * @param {AnonymousComplaintUpsertArgs} args - Arguments to update or create a AnonymousComplaint.
   * @example
   * // Update or create a AnonymousComplaint
   * const anonymousComplaint = await prisma.anonymousComplaint.upsert({
   *   create: {
   *     // ... data to create a AnonymousComplaint
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AnonymousComplaint we want to update
   *   }
   * })
   */
  upsert<T extends AnonymousComplaintUpsertArgs>(args: Prisma.SelectSubset<T, AnonymousComplaintUpsertArgs<ExtArgs>>): Prisma.Prisma__AnonymousComplaintClient<runtime.Types.Result.GetResult<Prisma.$AnonymousComplaintPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AnonymousComplaints.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintCountArgs} args - Arguments to filter AnonymousComplaints to count.
   * @example
   * // Count the number of AnonymousComplaints
   * const count = await prisma.anonymousComplaint.count({
   *   where: {
   *     // ... the filter for the AnonymousComplaints we want to count
   *   }
   * })
  **/
  count<T extends AnonymousComplaintCountArgs>(
    args?: Prisma.Subset<T, AnonymousComplaintCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnonymousComplaintCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AnonymousComplaint.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnonymousComplaintAggregateArgs>(args: Prisma.Subset<T, AnonymousComplaintAggregateArgs>): Prisma.PrismaPromise<GetAnonymousComplaintAggregateType<T>>

  /**
   * Group by AnonymousComplaint.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnonymousComplaintGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AnonymousComplaintGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnonymousComplaintGroupByArgs['orderBy'] }
      : { orderBy?: AnonymousComplaintGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AnonymousComplaintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnonymousComplaintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AnonymousComplaint model
 */
readonly fields: AnonymousComplaintFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AnonymousComplaint.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnonymousComplaintClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  ComplaintStatusTimeline<T extends Prisma.AnonymousComplaint$ComplaintStatusTimelineArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AnonymousComplaint$ComplaintStatusTimelineArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintStatusTimelinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  academicYear<T extends Prisma.AnonymousComplaint$academicYearArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AnonymousComplaint$academicYearArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AnonymousComplaint model
 */
export interface AnonymousComplaintFieldRefs {
  readonly id: Prisma.FieldRef<"AnonymousComplaint", 'String'>
  readonly trackingId: Prisma.FieldRef<"AnonymousComplaint", 'String'>
  readonly category: Prisma.FieldRef<"AnonymousComplaint", 'String'>
  readonly severity: Prisma.FieldRef<"AnonymousComplaint", 'Severity'>
  readonly subject: Prisma.FieldRef<"AnonymousComplaint", 'String'>
  readonly description: Prisma.FieldRef<"AnonymousComplaint", 'String'>
  readonly evidenceUrls: Prisma.FieldRef<"AnonymousComplaint", 'String[]'>
  readonly submittedAt: Prisma.FieldRef<"AnonymousComplaint", 'DateTime'>
  readonly currentStatus: Prisma.FieldRef<"AnonymousComplaint", 'ComplaintStatus'>
  readonly organizationId: Prisma.FieldRef<"AnonymousComplaint", 'String'>
  readonly createdAt: Prisma.FieldRef<"AnonymousComplaint", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AnonymousComplaint", 'DateTime'>
  readonly academicYearId: Prisma.FieldRef<"AnonymousComplaint", 'String'>
}
    

// Custom InputTypes
/**
 * AnonymousComplaint findUnique
 */
export type AnonymousComplaintFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * Filter, which AnonymousComplaint to fetch.
   */
  where: Prisma.AnonymousComplaintWhereUniqueInput
}

/**
 * AnonymousComplaint findUniqueOrThrow
 */
export type AnonymousComplaintFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * Filter, which AnonymousComplaint to fetch.
   */
  where: Prisma.AnonymousComplaintWhereUniqueInput
}

/**
 * AnonymousComplaint findFirst
 */
export type AnonymousComplaintFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * Filter, which AnonymousComplaint to fetch.
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnonymousComplaints to fetch.
   */
  orderBy?: Prisma.AnonymousComplaintOrderByWithRelationInput | Prisma.AnonymousComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AnonymousComplaints.
   */
  cursor?: Prisma.AnonymousComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnonymousComplaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnonymousComplaints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AnonymousComplaints.
   */
  distinct?: Prisma.AnonymousComplaintScalarFieldEnum | Prisma.AnonymousComplaintScalarFieldEnum[]
}

/**
 * AnonymousComplaint findFirstOrThrow
 */
export type AnonymousComplaintFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * Filter, which AnonymousComplaint to fetch.
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnonymousComplaints to fetch.
   */
  orderBy?: Prisma.AnonymousComplaintOrderByWithRelationInput | Prisma.AnonymousComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AnonymousComplaints.
   */
  cursor?: Prisma.AnonymousComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnonymousComplaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnonymousComplaints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AnonymousComplaints.
   */
  distinct?: Prisma.AnonymousComplaintScalarFieldEnum | Prisma.AnonymousComplaintScalarFieldEnum[]
}

/**
 * AnonymousComplaint findMany
 */
export type AnonymousComplaintFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * Filter, which AnonymousComplaints to fetch.
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnonymousComplaints to fetch.
   */
  orderBy?: Prisma.AnonymousComplaintOrderByWithRelationInput | Prisma.AnonymousComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AnonymousComplaints.
   */
  cursor?: Prisma.AnonymousComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnonymousComplaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnonymousComplaints.
   */
  skip?: number
  distinct?: Prisma.AnonymousComplaintScalarFieldEnum | Prisma.AnonymousComplaintScalarFieldEnum[]
}

/**
 * AnonymousComplaint create
 */
export type AnonymousComplaintCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * The data needed to create a AnonymousComplaint.
   */
  data: Prisma.XOR<Prisma.AnonymousComplaintCreateInput, Prisma.AnonymousComplaintUncheckedCreateInput>
}

/**
 * AnonymousComplaint createMany
 */
export type AnonymousComplaintCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AnonymousComplaints.
   */
  data: Prisma.AnonymousComplaintCreateManyInput | Prisma.AnonymousComplaintCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AnonymousComplaint createManyAndReturn
 */
export type AnonymousComplaintCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * The data used to create many AnonymousComplaints.
   */
  data: Prisma.AnonymousComplaintCreateManyInput | Prisma.AnonymousComplaintCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AnonymousComplaint update
 */
export type AnonymousComplaintUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * The data needed to update a AnonymousComplaint.
   */
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateInput, Prisma.AnonymousComplaintUncheckedUpdateInput>
  /**
   * Choose, which AnonymousComplaint to update.
   */
  where: Prisma.AnonymousComplaintWhereUniqueInput
}

/**
 * AnonymousComplaint updateMany
 */
export type AnonymousComplaintUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AnonymousComplaints.
   */
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateManyMutationInput, Prisma.AnonymousComplaintUncheckedUpdateManyInput>
  /**
   * Filter which AnonymousComplaints to update
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * Limit how many AnonymousComplaints to update.
   */
  limit?: number
}

/**
 * AnonymousComplaint updateManyAndReturn
 */
export type AnonymousComplaintUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * The data used to update AnonymousComplaints.
   */
  data: Prisma.XOR<Prisma.AnonymousComplaintUpdateManyMutationInput, Prisma.AnonymousComplaintUncheckedUpdateManyInput>
  /**
   * Filter which AnonymousComplaints to update
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * Limit how many AnonymousComplaints to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AnonymousComplaint upsert
 */
export type AnonymousComplaintUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * The filter to search for the AnonymousComplaint to update in case it exists.
   */
  where: Prisma.AnonymousComplaintWhereUniqueInput
  /**
   * In case the AnonymousComplaint found by the `where` argument doesn't exist, create a new AnonymousComplaint with this data.
   */
  create: Prisma.XOR<Prisma.AnonymousComplaintCreateInput, Prisma.AnonymousComplaintUncheckedCreateInput>
  /**
   * In case the AnonymousComplaint was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AnonymousComplaintUpdateInput, Prisma.AnonymousComplaintUncheckedUpdateInput>
}

/**
 * AnonymousComplaint delete
 */
export type AnonymousComplaintDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
  /**
   * Filter which AnonymousComplaint to delete.
   */
  where: Prisma.AnonymousComplaintWhereUniqueInput
}

/**
 * AnonymousComplaint deleteMany
 */
export type AnonymousComplaintDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AnonymousComplaints to delete
   */
  where?: Prisma.AnonymousComplaintWhereInput
  /**
   * Limit how many AnonymousComplaints to delete.
   */
  limit?: number
}

/**
 * AnonymousComplaint.ComplaintStatusTimeline
 */
export type AnonymousComplaint$ComplaintStatusTimelineArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplaintStatusTimeline
   */
  select?: Prisma.ComplaintStatusTimelineSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ComplaintStatusTimeline
   */
  omit?: Prisma.ComplaintStatusTimelineOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintStatusTimelineInclude<ExtArgs> | null
  where?: Prisma.ComplaintStatusTimelineWhereInput
  orderBy?: Prisma.ComplaintStatusTimelineOrderByWithRelationInput | Prisma.ComplaintStatusTimelineOrderByWithRelationInput[]
  cursor?: Prisma.ComplaintStatusTimelineWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ComplaintStatusTimelineScalarFieldEnum | Prisma.ComplaintStatusTimelineScalarFieldEnum[]
}

/**
 * AnonymousComplaint.academicYear
 */
export type AnonymousComplaint$academicYearArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  where?: Prisma.AcademicYearWhereInput
}

/**
 * AnonymousComplaint without action
 */
export type AnonymousComplaintDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnonymousComplaint
   */
  select?: Prisma.AnonymousComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnonymousComplaint
   */
  omit?: Prisma.AnonymousComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnonymousComplaintInclude<ExtArgs> | null
}
