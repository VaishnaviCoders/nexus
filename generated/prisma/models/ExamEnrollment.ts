
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ExamEnrollment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExamEnrollment
 * 
 */
export type ExamEnrollmentModel = runtime.Types.Result.DefaultSelection<Prisma.$ExamEnrollmentPayload>

export type AggregateExamEnrollment = {
  _count: ExamEnrollmentCountAggregateOutputType | null
  _min: ExamEnrollmentMinAggregateOutputType | null
  _max: ExamEnrollmentMaxAggregateOutputType | null
}

export type ExamEnrollmentMinAggregateOutputType = {
  id: string | null
  studentId: string | null
  examId: string | null
  status: $Enums.StudentExamStatus | null
  enrolledAt: Date | null
  exemptionReason: string | null
}

export type ExamEnrollmentMaxAggregateOutputType = {
  id: string | null
  studentId: string | null
  examId: string | null
  status: $Enums.StudentExamStatus | null
  enrolledAt: Date | null
  exemptionReason: string | null
}

export type ExamEnrollmentCountAggregateOutputType = {
  id: number
  studentId: number
  examId: number
  status: number
  enrolledAt: number
  exemptionReason: number
  _all: number
}


export type ExamEnrollmentMinAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  status?: true
  enrolledAt?: true
  exemptionReason?: true
}

export type ExamEnrollmentMaxAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  status?: true
  enrolledAt?: true
  exemptionReason?: true
}

export type ExamEnrollmentCountAggregateInputType = {
  id?: true
  studentId?: true
  examId?: true
  status?: true
  enrolledAt?: true
  exemptionReason?: true
  _all?: true
}

export type ExamEnrollmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExamEnrollment to aggregate.
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamEnrollments to fetch.
   */
  orderBy?: Prisma.ExamEnrollmentOrderByWithRelationInput | Prisma.ExamEnrollmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExamEnrollmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamEnrollments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamEnrollments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExamEnrollments
  **/
  _count?: true | ExamEnrollmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExamEnrollmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExamEnrollmentMaxAggregateInputType
}

export type GetExamEnrollmentAggregateType<T extends ExamEnrollmentAggregateArgs> = {
      [P in keyof T & keyof AggregateExamEnrollment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExamEnrollment[P]>
    : Prisma.GetScalarType<T[P], AggregateExamEnrollment[P]>
}




export type ExamEnrollmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamEnrollmentWhereInput
  orderBy?: Prisma.ExamEnrollmentOrderByWithAggregationInput | Prisma.ExamEnrollmentOrderByWithAggregationInput[]
  by: Prisma.ExamEnrollmentScalarFieldEnum[] | Prisma.ExamEnrollmentScalarFieldEnum
  having?: Prisma.ExamEnrollmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExamEnrollmentCountAggregateInputType | true
  _min?: ExamEnrollmentMinAggregateInputType
  _max?: ExamEnrollmentMaxAggregateInputType
}

export type ExamEnrollmentGroupByOutputType = {
  id: string
  studentId: string
  examId: string
  status: $Enums.StudentExamStatus
  enrolledAt: Date
  exemptionReason: string | null
  _count: ExamEnrollmentCountAggregateOutputType | null
  _min: ExamEnrollmentMinAggregateOutputType | null
  _max: ExamEnrollmentMaxAggregateOutputType | null
}

type GetExamEnrollmentGroupByPayload<T extends ExamEnrollmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExamEnrollmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExamEnrollmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExamEnrollmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExamEnrollmentGroupByOutputType[P]>
      }
    >
  >



export type ExamEnrollmentWhereInput = {
  AND?: Prisma.ExamEnrollmentWhereInput | Prisma.ExamEnrollmentWhereInput[]
  OR?: Prisma.ExamEnrollmentWhereInput[]
  NOT?: Prisma.ExamEnrollmentWhereInput | Prisma.ExamEnrollmentWhereInput[]
  id?: Prisma.StringFilter<"ExamEnrollment"> | string
  studentId?: Prisma.StringFilter<"ExamEnrollment"> | string
  examId?: Prisma.StringFilter<"ExamEnrollment"> | string
  status?: Prisma.EnumStudentExamStatusFilter<"ExamEnrollment"> | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFilter<"ExamEnrollment"> | Date | string
  exemptionReason?: Prisma.StringNullableFilter<"ExamEnrollment"> | string | null
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamScalarRelationFilter, Prisma.ExamWhereInput>
}

export type ExamEnrollmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enrolledAt?: Prisma.SortOrder
  exemptionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  student?: Prisma.StudentOrderByWithRelationInput
  exam?: Prisma.ExamOrderByWithRelationInput
}

export type ExamEnrollmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  studentId_examId?: Prisma.ExamEnrollmentStudentIdExamIdCompoundUniqueInput
  AND?: Prisma.ExamEnrollmentWhereInput | Prisma.ExamEnrollmentWhereInput[]
  OR?: Prisma.ExamEnrollmentWhereInput[]
  NOT?: Prisma.ExamEnrollmentWhereInput | Prisma.ExamEnrollmentWhereInput[]
  studentId?: Prisma.StringFilter<"ExamEnrollment"> | string
  examId?: Prisma.StringFilter<"ExamEnrollment"> | string
  status?: Prisma.EnumStudentExamStatusFilter<"ExamEnrollment"> | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFilter<"ExamEnrollment"> | Date | string
  exemptionReason?: Prisma.StringNullableFilter<"ExamEnrollment"> | string | null
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamScalarRelationFilter, Prisma.ExamWhereInput>
}, "id" | "studentId_examId">

export type ExamEnrollmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enrolledAt?: Prisma.SortOrder
  exemptionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ExamEnrollmentCountOrderByAggregateInput
  _max?: Prisma.ExamEnrollmentMaxOrderByAggregateInput
  _min?: Prisma.ExamEnrollmentMinOrderByAggregateInput
}

export type ExamEnrollmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExamEnrollmentScalarWhereWithAggregatesInput | Prisma.ExamEnrollmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExamEnrollmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExamEnrollmentScalarWhereWithAggregatesInput | Prisma.ExamEnrollmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExamEnrollment"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"ExamEnrollment"> | string
  examId?: Prisma.StringWithAggregatesFilter<"ExamEnrollment"> | string
  status?: Prisma.EnumStudentExamStatusWithAggregatesFilter<"ExamEnrollment"> | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeWithAggregatesFilter<"ExamEnrollment"> | Date | string
  exemptionReason?: Prisma.StringNullableWithAggregatesFilter<"ExamEnrollment"> | string | null
}

export type ExamEnrollmentCreateInput = {
  id?: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
  student: Prisma.StudentCreateNestedOneWithoutExamEnrollmentInput
  exam: Prisma.ExamCreateNestedOneWithoutExamEnrollmentInput
}

export type ExamEnrollmentUncheckedCreateInput = {
  id?: string
  studentId: string
  examId: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
}

export type ExamEnrollmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  student?: Prisma.StudentUpdateOneRequiredWithoutExamEnrollmentNestedInput
  exam?: Prisma.ExamUpdateOneRequiredWithoutExamEnrollmentNestedInput
}

export type ExamEnrollmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ExamEnrollmentCreateManyInput = {
  id?: string
  studentId: string
  examId: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
}

export type ExamEnrollmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ExamEnrollmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ExamEnrollmentListRelationFilter = {
  every?: Prisma.ExamEnrollmentWhereInput
  some?: Prisma.ExamEnrollmentWhereInput
  none?: Prisma.ExamEnrollmentWhereInput
}

export type ExamEnrollmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExamEnrollmentStudentIdExamIdCompoundUniqueInput = {
  studentId: string
  examId: string
}

export type ExamEnrollmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enrolledAt?: Prisma.SortOrder
  exemptionReason?: Prisma.SortOrder
}

export type ExamEnrollmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enrolledAt?: Prisma.SortOrder
  exemptionReason?: Prisma.SortOrder
}

export type ExamEnrollmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enrolledAt?: Prisma.SortOrder
  exemptionReason?: Prisma.SortOrder
}

export type ExamEnrollmentCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput> | Prisma.ExamEnrollmentCreateWithoutStudentInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput | Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyStudentInputEnvelope
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
}

export type ExamEnrollmentUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput> | Prisma.ExamEnrollmentCreateWithoutStudentInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput | Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyStudentInputEnvelope
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
}

export type ExamEnrollmentUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput> | Prisma.ExamEnrollmentCreateWithoutStudentInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput | Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutStudentInput | Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyStudentInputEnvelope
  set?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  disconnect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  delete?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  update?: Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutStudentInput | Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ExamEnrollmentUpdateManyWithWhereWithoutStudentInput | Prisma.ExamEnrollmentUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ExamEnrollmentScalarWhereInput | Prisma.ExamEnrollmentScalarWhereInput[]
}

export type ExamEnrollmentUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput> | Prisma.ExamEnrollmentCreateWithoutStudentInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput | Prisma.ExamEnrollmentCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutStudentInput | Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyStudentInputEnvelope
  set?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  disconnect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  delete?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  update?: Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutStudentInput | Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ExamEnrollmentUpdateManyWithWhereWithoutStudentInput | Prisma.ExamEnrollmentUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ExamEnrollmentScalarWhereInput | Prisma.ExamEnrollmentScalarWhereInput[]
}

export type ExamEnrollmentCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutExamInput, Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput> | Prisma.ExamEnrollmentCreateWithoutExamInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput | Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyExamInputEnvelope
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
}

export type ExamEnrollmentUncheckedCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutExamInput, Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput> | Prisma.ExamEnrollmentCreateWithoutExamInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput | Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyExamInputEnvelope
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
}

export type ExamEnrollmentUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutExamInput, Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput> | Prisma.ExamEnrollmentCreateWithoutExamInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput | Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutExamInput | Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyExamInputEnvelope
  set?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  disconnect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  delete?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  update?: Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutExamInput | Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.ExamEnrollmentUpdateManyWithWhereWithoutExamInput | Prisma.ExamEnrollmentUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.ExamEnrollmentScalarWhereInput | Prisma.ExamEnrollmentScalarWhereInput[]
}

export type ExamEnrollmentUncheckedUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutExamInput, Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput> | Prisma.ExamEnrollmentCreateWithoutExamInput[] | Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput | Prisma.ExamEnrollmentCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutExamInput | Prisma.ExamEnrollmentUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.ExamEnrollmentCreateManyExamInputEnvelope
  set?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  disconnect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  delete?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  connect?: Prisma.ExamEnrollmentWhereUniqueInput | Prisma.ExamEnrollmentWhereUniqueInput[]
  update?: Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutExamInput | Prisma.ExamEnrollmentUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.ExamEnrollmentUpdateManyWithWhereWithoutExamInput | Prisma.ExamEnrollmentUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.ExamEnrollmentScalarWhereInput | Prisma.ExamEnrollmentScalarWhereInput[]
}

export type EnumStudentExamStatusFieldUpdateOperationsInput = {
  set?: $Enums.StudentExamStatus
}

export type ExamEnrollmentCreateWithoutStudentInput = {
  id?: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
  exam: Prisma.ExamCreateNestedOneWithoutExamEnrollmentInput
}

export type ExamEnrollmentUncheckedCreateWithoutStudentInput = {
  id?: string
  examId: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
}

export type ExamEnrollmentCreateOrConnectWithoutStudentInput = {
  where: Prisma.ExamEnrollmentWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput>
}

export type ExamEnrollmentCreateManyStudentInputEnvelope = {
  data: Prisma.ExamEnrollmentCreateManyStudentInput | Prisma.ExamEnrollmentCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type ExamEnrollmentUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ExamEnrollmentWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamEnrollmentUpdateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedCreateWithoutStudentInput>
}

export type ExamEnrollmentUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ExamEnrollmentWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateWithoutStudentInput, Prisma.ExamEnrollmentUncheckedUpdateWithoutStudentInput>
}

export type ExamEnrollmentUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ExamEnrollmentScalarWhereInput
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateManyMutationInput, Prisma.ExamEnrollmentUncheckedUpdateManyWithoutStudentInput>
}

export type ExamEnrollmentScalarWhereInput = {
  AND?: Prisma.ExamEnrollmentScalarWhereInput | Prisma.ExamEnrollmentScalarWhereInput[]
  OR?: Prisma.ExamEnrollmentScalarWhereInput[]
  NOT?: Prisma.ExamEnrollmentScalarWhereInput | Prisma.ExamEnrollmentScalarWhereInput[]
  id?: Prisma.StringFilter<"ExamEnrollment"> | string
  studentId?: Prisma.StringFilter<"ExamEnrollment"> | string
  examId?: Prisma.StringFilter<"ExamEnrollment"> | string
  status?: Prisma.EnumStudentExamStatusFilter<"ExamEnrollment"> | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFilter<"ExamEnrollment"> | Date | string
  exemptionReason?: Prisma.StringNullableFilter<"ExamEnrollment"> | string | null
}

export type ExamEnrollmentCreateWithoutExamInput = {
  id?: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
  student: Prisma.StudentCreateNestedOneWithoutExamEnrollmentInput
}

export type ExamEnrollmentUncheckedCreateWithoutExamInput = {
  id?: string
  studentId: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
}

export type ExamEnrollmentCreateOrConnectWithoutExamInput = {
  where: Prisma.ExamEnrollmentWhereUniqueInput
  create: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutExamInput, Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput>
}

export type ExamEnrollmentCreateManyExamInputEnvelope = {
  data: Prisma.ExamEnrollmentCreateManyExamInput | Prisma.ExamEnrollmentCreateManyExamInput[]
  skipDuplicates?: boolean
}

export type ExamEnrollmentUpsertWithWhereUniqueWithoutExamInput = {
  where: Prisma.ExamEnrollmentWhereUniqueInput
  update: Prisma.XOR<Prisma.ExamEnrollmentUpdateWithoutExamInput, Prisma.ExamEnrollmentUncheckedUpdateWithoutExamInput>
  create: Prisma.XOR<Prisma.ExamEnrollmentCreateWithoutExamInput, Prisma.ExamEnrollmentUncheckedCreateWithoutExamInput>
}

export type ExamEnrollmentUpdateWithWhereUniqueWithoutExamInput = {
  where: Prisma.ExamEnrollmentWhereUniqueInput
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateWithoutExamInput, Prisma.ExamEnrollmentUncheckedUpdateWithoutExamInput>
}

export type ExamEnrollmentUpdateManyWithWhereWithoutExamInput = {
  where: Prisma.ExamEnrollmentScalarWhereInput
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateManyMutationInput, Prisma.ExamEnrollmentUncheckedUpdateManyWithoutExamInput>
}

export type ExamEnrollmentCreateManyStudentInput = {
  id?: string
  examId: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
}

export type ExamEnrollmentUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  exam?: Prisma.ExamUpdateOneRequiredWithoutExamEnrollmentNestedInput
}

export type ExamEnrollmentUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ExamEnrollmentUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ExamEnrollmentCreateManyExamInput = {
  id?: string
  studentId: string
  status?: $Enums.StudentExamStatus
  enrolledAt?: Date | string
  exemptionReason?: string | null
}

export type ExamEnrollmentUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  student?: Prisma.StudentUpdateOneRequiredWithoutExamEnrollmentNestedInput
}

export type ExamEnrollmentUncheckedUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ExamEnrollmentUncheckedUpdateManyWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStudentExamStatusFieldUpdateOperationsInput | $Enums.StudentExamStatus
  enrolledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exemptionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type ExamEnrollmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  status?: boolean
  enrolledAt?: boolean
  exemptionReason?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examEnrollment"]>

export type ExamEnrollmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  status?: boolean
  enrolledAt?: boolean
  exemptionReason?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examEnrollment"]>

export type ExamEnrollmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  examId?: boolean
  status?: boolean
  enrolledAt?: boolean
  exemptionReason?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}, ExtArgs["result"]["examEnrollment"]>

export type ExamEnrollmentSelectScalar = {
  id?: boolean
  studentId?: boolean
  examId?: boolean
  status?: boolean
  enrolledAt?: boolean
  exemptionReason?: boolean
}

export type ExamEnrollmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "studentId" | "examId" | "status" | "enrolledAt" | "exemptionReason", ExtArgs["result"]["examEnrollment"]>
export type ExamEnrollmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}
export type ExamEnrollmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}
export type ExamEnrollmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.ExamDefaultArgs<ExtArgs>
}

export type $ExamEnrollmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExamEnrollment"
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>
    exam: Prisma.$ExamPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    studentId: string
    examId: string
    status: $Enums.StudentExamStatus
    enrolledAt: Date
    exemptionReason: string | null
  }, ExtArgs["result"]["examEnrollment"]>
  composites: {}
}

export type ExamEnrollmentGetPayload<S extends boolean | null | undefined | ExamEnrollmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload, S>

export type ExamEnrollmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExamEnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExamEnrollmentCountAggregateInputType | true
  }

export interface ExamEnrollmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamEnrollment'], meta: { name: 'ExamEnrollment' } }
  /**
   * Find zero or one ExamEnrollment that matches the filter.
   * @param {ExamEnrollmentFindUniqueArgs} args - Arguments to find a ExamEnrollment
   * @example
   * // Get one ExamEnrollment
   * const examEnrollment = await prisma.examEnrollment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExamEnrollmentFindUniqueArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExamEnrollment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExamEnrollmentFindUniqueOrThrowArgs} args - Arguments to find a ExamEnrollment
   * @example
   * // Get one ExamEnrollment
   * const examEnrollment = await prisma.examEnrollment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExamEnrollmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExamEnrollment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentFindFirstArgs} args - Arguments to find a ExamEnrollment
   * @example
   * // Get one ExamEnrollment
   * const examEnrollment = await prisma.examEnrollment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExamEnrollmentFindFirstArgs>(args?: Prisma.SelectSubset<T, ExamEnrollmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExamEnrollment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentFindFirstOrThrowArgs} args - Arguments to find a ExamEnrollment
   * @example
   * // Get one ExamEnrollment
   * const examEnrollment = await prisma.examEnrollment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExamEnrollmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExamEnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExamEnrollments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExamEnrollments
   * const examEnrollments = await prisma.examEnrollment.findMany()
   * 
   * // Get first 10 ExamEnrollments
   * const examEnrollments = await prisma.examEnrollment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const examEnrollmentWithIdOnly = await prisma.examEnrollment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExamEnrollmentFindManyArgs>(args?: Prisma.SelectSubset<T, ExamEnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExamEnrollment.
   * @param {ExamEnrollmentCreateArgs} args - Arguments to create a ExamEnrollment.
   * @example
   * // Create one ExamEnrollment
   * const ExamEnrollment = await prisma.examEnrollment.create({
   *   data: {
   *     // ... data to create a ExamEnrollment
   *   }
   * })
   * 
   */
  create<T extends ExamEnrollmentCreateArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentCreateArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExamEnrollments.
   * @param {ExamEnrollmentCreateManyArgs} args - Arguments to create many ExamEnrollments.
   * @example
   * // Create many ExamEnrollments
   * const examEnrollment = await prisma.examEnrollment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExamEnrollmentCreateManyArgs>(args?: Prisma.SelectSubset<T, ExamEnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExamEnrollments and returns the data saved in the database.
   * @param {ExamEnrollmentCreateManyAndReturnArgs} args - Arguments to create many ExamEnrollments.
   * @example
   * // Create many ExamEnrollments
   * const examEnrollment = await prisma.examEnrollment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExamEnrollments and only return the `id`
   * const examEnrollmentWithIdOnly = await prisma.examEnrollment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExamEnrollmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExamEnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExamEnrollment.
   * @param {ExamEnrollmentDeleteArgs} args - Arguments to delete one ExamEnrollment.
   * @example
   * // Delete one ExamEnrollment
   * const ExamEnrollment = await prisma.examEnrollment.delete({
   *   where: {
   *     // ... filter to delete one ExamEnrollment
   *   }
   * })
   * 
   */
  delete<T extends ExamEnrollmentDeleteArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentDeleteArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExamEnrollment.
   * @param {ExamEnrollmentUpdateArgs} args - Arguments to update one ExamEnrollment.
   * @example
   * // Update one ExamEnrollment
   * const examEnrollment = await prisma.examEnrollment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExamEnrollmentUpdateArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentUpdateArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExamEnrollments.
   * @param {ExamEnrollmentDeleteManyArgs} args - Arguments to filter ExamEnrollments to delete.
   * @example
   * // Delete a few ExamEnrollments
   * const { count } = await prisma.examEnrollment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExamEnrollmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExamEnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExamEnrollments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExamEnrollments
   * const examEnrollment = await prisma.examEnrollment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExamEnrollmentUpdateManyArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExamEnrollments and returns the data updated in the database.
   * @param {ExamEnrollmentUpdateManyAndReturnArgs} args - Arguments to update many ExamEnrollments.
   * @example
   * // Update many ExamEnrollments
   * const examEnrollment = await prisma.examEnrollment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExamEnrollments and only return the `id`
   * const examEnrollmentWithIdOnly = await prisma.examEnrollment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExamEnrollmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExamEnrollment.
   * @param {ExamEnrollmentUpsertArgs} args - Arguments to update or create a ExamEnrollment.
   * @example
   * // Update or create a ExamEnrollment
   * const examEnrollment = await prisma.examEnrollment.upsert({
   *   create: {
   *     // ... data to create a ExamEnrollment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExamEnrollment we want to update
   *   }
   * })
   */
  upsert<T extends ExamEnrollmentUpsertArgs>(args: Prisma.SelectSubset<T, ExamEnrollmentUpsertArgs<ExtArgs>>): Prisma.Prisma__ExamEnrollmentClient<runtime.Types.Result.GetResult<Prisma.$ExamEnrollmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExamEnrollments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentCountArgs} args - Arguments to filter ExamEnrollments to count.
   * @example
   * // Count the number of ExamEnrollments
   * const count = await prisma.examEnrollment.count({
   *   where: {
   *     // ... the filter for the ExamEnrollments we want to count
   *   }
   * })
  **/
  count<T extends ExamEnrollmentCountArgs>(
    args?: Prisma.Subset<T, ExamEnrollmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExamEnrollmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExamEnrollment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExamEnrollmentAggregateArgs>(args: Prisma.Subset<T, ExamEnrollmentAggregateArgs>): Prisma.PrismaPromise<GetExamEnrollmentAggregateType<T>>

  /**
   * Group by ExamEnrollment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamEnrollmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExamEnrollmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExamEnrollmentGroupByArgs['orderBy'] }
      : { orderBy?: ExamEnrollmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExamEnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExamEnrollment model
 */
readonly fields: ExamEnrollmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExamEnrollment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExamEnrollmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  exam<T extends Prisma.ExamDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExamDefaultArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExamEnrollment model
 */
export interface ExamEnrollmentFieldRefs {
  readonly id: Prisma.FieldRef<"ExamEnrollment", 'String'>
  readonly studentId: Prisma.FieldRef<"ExamEnrollment", 'String'>
  readonly examId: Prisma.FieldRef<"ExamEnrollment", 'String'>
  readonly status: Prisma.FieldRef<"ExamEnrollment", 'StudentExamStatus'>
  readonly enrolledAt: Prisma.FieldRef<"ExamEnrollment", 'DateTime'>
  readonly exemptionReason: Prisma.FieldRef<"ExamEnrollment", 'String'>
}
    

// Custom InputTypes
/**
 * ExamEnrollment findUnique
 */
export type ExamEnrollmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * Filter, which ExamEnrollment to fetch.
   */
  where: Prisma.ExamEnrollmentWhereUniqueInput
}

/**
 * ExamEnrollment findUniqueOrThrow
 */
export type ExamEnrollmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * Filter, which ExamEnrollment to fetch.
   */
  where: Prisma.ExamEnrollmentWhereUniqueInput
}

/**
 * ExamEnrollment findFirst
 */
export type ExamEnrollmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * Filter, which ExamEnrollment to fetch.
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamEnrollments to fetch.
   */
  orderBy?: Prisma.ExamEnrollmentOrderByWithRelationInput | Prisma.ExamEnrollmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExamEnrollments.
   */
  cursor?: Prisma.ExamEnrollmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamEnrollments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamEnrollments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExamEnrollments.
   */
  distinct?: Prisma.ExamEnrollmentScalarFieldEnum | Prisma.ExamEnrollmentScalarFieldEnum[]
}

/**
 * ExamEnrollment findFirstOrThrow
 */
export type ExamEnrollmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * Filter, which ExamEnrollment to fetch.
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamEnrollments to fetch.
   */
  orderBy?: Prisma.ExamEnrollmentOrderByWithRelationInput | Prisma.ExamEnrollmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExamEnrollments.
   */
  cursor?: Prisma.ExamEnrollmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamEnrollments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamEnrollments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExamEnrollments.
   */
  distinct?: Prisma.ExamEnrollmentScalarFieldEnum | Prisma.ExamEnrollmentScalarFieldEnum[]
}

/**
 * ExamEnrollment findMany
 */
export type ExamEnrollmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * Filter, which ExamEnrollments to fetch.
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExamEnrollments to fetch.
   */
  orderBy?: Prisma.ExamEnrollmentOrderByWithRelationInput | Prisma.ExamEnrollmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExamEnrollments.
   */
  cursor?: Prisma.ExamEnrollmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExamEnrollments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExamEnrollments.
   */
  skip?: number
  distinct?: Prisma.ExamEnrollmentScalarFieldEnum | Prisma.ExamEnrollmentScalarFieldEnum[]
}

/**
 * ExamEnrollment create
 */
export type ExamEnrollmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * The data needed to create a ExamEnrollment.
   */
  data: Prisma.XOR<Prisma.ExamEnrollmentCreateInput, Prisma.ExamEnrollmentUncheckedCreateInput>
}

/**
 * ExamEnrollment createMany
 */
export type ExamEnrollmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExamEnrollments.
   */
  data: Prisma.ExamEnrollmentCreateManyInput | Prisma.ExamEnrollmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExamEnrollment createManyAndReturn
 */
export type ExamEnrollmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * The data used to create many ExamEnrollments.
   */
  data: Prisma.ExamEnrollmentCreateManyInput | Prisma.ExamEnrollmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExamEnrollment update
 */
export type ExamEnrollmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * The data needed to update a ExamEnrollment.
   */
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateInput, Prisma.ExamEnrollmentUncheckedUpdateInput>
  /**
   * Choose, which ExamEnrollment to update.
   */
  where: Prisma.ExamEnrollmentWhereUniqueInput
}

/**
 * ExamEnrollment updateMany
 */
export type ExamEnrollmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExamEnrollments.
   */
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateManyMutationInput, Prisma.ExamEnrollmentUncheckedUpdateManyInput>
  /**
   * Filter which ExamEnrollments to update
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * Limit how many ExamEnrollments to update.
   */
  limit?: number
}

/**
 * ExamEnrollment updateManyAndReturn
 */
export type ExamEnrollmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * The data used to update ExamEnrollments.
   */
  data: Prisma.XOR<Prisma.ExamEnrollmentUpdateManyMutationInput, Prisma.ExamEnrollmentUncheckedUpdateManyInput>
  /**
   * Filter which ExamEnrollments to update
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * Limit how many ExamEnrollments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExamEnrollment upsert
 */
export type ExamEnrollmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * The filter to search for the ExamEnrollment to update in case it exists.
   */
  where: Prisma.ExamEnrollmentWhereUniqueInput
  /**
   * In case the ExamEnrollment found by the `where` argument doesn't exist, create a new ExamEnrollment with this data.
   */
  create: Prisma.XOR<Prisma.ExamEnrollmentCreateInput, Prisma.ExamEnrollmentUncheckedCreateInput>
  /**
   * In case the ExamEnrollment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExamEnrollmentUpdateInput, Prisma.ExamEnrollmentUncheckedUpdateInput>
}

/**
 * ExamEnrollment delete
 */
export type ExamEnrollmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
  /**
   * Filter which ExamEnrollment to delete.
   */
  where: Prisma.ExamEnrollmentWhereUniqueInput
}

/**
 * ExamEnrollment deleteMany
 */
export type ExamEnrollmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExamEnrollments to delete
   */
  where?: Prisma.ExamEnrollmentWhereInput
  /**
   * Limit how many ExamEnrollments to delete.
   */
  limit?: number
}

/**
 * ExamEnrollment without action
 */
export type ExamEnrollmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExamEnrollment
   */
  select?: Prisma.ExamEnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExamEnrollment
   */
  omit?: Prisma.ExamEnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamEnrollmentInclude<ExtArgs> | null
}
