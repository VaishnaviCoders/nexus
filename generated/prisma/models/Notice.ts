
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Notice` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Notice
 * 
 */
export type NoticeModel = runtime.Types.Result.DefaultSelection<Prisma.$NoticePayload>

export type AggregateNotice = {
  _count: NoticeCountAggregateOutputType | null
  _min: NoticeMinAggregateOutputType | null
  _max: NoticeMaxAggregateOutputType | null
}

export type NoticeMinAggregateOutputType = {
  id: string | null
  title: string | null
  content: string | null
  summary: string | null
  startDate: Date | null
  endDate: Date | null
  noticeType: $Enums.NoticeType | null
  priority: $Enums.NoticePriority | null
  status: $Enums.NoticeStatus | null
  createdBy: string | null
  approvedBy: string | null
  approvedAt: Date | null
  publishedBy: string | null
  publishedAt: Date | null
  isUrgent: boolean | null
  emailNotification: boolean | null
  pushNotification: boolean | null
  whatsAppNotification: boolean | null
  smsNotification: boolean | null
  organizationId: string | null
  academicYearId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NoticeMaxAggregateOutputType = {
  id: string | null
  title: string | null
  content: string | null
  summary: string | null
  startDate: Date | null
  endDate: Date | null
  noticeType: $Enums.NoticeType | null
  priority: $Enums.NoticePriority | null
  status: $Enums.NoticeStatus | null
  createdBy: string | null
  approvedBy: string | null
  approvedAt: Date | null
  publishedBy: string | null
  publishedAt: Date | null
  isUrgent: boolean | null
  emailNotification: boolean | null
  pushNotification: boolean | null
  whatsAppNotification: boolean | null
  smsNotification: boolean | null
  organizationId: string | null
  academicYearId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NoticeCountAggregateOutputType = {
  id: number
  title: number
  content: number
  summary: number
  startDate: number
  endDate: number
  noticeType: number
  priority: number
  status: number
  createdBy: number
  approvedBy: number
  approvedAt: number
  publishedBy: number
  publishedAt: number
  isUrgent: number
  emailNotification: number
  pushNotification: number
  whatsAppNotification: number
  smsNotification: number
  targetAudience: number
  organizationId: number
  academicYearId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type NoticeMinAggregateInputType = {
  id?: true
  title?: true
  content?: true
  summary?: true
  startDate?: true
  endDate?: true
  noticeType?: true
  priority?: true
  status?: true
  createdBy?: true
  approvedBy?: true
  approvedAt?: true
  publishedBy?: true
  publishedAt?: true
  isUrgent?: true
  emailNotification?: true
  pushNotification?: true
  whatsAppNotification?: true
  smsNotification?: true
  organizationId?: true
  academicYearId?: true
  createdAt?: true
  updatedAt?: true
}

export type NoticeMaxAggregateInputType = {
  id?: true
  title?: true
  content?: true
  summary?: true
  startDate?: true
  endDate?: true
  noticeType?: true
  priority?: true
  status?: true
  createdBy?: true
  approvedBy?: true
  approvedAt?: true
  publishedBy?: true
  publishedAt?: true
  isUrgent?: true
  emailNotification?: true
  pushNotification?: true
  whatsAppNotification?: true
  smsNotification?: true
  organizationId?: true
  academicYearId?: true
  createdAt?: true
  updatedAt?: true
}

export type NoticeCountAggregateInputType = {
  id?: true
  title?: true
  content?: true
  summary?: true
  startDate?: true
  endDate?: true
  noticeType?: true
  priority?: true
  status?: true
  createdBy?: true
  approvedBy?: true
  approvedAt?: true
  publishedBy?: true
  publishedAt?: true
  isUrgent?: true
  emailNotification?: true
  pushNotification?: true
  whatsAppNotification?: true
  smsNotification?: true
  targetAudience?: true
  organizationId?: true
  academicYearId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NoticeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Notice to aggregate.
   */
  where?: Prisma.NoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notices to fetch.
   */
  orderBy?: Prisma.NoticeOrderByWithRelationInput | Prisma.NoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Notices
  **/
  _count?: true | NoticeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NoticeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NoticeMaxAggregateInputType
}

export type GetNoticeAggregateType<T extends NoticeAggregateArgs> = {
      [P in keyof T & keyof AggregateNotice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotice[P]>
    : Prisma.GetScalarType<T[P], AggregateNotice[P]>
}




export type NoticeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoticeWhereInput
  orderBy?: Prisma.NoticeOrderByWithAggregationInput | Prisma.NoticeOrderByWithAggregationInput[]
  by: Prisma.NoticeScalarFieldEnum[] | Prisma.NoticeScalarFieldEnum
  having?: Prisma.NoticeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NoticeCountAggregateInputType | true
  _min?: NoticeMinAggregateInputType
  _max?: NoticeMaxAggregateInputType
}

export type NoticeGroupByOutputType = {
  id: string
  title: string
  content: string
  summary: string | null
  startDate: Date
  endDate: Date
  noticeType: $Enums.NoticeType
  priority: $Enums.NoticePriority
  status: $Enums.NoticeStatus
  createdBy: string
  approvedBy: string | null
  approvedAt: Date | null
  publishedBy: string | null
  publishedAt: Date | null
  isUrgent: boolean
  emailNotification: boolean
  pushNotification: boolean
  whatsAppNotification: boolean
  smsNotification: boolean
  targetAudience: string[]
  organizationId: string
  academicYearId: string | null
  createdAt: Date
  updatedAt: Date
  _count: NoticeCountAggregateOutputType | null
  _min: NoticeMinAggregateOutputType | null
  _max: NoticeMaxAggregateOutputType | null
}

type GetNoticeGroupByPayload<T extends NoticeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NoticeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NoticeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NoticeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NoticeGroupByOutputType[P]>
      }
    >
  >



export type NoticeWhereInput = {
  AND?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[]
  OR?: Prisma.NoticeWhereInput[]
  NOT?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[]
  id?: Prisma.StringFilter<"Notice"> | string
  title?: Prisma.StringFilter<"Notice"> | string
  content?: Prisma.StringFilter<"Notice"> | string
  summary?: Prisma.StringNullableFilter<"Notice"> | string | null
  startDate?: Prisma.DateTimeFilter<"Notice"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Notice"> | Date | string
  noticeType?: Prisma.EnumNoticeTypeFilter<"Notice"> | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFilter<"Notice"> | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFilter<"Notice"> | $Enums.NoticeStatus
  createdBy?: Prisma.StringFilter<"Notice"> | string
  approvedBy?: Prisma.StringNullableFilter<"Notice"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Notice"> | Date | string | null
  publishedBy?: Prisma.StringNullableFilter<"Notice"> | string | null
  publishedAt?: Prisma.DateTimeNullableFilter<"Notice"> | Date | string | null
  isUrgent?: Prisma.BoolFilter<"Notice"> | boolean
  emailNotification?: Prisma.BoolFilter<"Notice"> | boolean
  pushNotification?: Prisma.BoolFilter<"Notice"> | boolean
  whatsAppNotification?: Prisma.BoolFilter<"Notice"> | boolean
  smsNotification?: Prisma.BoolFilter<"Notice"> | boolean
  targetAudience?: Prisma.StringNullableListFilter<"Notice">
  organizationId?: Prisma.StringFilter<"Notice"> | string
  academicYearId?: Prisma.StringNullableFilter<"Notice"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Notice"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Notice"> | Date | string
  attachments?: Prisma.NoticeAttachmentListRelationFilter
  notifications?: Prisma.NotificationLogListRelationFilter
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}

export type NoticeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  isUrgent?: Prisma.SortOrder
  emailNotification?: Prisma.SortOrder
  pushNotification?: Prisma.SortOrder
  whatsAppNotification?: Prisma.SortOrder
  smsNotification?: Prisma.SortOrder
  targetAudience?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  attachments?: Prisma.NoticeAttachmentOrderByRelationAggregateInput
  notifications?: Prisma.NotificationLogOrderByRelationAggregateInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  _relevance?: Prisma.NoticeOrderByRelevanceInput
}

export type NoticeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[]
  OR?: Prisma.NoticeWhereInput[]
  NOT?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[]
  title?: Prisma.StringFilter<"Notice"> | string
  content?: Prisma.StringFilter<"Notice"> | string
  summary?: Prisma.StringNullableFilter<"Notice"> | string | null
  startDate?: Prisma.DateTimeFilter<"Notice"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Notice"> | Date | string
  noticeType?: Prisma.EnumNoticeTypeFilter<"Notice"> | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFilter<"Notice"> | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFilter<"Notice"> | $Enums.NoticeStatus
  createdBy?: Prisma.StringFilter<"Notice"> | string
  approvedBy?: Prisma.StringNullableFilter<"Notice"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Notice"> | Date | string | null
  publishedBy?: Prisma.StringNullableFilter<"Notice"> | string | null
  publishedAt?: Prisma.DateTimeNullableFilter<"Notice"> | Date | string | null
  isUrgent?: Prisma.BoolFilter<"Notice"> | boolean
  emailNotification?: Prisma.BoolFilter<"Notice"> | boolean
  pushNotification?: Prisma.BoolFilter<"Notice"> | boolean
  whatsAppNotification?: Prisma.BoolFilter<"Notice"> | boolean
  smsNotification?: Prisma.BoolFilter<"Notice"> | boolean
  targetAudience?: Prisma.StringNullableListFilter<"Notice">
  organizationId?: Prisma.StringFilter<"Notice"> | string
  academicYearId?: Prisma.StringNullableFilter<"Notice"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Notice"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Notice"> | Date | string
  attachments?: Prisma.NoticeAttachmentListRelationFilter
  notifications?: Prisma.NotificationLogListRelationFilter
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearNullableScalarRelationFilter, Prisma.AcademicYearWhereInput> | null
}, "id">

export type NoticeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  isUrgent?: Prisma.SortOrder
  emailNotification?: Prisma.SortOrder
  pushNotification?: Prisma.SortOrder
  whatsAppNotification?: Prisma.SortOrder
  smsNotification?: Prisma.SortOrder
  targetAudience?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NoticeCountOrderByAggregateInput
  _max?: Prisma.NoticeMaxOrderByAggregateInput
  _min?: Prisma.NoticeMinOrderByAggregateInput
}

export type NoticeScalarWhereWithAggregatesInput = {
  AND?: Prisma.NoticeScalarWhereWithAggregatesInput | Prisma.NoticeScalarWhereWithAggregatesInput[]
  OR?: Prisma.NoticeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NoticeScalarWhereWithAggregatesInput | Prisma.NoticeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Notice"> | string
  title?: Prisma.StringWithAggregatesFilter<"Notice"> | string
  content?: Prisma.StringWithAggregatesFilter<"Notice"> | string
  summary?: Prisma.StringNullableWithAggregatesFilter<"Notice"> | string | null
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Notice"> | Date | string
  endDate?: Prisma.DateTimeWithAggregatesFilter<"Notice"> | Date | string
  noticeType?: Prisma.EnumNoticeTypeWithAggregatesFilter<"Notice"> | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityWithAggregatesFilter<"Notice"> | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusWithAggregatesFilter<"Notice"> | $Enums.NoticeStatus
  createdBy?: Prisma.StringWithAggregatesFilter<"Notice"> | string
  approvedBy?: Prisma.StringNullableWithAggregatesFilter<"Notice"> | string | null
  approvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Notice"> | Date | string | null
  publishedBy?: Prisma.StringNullableWithAggregatesFilter<"Notice"> | string | null
  publishedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Notice"> | Date | string | null
  isUrgent?: Prisma.BoolWithAggregatesFilter<"Notice"> | boolean
  emailNotification?: Prisma.BoolWithAggregatesFilter<"Notice"> | boolean
  pushNotification?: Prisma.BoolWithAggregatesFilter<"Notice"> | boolean
  whatsAppNotification?: Prisma.BoolWithAggregatesFilter<"Notice"> | boolean
  smsNotification?: Prisma.BoolWithAggregatesFilter<"Notice"> | boolean
  targetAudience?: Prisma.StringNullableListFilter<"Notice">
  organizationId?: Prisma.StringWithAggregatesFilter<"Notice"> | string
  academicYearId?: Prisma.StringNullableWithAggregatesFilter<"Notice"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Notice"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Notice"> | Date | string
}

export type NoticeCreateInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentCreateNestedManyWithoutNoticeInput
  notifications?: Prisma.NotificationLogCreateNestedManyWithoutNoticeInput
  organization: Prisma.OrganizationCreateNestedOneWithoutNoticesInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutNoticesInput
}

export type NoticeUncheckedCreateInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  organizationId: string
  academicYearId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedCreateNestedManyWithoutNoticeInput
  notifications?: Prisma.NotificationLogUncheckedCreateNestedManyWithoutNoticeInput
}

export type NoticeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUpdateManyWithoutNoticeNestedInput
  notifications?: Prisma.NotificationLogUpdateManyWithoutNoticeNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNoticesNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutNoticesNestedInput
}

export type NoticeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedUpdateManyWithoutNoticeNestedInput
  notifications?: Prisma.NotificationLogUncheckedUpdateManyWithoutNoticeNestedInput
}

export type NoticeCreateManyInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  organizationId: string
  academicYearId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoticeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeListRelationFilter = {
  every?: Prisma.NoticeWhereInput
  some?: Prisma.NoticeWhereInput
  none?: Prisma.NoticeWhereInput
}

export type NoticeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NoticeOrderByRelevanceInput = {
  fields: Prisma.NoticeOrderByRelevanceFieldEnum | Prisma.NoticeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type NoticeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  publishedBy?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  isUrgent?: Prisma.SortOrder
  emailNotification?: Prisma.SortOrder
  pushNotification?: Prisma.SortOrder
  whatsAppNotification?: Prisma.SortOrder
  smsNotification?: Prisma.SortOrder
  targetAudience?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoticeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  publishedBy?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  isUrgent?: Prisma.SortOrder
  emailNotification?: Prisma.SortOrder
  pushNotification?: Prisma.SortOrder
  whatsAppNotification?: Prisma.SortOrder
  smsNotification?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoticeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  publishedBy?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  isUrgent?: Prisma.SortOrder
  emailNotification?: Prisma.SortOrder
  pushNotification?: Prisma.SortOrder
  whatsAppNotification?: Prisma.SortOrder
  smsNotification?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoticeScalarRelationFilter = {
  is?: Prisma.NoticeWhereInput
  isNot?: Prisma.NoticeWhereInput
}

export type NoticeNullableScalarRelationFilter = {
  is?: Prisma.NoticeWhereInput | null
  isNot?: Prisma.NoticeWhereInput | null
}

export type NoticeCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutAcademicYearInput, Prisma.NoticeUncheckedCreateWithoutAcademicYearInput> | Prisma.NoticeCreateWithoutAcademicYearInput[] | Prisma.NoticeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutAcademicYearInput | Prisma.NoticeCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.NoticeCreateManyAcademicYearInputEnvelope
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
}

export type NoticeUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutAcademicYearInput, Prisma.NoticeUncheckedCreateWithoutAcademicYearInput> | Prisma.NoticeCreateWithoutAcademicYearInput[] | Prisma.NoticeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutAcademicYearInput | Prisma.NoticeCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.NoticeCreateManyAcademicYearInputEnvelope
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
}

export type NoticeUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutAcademicYearInput, Prisma.NoticeUncheckedCreateWithoutAcademicYearInput> | Prisma.NoticeCreateWithoutAcademicYearInput[] | Prisma.NoticeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutAcademicYearInput | Prisma.NoticeCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.NoticeUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.NoticeUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.NoticeCreateManyAcademicYearInputEnvelope
  set?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  disconnect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  delete?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  update?: Prisma.NoticeUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.NoticeUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.NoticeUpdateManyWithWhereWithoutAcademicYearInput | Prisma.NoticeUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.NoticeScalarWhereInput | Prisma.NoticeScalarWhereInput[]
}

export type NoticeUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutAcademicYearInput, Prisma.NoticeUncheckedCreateWithoutAcademicYearInput> | Prisma.NoticeCreateWithoutAcademicYearInput[] | Prisma.NoticeUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutAcademicYearInput | Prisma.NoticeCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.NoticeUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.NoticeUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.NoticeCreateManyAcademicYearInputEnvelope
  set?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  disconnect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  delete?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  update?: Prisma.NoticeUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.NoticeUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.NoticeUpdateManyWithWhereWithoutAcademicYearInput | Prisma.NoticeUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.NoticeScalarWhereInput | Prisma.NoticeScalarWhereInput[]
}

export type NoticeCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutOrganizationInput, Prisma.NoticeUncheckedCreateWithoutOrganizationInput> | Prisma.NoticeCreateWithoutOrganizationInput[] | Prisma.NoticeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutOrganizationInput | Prisma.NoticeCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.NoticeCreateManyOrganizationInputEnvelope
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
}

export type NoticeUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutOrganizationInput, Prisma.NoticeUncheckedCreateWithoutOrganizationInput> | Prisma.NoticeCreateWithoutOrganizationInput[] | Prisma.NoticeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutOrganizationInput | Prisma.NoticeCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.NoticeCreateManyOrganizationInputEnvelope
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
}

export type NoticeUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutOrganizationInput, Prisma.NoticeUncheckedCreateWithoutOrganizationInput> | Prisma.NoticeCreateWithoutOrganizationInput[] | Prisma.NoticeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutOrganizationInput | Prisma.NoticeCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.NoticeUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.NoticeUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.NoticeCreateManyOrganizationInputEnvelope
  set?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  disconnect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  delete?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  update?: Prisma.NoticeUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.NoticeUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.NoticeUpdateManyWithWhereWithoutOrganizationInput | Prisma.NoticeUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.NoticeScalarWhereInput | Prisma.NoticeScalarWhereInput[]
}

export type NoticeUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutOrganizationInput, Prisma.NoticeUncheckedCreateWithoutOrganizationInput> | Prisma.NoticeCreateWithoutOrganizationInput[] | Prisma.NoticeUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutOrganizationInput | Prisma.NoticeCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.NoticeUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.NoticeUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.NoticeCreateManyOrganizationInputEnvelope
  set?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  disconnect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  delete?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  connect?: Prisma.NoticeWhereUniqueInput | Prisma.NoticeWhereUniqueInput[]
  update?: Prisma.NoticeUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.NoticeUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.NoticeUpdateManyWithWhereWithoutOrganizationInput | Prisma.NoticeUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.NoticeScalarWhereInput | Prisma.NoticeScalarWhereInput[]
}

export type NoticeCreatetargetAudienceInput = {
  set: string[]
}

export type EnumNoticeTypeFieldUpdateOperationsInput = {
  set?: $Enums.NoticeType
}

export type EnumNoticePriorityFieldUpdateOperationsInput = {
  set?: $Enums.NoticePriority
}

export type EnumNoticeStatusFieldUpdateOperationsInput = {
  set?: $Enums.NoticeStatus
}

export type NoticeUpdatetargetAudienceInput = {
  set?: string[]
  push?: string | string[]
}

export type NoticeCreateNestedOneWithoutAttachmentsInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutAttachmentsInput, Prisma.NoticeUncheckedCreateWithoutAttachmentsInput>
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutAttachmentsInput
  connect?: Prisma.NoticeWhereUniqueInput
}

export type NoticeUpdateOneRequiredWithoutAttachmentsNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutAttachmentsInput, Prisma.NoticeUncheckedCreateWithoutAttachmentsInput>
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutAttachmentsInput
  upsert?: Prisma.NoticeUpsertWithoutAttachmentsInput
  connect?: Prisma.NoticeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.NoticeUpdateToOneWithWhereWithoutAttachmentsInput, Prisma.NoticeUpdateWithoutAttachmentsInput>, Prisma.NoticeUncheckedUpdateWithoutAttachmentsInput>
}

export type NoticeCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutNotificationsInput, Prisma.NoticeUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutNotificationsInput
  connect?: Prisma.NoticeWhereUniqueInput
}

export type NoticeUpdateOneWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<Prisma.NoticeCreateWithoutNotificationsInput, Prisma.NoticeUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.NoticeCreateOrConnectWithoutNotificationsInput
  upsert?: Prisma.NoticeUpsertWithoutNotificationsInput
  disconnect?: Prisma.NoticeWhereInput | boolean
  delete?: Prisma.NoticeWhereInput | boolean
  connect?: Prisma.NoticeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.NoticeUpdateToOneWithWhereWithoutNotificationsInput, Prisma.NoticeUpdateWithoutNotificationsInput>, Prisma.NoticeUncheckedUpdateWithoutNotificationsInput>
}

export type NoticeCreateWithoutAcademicYearInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentCreateNestedManyWithoutNoticeInput
  notifications?: Prisma.NotificationLogCreateNestedManyWithoutNoticeInput
  organization: Prisma.OrganizationCreateNestedOneWithoutNoticesInput
}

export type NoticeUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedCreateNestedManyWithoutNoticeInput
  notifications?: Prisma.NotificationLogUncheckedCreateNestedManyWithoutNoticeInput
}

export type NoticeCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.NoticeWhereUniqueInput
  create: Prisma.XOR<Prisma.NoticeCreateWithoutAcademicYearInput, Prisma.NoticeUncheckedCreateWithoutAcademicYearInput>
}

export type NoticeCreateManyAcademicYearInputEnvelope = {
  data: Prisma.NoticeCreateManyAcademicYearInput | Prisma.NoticeCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type NoticeUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.NoticeWhereUniqueInput
  update: Prisma.XOR<Prisma.NoticeUpdateWithoutAcademicYearInput, Prisma.NoticeUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.NoticeCreateWithoutAcademicYearInput, Prisma.NoticeUncheckedCreateWithoutAcademicYearInput>
}

export type NoticeUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.NoticeWhereUniqueInput
  data: Prisma.XOR<Prisma.NoticeUpdateWithoutAcademicYearInput, Prisma.NoticeUncheckedUpdateWithoutAcademicYearInput>
}

export type NoticeUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.NoticeScalarWhereInput
  data: Prisma.XOR<Prisma.NoticeUpdateManyMutationInput, Prisma.NoticeUncheckedUpdateManyWithoutAcademicYearInput>
}

export type NoticeScalarWhereInput = {
  AND?: Prisma.NoticeScalarWhereInput | Prisma.NoticeScalarWhereInput[]
  OR?: Prisma.NoticeScalarWhereInput[]
  NOT?: Prisma.NoticeScalarWhereInput | Prisma.NoticeScalarWhereInput[]
  id?: Prisma.StringFilter<"Notice"> | string
  title?: Prisma.StringFilter<"Notice"> | string
  content?: Prisma.StringFilter<"Notice"> | string
  summary?: Prisma.StringNullableFilter<"Notice"> | string | null
  startDate?: Prisma.DateTimeFilter<"Notice"> | Date | string
  endDate?: Prisma.DateTimeFilter<"Notice"> | Date | string
  noticeType?: Prisma.EnumNoticeTypeFilter<"Notice"> | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFilter<"Notice"> | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFilter<"Notice"> | $Enums.NoticeStatus
  createdBy?: Prisma.StringFilter<"Notice"> | string
  approvedBy?: Prisma.StringNullableFilter<"Notice"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Notice"> | Date | string | null
  publishedBy?: Prisma.StringNullableFilter<"Notice"> | string | null
  publishedAt?: Prisma.DateTimeNullableFilter<"Notice"> | Date | string | null
  isUrgent?: Prisma.BoolFilter<"Notice"> | boolean
  emailNotification?: Prisma.BoolFilter<"Notice"> | boolean
  pushNotification?: Prisma.BoolFilter<"Notice"> | boolean
  whatsAppNotification?: Prisma.BoolFilter<"Notice"> | boolean
  smsNotification?: Prisma.BoolFilter<"Notice"> | boolean
  targetAudience?: Prisma.StringNullableListFilter<"Notice">
  organizationId?: Prisma.StringFilter<"Notice"> | string
  academicYearId?: Prisma.StringNullableFilter<"Notice"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Notice"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Notice"> | Date | string
}

export type NoticeCreateWithoutOrganizationInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentCreateNestedManyWithoutNoticeInput
  notifications?: Prisma.NotificationLogCreateNestedManyWithoutNoticeInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutNoticesInput
}

export type NoticeUncheckedCreateWithoutOrganizationInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  academicYearId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedCreateNestedManyWithoutNoticeInput
  notifications?: Prisma.NotificationLogUncheckedCreateNestedManyWithoutNoticeInput
}

export type NoticeCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.NoticeWhereUniqueInput
  create: Prisma.XOR<Prisma.NoticeCreateWithoutOrganizationInput, Prisma.NoticeUncheckedCreateWithoutOrganizationInput>
}

export type NoticeCreateManyOrganizationInputEnvelope = {
  data: Prisma.NoticeCreateManyOrganizationInput | Prisma.NoticeCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type NoticeUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.NoticeWhereUniqueInput
  update: Prisma.XOR<Prisma.NoticeUpdateWithoutOrganizationInput, Prisma.NoticeUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.NoticeCreateWithoutOrganizationInput, Prisma.NoticeUncheckedCreateWithoutOrganizationInput>
}

export type NoticeUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.NoticeWhereUniqueInput
  data: Prisma.XOR<Prisma.NoticeUpdateWithoutOrganizationInput, Prisma.NoticeUncheckedUpdateWithoutOrganizationInput>
}

export type NoticeUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.NoticeScalarWhereInput
  data: Prisma.XOR<Prisma.NoticeUpdateManyMutationInput, Prisma.NoticeUncheckedUpdateManyWithoutOrganizationInput>
}

export type NoticeCreateWithoutAttachmentsInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  notifications?: Prisma.NotificationLogCreateNestedManyWithoutNoticeInput
  organization: Prisma.OrganizationCreateNestedOneWithoutNoticesInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutNoticesInput
}

export type NoticeUncheckedCreateWithoutAttachmentsInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  organizationId: string
  academicYearId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  notifications?: Prisma.NotificationLogUncheckedCreateNestedManyWithoutNoticeInput
}

export type NoticeCreateOrConnectWithoutAttachmentsInput = {
  where: Prisma.NoticeWhereUniqueInput
  create: Prisma.XOR<Prisma.NoticeCreateWithoutAttachmentsInput, Prisma.NoticeUncheckedCreateWithoutAttachmentsInput>
}

export type NoticeUpsertWithoutAttachmentsInput = {
  update: Prisma.XOR<Prisma.NoticeUpdateWithoutAttachmentsInput, Prisma.NoticeUncheckedUpdateWithoutAttachmentsInput>
  create: Prisma.XOR<Prisma.NoticeCreateWithoutAttachmentsInput, Prisma.NoticeUncheckedCreateWithoutAttachmentsInput>
  where?: Prisma.NoticeWhereInput
}

export type NoticeUpdateToOneWithWhereWithoutAttachmentsInput = {
  where?: Prisma.NoticeWhereInput
  data: Prisma.XOR<Prisma.NoticeUpdateWithoutAttachmentsInput, Prisma.NoticeUncheckedUpdateWithoutAttachmentsInput>
}

export type NoticeUpdateWithoutAttachmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notifications?: Prisma.NotificationLogUpdateManyWithoutNoticeNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNoticesNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutNoticesNestedInput
}

export type NoticeUncheckedUpdateWithoutAttachmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notifications?: Prisma.NotificationLogUncheckedUpdateManyWithoutNoticeNestedInput
}

export type NoticeCreateWithoutNotificationsInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentCreateNestedManyWithoutNoticeInput
  organization: Prisma.OrganizationCreateNestedOneWithoutNoticesInput
  academicYear?: Prisma.AcademicYearCreateNestedOneWithoutNoticesInput
}

export type NoticeUncheckedCreateWithoutNotificationsInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  organizationId: string
  academicYearId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedCreateNestedManyWithoutNoticeInput
}

export type NoticeCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.NoticeWhereUniqueInput
  create: Prisma.XOR<Prisma.NoticeCreateWithoutNotificationsInput, Prisma.NoticeUncheckedCreateWithoutNotificationsInput>
}

export type NoticeUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<Prisma.NoticeUpdateWithoutNotificationsInput, Prisma.NoticeUncheckedUpdateWithoutNotificationsInput>
  create: Prisma.XOR<Prisma.NoticeCreateWithoutNotificationsInput, Prisma.NoticeUncheckedCreateWithoutNotificationsInput>
  where?: Prisma.NoticeWhereInput
}

export type NoticeUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.NoticeWhereInput
  data: Prisma.XOR<Prisma.NoticeUpdateWithoutNotificationsInput, Prisma.NoticeUncheckedUpdateWithoutNotificationsInput>
}

export type NoticeUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUpdateManyWithoutNoticeNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNoticesNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutNoticesNestedInput
}

export type NoticeUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedUpdateManyWithoutNoticeNestedInput
}

export type NoticeCreateManyAcademicYearInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoticeUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUpdateManyWithoutNoticeNestedInput
  notifications?: Prisma.NotificationLogUpdateManyWithoutNoticeNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNoticesNestedInput
}

export type NoticeUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedUpdateManyWithoutNoticeNestedInput
  notifications?: Prisma.NotificationLogUncheckedUpdateManyWithoutNoticeNestedInput
}

export type NoticeUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoticeCreateManyOrganizationInput = {
  id?: string
  title: string
  content: string
  summary?: string | null
  startDate: Date | string
  endDate: Date | string
  noticeType: $Enums.NoticeType
  priority?: $Enums.NoticePriority
  status?: $Enums.NoticeStatus
  createdBy: string
  approvedBy?: string | null
  approvedAt?: Date | string | null
  publishedBy?: string | null
  publishedAt?: Date | string | null
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: Prisma.NoticeCreatetargetAudienceInput | string[]
  academicYearId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoticeUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUpdateManyWithoutNoticeNestedInput
  notifications?: Prisma.NotificationLogUpdateManyWithoutNoticeNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneWithoutNoticesNestedInput
}

export type NoticeUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.NoticeAttachmentUncheckedUpdateManyWithoutNoticeNestedInput
  notifications?: Prisma.NotificationLogUncheckedUpdateManyWithoutNoticeNestedInput
}

export type NoticeUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  noticeType?: Prisma.EnumNoticeTypeFieldUpdateOperationsInput | $Enums.NoticeType
  priority?: Prisma.EnumNoticePriorityFieldUpdateOperationsInput | $Enums.NoticePriority
  status?: Prisma.EnumNoticeStatusFieldUpdateOperationsInput | $Enums.NoticeStatus
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isUrgent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  pushNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  whatsAppNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  smsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetAudience?: Prisma.NoticeUpdatetargetAudienceInput | string[]
  academicYearId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type NoticeCountOutputType
 */

export type NoticeCountOutputType = {
  attachments: number
  notifications: number
}

export type NoticeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachments?: boolean | NoticeCountOutputTypeCountAttachmentsArgs
  notifications?: boolean | NoticeCountOutputTypeCountNotificationsArgs
}

/**
 * NoticeCountOutputType without action
 */
export type NoticeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeCountOutputType
   */
  select?: Prisma.NoticeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * NoticeCountOutputType without action
 */
export type NoticeCountOutputTypeCountAttachmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoticeAttachmentWhereInput
}

/**
 * NoticeCountOutputType without action
 */
export type NoticeCountOutputTypeCountNotificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationLogWhereInput
}


export type NoticeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  summary?: boolean
  startDate?: boolean
  endDate?: boolean
  noticeType?: boolean
  priority?: boolean
  status?: boolean
  createdBy?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  publishedBy?: boolean
  publishedAt?: boolean
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachments?: boolean | Prisma.Notice$attachmentsArgs<ExtArgs>
  notifications?: boolean | Prisma.Notice$notificationsArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.Notice$academicYearArgs<ExtArgs>
  _count?: boolean | Prisma.NoticeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["notice"]>

export type NoticeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  summary?: boolean
  startDate?: boolean
  endDate?: boolean
  noticeType?: boolean
  priority?: boolean
  status?: boolean
  createdBy?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  publishedBy?: boolean
  publishedAt?: boolean
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.Notice$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["notice"]>

export type NoticeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  summary?: boolean
  startDate?: boolean
  endDate?: boolean
  noticeType?: boolean
  priority?: boolean
  status?: boolean
  createdBy?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  publishedBy?: boolean
  publishedAt?: boolean
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.Notice$academicYearArgs<ExtArgs>
}, ExtArgs["result"]["notice"]>

export type NoticeSelectScalar = {
  id?: boolean
  title?: boolean
  content?: boolean
  summary?: boolean
  startDate?: boolean
  endDate?: boolean
  noticeType?: boolean
  priority?: boolean
  status?: boolean
  createdBy?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  publishedBy?: boolean
  publishedAt?: boolean
  isUrgent?: boolean
  emailNotification?: boolean
  pushNotification?: boolean
  whatsAppNotification?: boolean
  smsNotification?: boolean
  targetAudience?: boolean
  organizationId?: boolean
  academicYearId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NoticeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "content" | "summary" | "startDate" | "endDate" | "noticeType" | "priority" | "status" | "createdBy" | "approvedBy" | "approvedAt" | "publishedBy" | "publishedAt" | "isUrgent" | "emailNotification" | "pushNotification" | "whatsAppNotification" | "smsNotification" | "targetAudience" | "organizationId" | "academicYearId" | "createdAt" | "updatedAt", ExtArgs["result"]["notice"]>
export type NoticeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachments?: boolean | Prisma.Notice$attachmentsArgs<ExtArgs>
  notifications?: boolean | Prisma.Notice$notificationsArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.Notice$academicYearArgs<ExtArgs>
  _count?: boolean | Prisma.NoticeCountOutputTypeDefaultArgs<ExtArgs>
}
export type NoticeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.Notice$academicYearArgs<ExtArgs>
}
export type NoticeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.Notice$academicYearArgs<ExtArgs>
}

export type $NoticePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Notice"
  objects: {
    attachments: Prisma.$NoticeAttachmentPayload<ExtArgs>[]
    notifications: Prisma.$NotificationLogPayload<ExtArgs>[]
    organization: Prisma.$OrganizationPayload<ExtArgs>
    academicYear: Prisma.$AcademicYearPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    content: string
    summary: string | null
    startDate: Date
    endDate: Date
    noticeType: $Enums.NoticeType
    priority: $Enums.NoticePriority
    status: $Enums.NoticeStatus
    createdBy: string
    approvedBy: string | null
    approvedAt: Date | null
    publishedBy: string | null
    publishedAt: Date | null
    isUrgent: boolean
    emailNotification: boolean
    pushNotification: boolean
    whatsAppNotification: boolean
    smsNotification: boolean
    targetAudience: string[]
    organizationId: string
    academicYearId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["notice"]>
  composites: {}
}

export type NoticeGetPayload<S extends boolean | null | undefined | NoticeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NoticePayload, S>

export type NoticeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NoticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NoticeCountAggregateInputType | true
  }

export interface NoticeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notice'], meta: { name: 'Notice' } }
  /**
   * Find zero or one Notice that matches the filter.
   * @param {NoticeFindUniqueArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NoticeFindUniqueArgs>(args: Prisma.SelectSubset<T, NoticeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Notice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NoticeFindUniqueOrThrowArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NoticeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NoticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Notice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeFindFirstArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NoticeFindFirstArgs>(args?: Prisma.SelectSubset<T, NoticeFindFirstArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Notice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeFindFirstOrThrowArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NoticeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NoticeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Notices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notices
   * const notices = await prisma.notice.findMany()
   * 
   * // Get first 10 Notices
   * const notices = await prisma.notice.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const noticeWithIdOnly = await prisma.notice.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NoticeFindManyArgs>(args?: Prisma.SelectSubset<T, NoticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Notice.
   * @param {NoticeCreateArgs} args - Arguments to create a Notice.
   * @example
   * // Create one Notice
   * const Notice = await prisma.notice.create({
   *   data: {
   *     // ... data to create a Notice
   *   }
   * })
   * 
   */
  create<T extends NoticeCreateArgs>(args: Prisma.SelectSubset<T, NoticeCreateArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Notices.
   * @param {NoticeCreateManyArgs} args - Arguments to create many Notices.
   * @example
   * // Create many Notices
   * const notice = await prisma.notice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NoticeCreateManyArgs>(args?: Prisma.SelectSubset<T, NoticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Notices and returns the data saved in the database.
   * @param {NoticeCreateManyAndReturnArgs} args - Arguments to create many Notices.
   * @example
   * // Create many Notices
   * const notice = await prisma.notice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Notices and only return the `id`
   * const noticeWithIdOnly = await prisma.notice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NoticeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NoticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Notice.
   * @param {NoticeDeleteArgs} args - Arguments to delete one Notice.
   * @example
   * // Delete one Notice
   * const Notice = await prisma.notice.delete({
   *   where: {
   *     // ... filter to delete one Notice
   *   }
   * })
   * 
   */
  delete<T extends NoticeDeleteArgs>(args: Prisma.SelectSubset<T, NoticeDeleteArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Notice.
   * @param {NoticeUpdateArgs} args - Arguments to update one Notice.
   * @example
   * // Update one Notice
   * const notice = await prisma.notice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NoticeUpdateArgs>(args: Prisma.SelectSubset<T, NoticeUpdateArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Notices.
   * @param {NoticeDeleteManyArgs} args - Arguments to filter Notices to delete.
   * @example
   * // Delete a few Notices
   * const { count } = await prisma.notice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NoticeDeleteManyArgs>(args?: Prisma.SelectSubset<T, NoticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notices
   * const notice = await prisma.notice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NoticeUpdateManyArgs>(args: Prisma.SelectSubset<T, NoticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notices and returns the data updated in the database.
   * @param {NoticeUpdateManyAndReturnArgs} args - Arguments to update many Notices.
   * @example
   * // Update many Notices
   * const notice = await prisma.notice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Notices and only return the `id`
   * const noticeWithIdOnly = await prisma.notice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NoticeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NoticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Notice.
   * @param {NoticeUpsertArgs} args - Arguments to update or create a Notice.
   * @example
   * // Update or create a Notice
   * const notice = await prisma.notice.upsert({
   *   create: {
   *     // ... data to create a Notice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Notice we want to update
   *   }
   * })
   */
  upsert<T extends NoticeUpsertArgs>(args: Prisma.SelectSubset<T, NoticeUpsertArgs<ExtArgs>>): Prisma.Prisma__NoticeClient<runtime.Types.Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Notices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeCountArgs} args - Arguments to filter Notices to count.
   * @example
   * // Count the number of Notices
   * const count = await prisma.notice.count({
   *   where: {
   *     // ... the filter for the Notices we want to count
   *   }
   * })
  **/
  count<T extends NoticeCountArgs>(
    args?: Prisma.Subset<T, NoticeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NoticeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Notice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NoticeAggregateArgs>(args: Prisma.Subset<T, NoticeAggregateArgs>): Prisma.PrismaPromise<GetNoticeAggregateType<T>>

  /**
   * Group by Notice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NoticeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NoticeGroupByArgs['orderBy'] }
      : { orderBy?: NoticeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NoticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Notice model
 */
readonly fields: NoticeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Notice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NoticeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  attachments<T extends Prisma.Notice$attachmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Notice$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NoticeAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  notifications<T extends Prisma.Notice$notificationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Notice$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  academicYear<T extends Prisma.Notice$academicYearArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Notice$academicYearArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Notice model
 */
export interface NoticeFieldRefs {
  readonly id: Prisma.FieldRef<"Notice", 'String'>
  readonly title: Prisma.FieldRef<"Notice", 'String'>
  readonly content: Prisma.FieldRef<"Notice", 'String'>
  readonly summary: Prisma.FieldRef<"Notice", 'String'>
  readonly startDate: Prisma.FieldRef<"Notice", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Notice", 'DateTime'>
  readonly noticeType: Prisma.FieldRef<"Notice", 'NoticeType'>
  readonly priority: Prisma.FieldRef<"Notice", 'NoticePriority'>
  readonly status: Prisma.FieldRef<"Notice", 'NoticeStatus'>
  readonly createdBy: Prisma.FieldRef<"Notice", 'String'>
  readonly approvedBy: Prisma.FieldRef<"Notice", 'String'>
  readonly approvedAt: Prisma.FieldRef<"Notice", 'DateTime'>
  readonly publishedBy: Prisma.FieldRef<"Notice", 'String'>
  readonly publishedAt: Prisma.FieldRef<"Notice", 'DateTime'>
  readonly isUrgent: Prisma.FieldRef<"Notice", 'Boolean'>
  readonly emailNotification: Prisma.FieldRef<"Notice", 'Boolean'>
  readonly pushNotification: Prisma.FieldRef<"Notice", 'Boolean'>
  readonly whatsAppNotification: Prisma.FieldRef<"Notice", 'Boolean'>
  readonly smsNotification: Prisma.FieldRef<"Notice", 'Boolean'>
  readonly targetAudience: Prisma.FieldRef<"Notice", 'String[]'>
  readonly organizationId: Prisma.FieldRef<"Notice", 'String'>
  readonly academicYearId: Prisma.FieldRef<"Notice", 'String'>
  readonly createdAt: Prisma.FieldRef<"Notice", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Notice", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Notice findUnique
 */
export type NoticeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * Filter, which Notice to fetch.
   */
  where: Prisma.NoticeWhereUniqueInput
}

/**
 * Notice findUniqueOrThrow
 */
export type NoticeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * Filter, which Notice to fetch.
   */
  where: Prisma.NoticeWhereUniqueInput
}

/**
 * Notice findFirst
 */
export type NoticeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * Filter, which Notice to fetch.
   */
  where?: Prisma.NoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notices to fetch.
   */
  orderBy?: Prisma.NoticeOrderByWithRelationInput | Prisma.NoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Notices.
   */
  cursor?: Prisma.NoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Notices.
   */
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[]
}

/**
 * Notice findFirstOrThrow
 */
export type NoticeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * Filter, which Notice to fetch.
   */
  where?: Prisma.NoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notices to fetch.
   */
  orderBy?: Prisma.NoticeOrderByWithRelationInput | Prisma.NoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Notices.
   */
  cursor?: Prisma.NoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Notices.
   */
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[]
}

/**
 * Notice findMany
 */
export type NoticeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * Filter, which Notices to fetch.
   */
  where?: Prisma.NoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notices to fetch.
   */
  orderBy?: Prisma.NoticeOrderByWithRelationInput | Prisma.NoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Notices.
   */
  cursor?: Prisma.NoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notices.
   */
  skip?: number
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[]
}

/**
 * Notice create
 */
export type NoticeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * The data needed to create a Notice.
   */
  data: Prisma.XOR<Prisma.NoticeCreateInput, Prisma.NoticeUncheckedCreateInput>
}

/**
 * Notice createMany
 */
export type NoticeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Notices.
   */
  data: Prisma.NoticeCreateManyInput | Prisma.NoticeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Notice createManyAndReturn
 */
export type NoticeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * The data used to create many Notices.
   */
  data: Prisma.NoticeCreateManyInput | Prisma.NoticeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Notice update
 */
export type NoticeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * The data needed to update a Notice.
   */
  data: Prisma.XOR<Prisma.NoticeUpdateInput, Prisma.NoticeUncheckedUpdateInput>
  /**
   * Choose, which Notice to update.
   */
  where: Prisma.NoticeWhereUniqueInput
}

/**
 * Notice updateMany
 */
export type NoticeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Notices.
   */
  data: Prisma.XOR<Prisma.NoticeUpdateManyMutationInput, Prisma.NoticeUncheckedUpdateManyInput>
  /**
   * Filter which Notices to update
   */
  where?: Prisma.NoticeWhereInput
  /**
   * Limit how many Notices to update.
   */
  limit?: number
}

/**
 * Notice updateManyAndReturn
 */
export type NoticeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * The data used to update Notices.
   */
  data: Prisma.XOR<Prisma.NoticeUpdateManyMutationInput, Prisma.NoticeUncheckedUpdateManyInput>
  /**
   * Filter which Notices to update
   */
  where?: Prisma.NoticeWhereInput
  /**
   * Limit how many Notices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Notice upsert
 */
export type NoticeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * The filter to search for the Notice to update in case it exists.
   */
  where: Prisma.NoticeWhereUniqueInput
  /**
   * In case the Notice found by the `where` argument doesn't exist, create a new Notice with this data.
   */
  create: Prisma.XOR<Prisma.NoticeCreateInput, Prisma.NoticeUncheckedCreateInput>
  /**
   * In case the Notice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NoticeUpdateInput, Prisma.NoticeUncheckedUpdateInput>
}

/**
 * Notice delete
 */
export type NoticeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
  /**
   * Filter which Notice to delete.
   */
  where: Prisma.NoticeWhereUniqueInput
}

/**
 * Notice deleteMany
 */
export type NoticeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Notices to delete
   */
  where?: Prisma.NoticeWhereInput
  /**
   * Limit how many Notices to delete.
   */
  limit?: number
}

/**
 * Notice.attachments
 */
export type Notice$attachmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoticeAttachment
   */
  select?: Prisma.NoticeAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NoticeAttachment
   */
  omit?: Prisma.NoticeAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeAttachmentInclude<ExtArgs> | null
  where?: Prisma.NoticeAttachmentWhereInput
  orderBy?: Prisma.NoticeAttachmentOrderByWithRelationInput | Prisma.NoticeAttachmentOrderByWithRelationInput[]
  cursor?: Prisma.NoticeAttachmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NoticeAttachmentScalarFieldEnum | Prisma.NoticeAttachmentScalarFieldEnum[]
}

/**
 * Notice.notifications
 */
export type Notice$notificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationLog
   */
  select?: Prisma.NotificationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationLog
   */
  omit?: Prisma.NotificationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationLogInclude<ExtArgs> | null
  where?: Prisma.NotificationLogWhereInput
  orderBy?: Prisma.NotificationLogOrderByWithRelationInput | Prisma.NotificationLogOrderByWithRelationInput[]
  cursor?: Prisma.NotificationLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationLogScalarFieldEnum | Prisma.NotificationLogScalarFieldEnum[]
}

/**
 * Notice.academicYear
 */
export type Notice$academicYearArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  where?: Prisma.AcademicYearWhereInput
}

/**
 * Notice without action
 */
export type NoticeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoticeInclude<ExtArgs> | null
}
