generator client {
  provider        = "prisma-client" // (or "prisma-client-js") 
  output          = "../generated/prisma"
  engineType      = "client"
  previewFeatures = ["fullTextSearchPostgres"]
}

// , "queryCompiler", "driverAdapters"

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PlanType {
  FREE
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum OrganizationType {
  SCHOOL
  COLLEGE
  COACHING_CLASS
  UNIVERSITY
  KINDERGARTEN
  TRAINING_INSTITUTE
  OTHER
}

model AcademicYear {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  name      String // "2024-25", "Batch Jan–May", etc.
  startDate DateTime
  endDate   DateTime

  type      YearType @default(ANNUAL)
  isCurrent Boolean  @default(false)

  // Meta Data
  description        String?
  complaints         AnonymousComplaint[]
  notices            Notice[]
  fees               Fee[]
  teachingAssignment TeachingAssignment[]
  studentAttendance  StudentAttendance[]
  academicCalendar   AcademicCalendar[]
  examSession        ExamSession[]
  leaves             Leave[]

  // FeeCategory
  // StudentDocument
  // ScheduledJob
  // NotificationLog
  // HallTicket
  // ReportCard
  // ExamResult
  // ExamEnrollment
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, name])
  @@index([organizationId, isCurrent])
}

enum YearType {
  ANNUAL // For Schools (April–March)
  SEMESTER // For Colleges/Universities
  TRIMESTER // For IB/International Schools
  BATCH // For Coaching/Training Programs
}

model Organization {
  id               String  @id @default(cuid())
  name             String?
  organizationSlug String  @unique
  organizationLogo String?

  contactEmail String? // admin or billing contact
  contactPhone String? // admin or billing contact
  website      String?

  isActive      Boolean   @default(true)
  isPaid        Boolean   @default(false)
  plan          PlanType  @default(FREE)
  planStartedAt DateTime?
  planExpiresAt DateTime?

  // Limits (can be used to restrict features based on plan)
  maxStudents      Int? // set limits per plan
  organizationType OrganizationType?

  users              User[]
  notices            Notice[]
  Student            Student[]
  StudentDocument    StudentDocument[]
  Grade              Grade[]
  Section            Section[]
  Fee                Fee[]
  FeeCategory        FeeCategory[]
  FeePayment         FeePayment[]
  AcademicCalendar   AcademicCalendar[]
  AnonymousComplaint AnonymousComplaint[]
  Teacher            Teacher[]
  Subject            Subject[]
  TeachingAssignment TeachingAssignment[]
  NotificationLog    NotificationLog[]
  AcademicYear       AcademicYear[]
  scheduledJob       ScheduledJob[]
  leaves             Leave[]

  createdBy  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  exam       Exam[]
  hallTicket HallTicket[]

  @@index([id])
  @@index([organizationSlug])
}

model User {
  id           String  @id @default(cuid())
  firstName    String
  lastName     String
  email        String  @unique
  password     String?
  profileImage String
  role         Role    @default(STUDENT)
  clerkId      String  @unique
  isActive     Boolean @default(true)

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  teacher Teacher?
  student Student?
  parent  Parent?

  feePayment FeePayment[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  notificationLog NotificationLog[]
  leave           Leave[]

  @@index([id, clerkId])
  @@index([organizationId])
}

model Student {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  firstName        String
  lastName         String
  middleName       String?
  motherName       String?
  fullName         String?
  dateOfBirth      DateTime
  profileImage     String?
  rollNumber       String   @unique
  phoneNumber      String
  whatsAppNumber   String
  email            String
  emergencyContact String
  gender           Gender

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String
  gradeId   String
  grade     Grade   @relation(fields: [gradeId], references: [id])

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  Fee               Fee[]
  parents           ParentStudent[]
  StudentAttendance StudentAttendance[]
  StudentDocument   StudentDocument[]
  // assignments    Assignment[]
  // complaints     Complaint[]

  NotificationLog NotificationLog[]
  reportCard      ReportCard[]
  hallTicket      HallTicket[]
  examResult      ExamResult[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  examEnrollment ExamEnrollment[]

  @@unique([organizationId, rollNumber])
  @@index([email]) // User lookup
  @@index([phoneNumber])
  @@index([rollNumber])
  @@index([gradeId])
  @@index([sectionId])
}

model Parent {
  id     String  @id @default(cuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  firstName      String
  lastName       String
  email          String @unique
  phoneNumber    String
  whatsAppNumber String

  students ParentStudent[] // change to children

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  NotificationLog NotificationLog[]
}

model ParentStudent {
  id           String   @id @default(cuid())
  relationship String
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  parent       Parent   @relation(fields: [parentId], references: [id])
  parentId     String
  isPrimary    Boolean? @default(false)
  // @@unique([studentId, parentId])

  @@index([relationship])
  @@index([parentId, studentId])
}

model Teacher {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  employeeCode String? @unique

  employmentStatus EmploymentStatus @default(ACTIVE)
  isActive         Boolean          @default(true)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  profile            TeacherProfile?
  teachingAssignment TeachingAssignment[]
  section            Section[]

  // salaries           Salary[]
  // model TeacherAttendance {}
  // model TeacherSalary {}
  @@index([userId, isActive, employmentStatus, organizationId])
}

model TeacherProfile {
  id        String  @id @default(cuid())
  teacherId String  @unique
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  contactEmail String
  contactPhone String
  address      String
  city         String?
  state        String?
  dateOfBirth  DateTime

  qualification     String
  experienceInYears Int
  resumeUrl         String?

  joinedAt            DateTime
  bio                 String?
  teachingPhilosophy  String?
  specializedSubjects String[]
  preferredGrades     String[]
  idProofUrl          String

  linkedinPortfolio String?
  languagesKnown    String[]
  certificateUrls   String[]
}

// 

model Grade {
  id                 String               @id @default(cuid())
  grade              String
  organizationId     String
  organization       Organization         @relation(fields: [organizationId], references: [id])
  students           Student[]
  section            Section[]
  TeachingAssignment TeachingAssignment[]

  @@index([organizationId, grade])
}

model Section {
  id             String       @id @default(cuid())
  name           String // e.g., "A", "B", "C"
  gradeId        String
  organizationId String
  grade          Grade        @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id])
  classTeacherId String?
  classTeacher   Teacher?     @relation(fields: [classTeacherId], references: [id])

  students           Student[] // Students in this section
  StudentAttendance  StudentAttendance[]
  TeachingAssignment TeachingAssignment[]

  @@unique([name, gradeId])
  @@index([organizationId, name, gradeId])
}

model Subject {
  id             String @id @default(cuid())
  name           String
  code           String @unique
  description    String
  organizationId String

  organization        Organization         @relation(fields: [organizationId], references: [id])
  teachingAssignments TeachingAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  exam      Exam[]

  @@index([organizationId, name, code])
}

model TeachingAssignment {
  id             String @id @default(cuid())
  teacherId      String
  subjectId      String
  gradeId        String
  sectionId      String
  organizationId String

  academicYear String?
  status       AssignmentStatus @default(PENDING)

  // ✅ Complete relations
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  subject      Subject      @relation(fields: [subjectId], references: [id])
  grade        Grade        @relation(fields: [gradeId], references: [id])
  section      Section      @relation(fields: [sectionId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?

  // ✅ Proper unique constraint
  @@unique([teacherId, subjectId, gradeId, sectionId, academicYearId])
  @@index([teacherId])
  @@index([subjectId, sectionId])
  @@index([organizationId])
}

enum AssignmentStatus {
  PENDING
  ASSIGNED
  COMPLETED
  INACTIVE
}

model StudentAttendance {
  id String @id @default(cuid())

  date       DateTime
  status     AttendanceStatus
  note       String?
  recordedBy String

  studentId String
  present   Boolean @default(false)

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])

  student        Student      @relation(fields: [studentId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date])
}

model StudentDocument {
  id String @id @default(cuid())

  type        DocumentType
  fileName    String?
  fileSize    Int? // (in bytes)
  fileType    String?
  documentUrl String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  verified   Boolean   @default(false)
  verifiedBy String? // Clerk ID or Admin ID who verified
  verifiedAt DateTime?

  rejected     Boolean   @default(false)
  rejectedBy   String? // Clerk ID or Admin ID who verified
  rejectedAt   DateTime?
  rejectReason String?

  uploadedBy String? // Clerk ID or Student/Parent ID (depends on who uploads)
  uploadedAt DateTime @default(now())

  note String?

  isDeleted Boolean   @default(false) // Soft delete
  deletedAt DateTime?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([organizationId])
  @@index([studentId, type])
  @@index([verified, uploadedAt])
}

enum DocumentType {
  AADHAAR
  PAN
  PASSPORT
  BIRTH_CERTIFICATE
  TRANSFER_CERTIFICATE
  BANK_PASSBOOK
  PARENT_ID
  AGREEMENT
}

model Fee {
  id             String       @id @default(cuid())
  totalFee       Float
  paidAmount     Float        @default(0)
  pendingAmount  Float?
  dueDate        DateTime
  status         FeeStatus    @default(UNPAID)
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id])
  feeCategoryId  String
  feeCategory    FeeCategory  @relation(fields: [feeCategoryId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  payments       FeePayment[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String

  @@index([studentId])
  @@index([status])
  @@index([dueDate])
  @@index([organizationId])
}

model FeePayment {
  id             String        @id @default(cuid())
  feeId          String
  fee            Fee           @relation(fields: [feeId], references: [id])
  amount         Float
  status         PaymentStatus @default(UNPAID)
  paymentMethod  PaymentMethod
  paymentDate    DateTime      @default(now())
  receiptNumber  String        @unique
  note           String?
  transactionId  String? // From payment gateway (UPI ref, bank ref, etc.)
  payerId        String
  payer          User          @relation(fields: [payerId], references: [id])
  platformFee    Float?
  recordedBy     String? // Admin ID (optional, if needed) 
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([feeId])
  @@index([paymentMethod])
  @@index([paymentDate])
  @@index([payerId])
  @@index([status])
  @@index([organizationId])
}

enum PaymentMethod {
  CASH
  UPI
  CARD
  BANK_TRANSFER
  CHEQUE
  ONLINE
}

enum PaymentStatus {
  PENDING
  UNPAID
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

model FeeCategory {
  id             String       @id @default(cuid())
  name           String // e.g., "Yearly Fee", "Exam Fee", "Lab Fee", etc.
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  fees           Fee[]
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@unique([name, organizationId])
  @@index([organizationId])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  // Create After Stable Version
  //   EXCUSED_ABSENT = 'EXCUSED_ABSENT',
  // UNEXCUSED_ABSENT = 'UNEXCUSED_ABSENT',
  // EARLY_DISMISSAL = 'EARLY_DISMISSAL',
}

model AcademicCalendar {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // Event details
  name      String // e.g., "Diwali Break", "Emergency Closure", "Tech Fest"
  startDate DateTime // Start date of the holiday or event
  endDate   DateTime // End date of the holiday or event

  // Event categorization
  type           CalendarEventType // PLANNED, SUDDEN, INSTITUTION_SPECIFIC
  reason         String? // e.g., "Festival", "Weather Emergency", "Exam Prep"
  isRecurring    Boolean           @default(false) // Whether the event repeats annually
  createdBy      String // ID of the user who created the entry (admin/teacher)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  academicYear   AcademicYear?     @relation(fields: [academicYearId], references: [id])
  academicYearId String?

  @@unique([organizationId, startDate, endDate]) // Prevent duplicate entries for the same date range
  @@index([organizationId, startDate, endDate]) // Optimize queries for date ranges
}

enum CalendarEventType {
  PLANNED // Standard holidays (e.g., festivals, semester breaks)
  SUDDEN // Emergency closures (e.g., weather, strikes)
  INSTITUTION_SPECIFIC // Custom events (e.g., college fests, coaching workshops)
}

model AnonymousComplaint {
  id            String          @id @default(cuid())
  trackingId    String          @unique
  category      String
  severity      Severity        @default(MEDIUM)
  subject       String
  description   String
  evidenceUrls  String[]
  submittedAt   DateTime        @default(now())
  currentStatus ComplaintStatus @default(PENDING)

  organizationId          String
  organization            Organization              @relation(fields: [organizationId], references: [id])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  ComplaintStatusTimeline ComplaintStatusTimeline[]
  academicYear            AcademicYear?             @relation(fields: [academicYearId], references: [id])
  academicYearId          String?
}

model ComplaintStatusTimeline {
  id          String             @id @default(cuid())
  complaintId String
  note        String?
  status      ComplaintStatus    @default(PENDING)
  changedBy   String?
  complaint   AnonymousComplaint @relation(fields: [complaintId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([complaintId])
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplaintStatus {
  PENDING
  RESOLVED
  CLOSED
  UNDER_REVIEW
  INVESTIGATING
  REJECTED
}

model Notice {
  id String @id @default(cuid())

  title   String
  content String
  summary String?

  startDate DateTime
  endDate   DateTime

  noticeType NoticeType
  priority   NoticePriority @default(MEDIUM)
  status     NoticeStatus   @default(DRAFT)

  createdBy   String // Teacher userId
  approvedBy  String? // Admin userId
  approvedAt  DateTime?
  publishedBy String? // Who finally published (could be admin)
  publishedAt DateTime?

  isUrgent             Boolean @default(false)
  emailNotification    Boolean @default(true)
  pushNotification     Boolean @default(false)
  whatsAppNotification Boolean @default(false)
  smsNotification      Boolean @default(false)

  targetAudience String[] // String[] Array of Target Audience
  attachments    NoticeAttachment[]
  notifications  NotificationLog[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String

  // @@fulltext([title, content]) // For search

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, status, noticeType])
  @@index([noticeType, priority, status])
  @@index([startDate, endDate])
}

model NoticeAttachment {
  id       String @id @default(cuid())
  noticeId String
  notice   Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)

  fileName   String
  fileUrl    String
  fileType   String // pdf, image/png, docx, etc.
  fileSize   Int // in bytes
  publicId   String
  uploadedAt DateTime @default(now())
}

enum NoticeType {
  GENERAL // plain circular
  TRIP
  EVENT // Annual Day, Sports Day
  EXAM // Mid-term, practical, board
  HOLIDAY // Diwali break, 
  DEADLINE // Fee last date, form submission
  TIMETABLE // revised class schedule
  RESULT // published marks / report-cards
}

enum NoticePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NoticeStatus {
  DRAFT
  PENDING_REVIEW // When publishAt is set
  PUBLISHED
  REJECTED
  EXPIRED
  ARCHIVED
}

model NotificationLog {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // WHO received
  userId    String? // optional Clerk/User ID (can be teacher, parent, etc.)
  user      User?    @relation(fields: [userId], references: [id])
  parentId  String? // optional: if linked to a parent directly`
  parent    Parent?  @relation(fields: [parentId], references: [id])
  studentId String? // optional: useful for linking fee/attendance alerts
  student   Student? @relation(fields: [studentId], references: [id])

  channel          NotificationChannel
  status           NotificationStatus  @default(SENT)
  notificationType NotificationType

  notice   Notice? @relation(fields: [noticeId], references: [id])
  noticeId String?

  // Delivery details
  errorMessage String?
  retryCount   Int     @default(0)
  maxRetries   Int     @default(3)
  units        Int     @default(1) // optional, 1 per message, or set for bulk
  cost         Float   @default(0)

  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, sentAt])
  @@index([channel, status])
  @@index([userId])
}

enum NotificationType {
  NOTICE
  FEE_REMINDER
  ATTENDANCE_ALERT
  DOCUMENT_REQUEST
  GENERAL_ANNOUNCEMENT
  Exam
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

model ScheduledJob {
  id          String                @id @default(cuid())
  data        Json
  type        scheduledJobType
  scheduledAt DateTime
  executedAt  DateTime? // when processing started
  completedAt DateTime? // when finished
  channels    NotificationChannel[]

  status String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED

  result Json?
  error  String?

  createdBy      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId, status])
  @@index([scheduledAt])
}

enum scheduledJobType {
  FEE_REMINDER
  NOTICE
  EXAM
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
  RETIRED
  TERMINATED
  CONTRACTUAL
  PROBATION
  SUSPENDED
}

enum EvaluationType {
  TEST
  EXAM
  ASSIGNMENT
  PROJECT
  PRACTICAL
  QUIZ
  ORAL
  INTERNAL
  FINAL
  OTHER
}

enum ExamStatus {
  UPCOMING //SCHEDULED   // ✅ Better than UPCOMING
  LIVE
  COMPLETED
  CANCELLED
  //  POSTPONED   // Rescheduled
}

enum StudentExamStatus {
  ENROLLED // Default for all students
  ATTENDED // Appeared for exam
  ABSENT // Didn't appear
  EXEMPT // Medical leave, etc.
  DISQUALIFIED // Disciplinary action
}

enum ExamMode {
  ONLINE
  OFFLINE
  PRACTICAL
  VIVA
  TAKE_HOME
}

model ExamSession {
  id             String       @id @default(cuid())
  title          String // "Midterm 2024"
  description    String?
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  startDate      DateTime // Session Start
  endDate        DateTime // Session End  
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  exams       Exam[]
  reportCards ReportCard[]
  hallTickets HallTicket[]

  @@unique([academicYearId, title])
  @@index([academicYearId])
  @@index([startDate, endDate])
}

model Exam {
  id          String  @id @default(cuid())
  title       String // "Maths Midterm"
  description String?

  examSessionId      String
  examSession        ExamSession      @relation(fields: [examSessionId], references: [id])
  subjectId          String
  subject            Subject          @relation(fields: [subjectId], references: [id])
  gradeId            String
  sectionId          String
  // batchId           String? // Only For coaching batches (link to Batch model if exists) 
  organizationId     String
  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  maxMarks           Float
  passingMarks       Float? // Optional threshold for pass/fail
  weightage          Float?
  evaluationType     EvaluationType
  mode               ExamMode
  status             ExamStatus       @default(UPCOMING)
  instructions       String?
  durationInMinutes  Int? // Minutes
  venueMapUrl        String?
  venue              String?
  isResultsPublished Boolean          @default(false)
  supervisors        String[] // Separate by comma 
  startDate          DateTime // Specific exam start (overrides session if needed)
  endDate            DateTime
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  hallTickets        HallTicket[]
  examResult         ExamResult[]
  examEnrollment     ExamEnrollment[]

  // @@unique([examSessionId, subjectId, gradeId, sectionId])
  @@unique([examSessionId, gradeId, sectionId, subjectId, title])
  @@index([organizationId, status])
  @@index([gradeId, sectionId])
  // @@index([batchId])
  @@index([startDate, endDate])
}

model ExamEnrollment {
  id              String            @id @default(cuid())
  studentId       String
  examId          String
  status          StudentExamStatus @default(ENROLLED)
  enrolledAt      DateTime          @default(now())
  exemptionReason String? // Medical leave, etc.

  student Student @relation(fields: [studentId], references: [id])
  exam    Exam    @relation(fields: [examId], references: [id])

  @@unique([studentId, examId])
}

model ExamResult {
  id        String @id @default(cuid())
  studentId String
  examId    String

  obtainedMarks      Float?
  percentage         Float? // Auto-calculated
  gradeLabel         String?
  remarks            String?
  isPassed           Boolean?
  isAbsent           Boolean  @default(false)
  isResultsPublished Boolean  @default(false)

  student Student @relation(fields: [studentId], references: [id])
  exam    Exam    @relation(fields: [examId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
}

model HallTicket {
  id            String  @id @default(cuid())
  studentId     String
  examId        String?
  examSessionId String?

  pdfUrl         String // S3 link with student details, QR code
  qrCode         String?
  generatedAt    DateTime  @default(now())
  downloadedAt   DateTime? // Track downloads
  expiryDate     DateTime? // Post-exam expiry
  organizationId String

  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam         Exam?        @relation(fields: [examId], references: [id], onDelete: Cascade)
  examSession  ExamSession? @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([studentId, examId])
  @@index([studentId, generatedAt])
  @@index([organizationId])
}

model ReportCard {
  id            String @id @default(cuid())
  studentId     String
  examSessionId String
  // Academic Performance
  totalMaxMarks Float // Sum of all exam max marks
  totalObtained Float // Sum of obtained marks
  percentage    Float // Auto-calculated
  cgpa          Float? // If applicable

  // Results
  overallGrade String // A+, A, B+, etc.
  resultStatus ResultStatus
  classRank    Int? // Rank in class
  gradeRank    Int? // Rank in grade

  // Additional Details
  attendancePercent Float? // Overall attendance
  conductGrade      String? // A, B, C for conduct
  remarks           String?
  principalRemarks  String?

  rank        Int? // Overall session rank
  pdfUrl      String? // Generated PDF (e.g., S3 link)
  generatedAt DateTime? // When PDF was created
  student     Student     @relation(fields: [studentId], references: [id])
  examSession ExamSession @relation(fields: [examSessionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, examSessionId])
}

enum ResultStatus {
  PASSED
  FAILED
  PROMOTED // Promoted to next class despite failure
  COMPARTMENT // Failed in some subjects
  WITHHELD // Results withheld due to issues
}

// FeedBackCollection
// "TeacherFeedback",          // Missing - for teachers to give student feedback
// "MonthlyAttendanceReport",  // Missing - AI-generated monthly summary of attendance
// "FeedbackCategory",         // Optional - categorize feedback (e.g., Academics, Behavior)
// "Assignment",            // Not in schema - could be needed for academic tracking
// "AssignmentSubmission"    // Not in schema - could be needed for academic tracking
// LeaveManagement
// Lead Management
// Courses and Batches
// Certificate Generator
// Amazon Alexa  Integration

// Teacher  : Salary / Payout, Leave Management, Assigned Leads , Profile , Write FeedBack , Give Assignments, Fill Exam Mark , Bio Attendance , 
// Parent : View Fee Receipts , Download Receipts , Pay Fees , Parent Profile , SMS Notification , WhatsApp Notification , Setting Page 
// Student : View Fee Receipts , Download Receipts , Pay Fees , Student Profile , SMS Notification , WhatsApp Notification , Setting Page , Dashboard
// Admin : ALl Reports / AI Generated  View Fee Receipts , Download Receipts , Phonepay Payment Gateway Money , Admin Profile , SMS Notification , WhatsApp Notification , Setting Page , Organization Management

// Student Bulk Import 

// Payout : Corporate Bank Account || IFC CODE  Branch || Verify by consorn bank || 

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  SICK
  CASUAL
  ANNUAL
  EMERGENCY
  OTHER
  VACATION
  MATERNITY
  PATERNITY
  UNPAID
  STUDY
}

model Leave {
  id               String   @id @default(cuid())
  startDate        DateTime
  endDate          DateTime
  totalDays        Int
  reason           String
  type             String // New
  emergencyContact String // Phone number during leave

  currentStatus LeaveStatus @default(PENDING)
  approvedBy    String?
  approvedAt    DateTime?
  rejectedNote  String?
  userId        String // userId (could be parent, teacher, student)

  appliedBy User @relation(fields: [userId], references: [id])

  statusTimeline LeaveStatusTimeline[] // Every approval/reject event

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String

  @@index([userId, currentStatus, organizationId, academicYearId])
}

model LeaveStatusTimeline {
  id        String      @id @default(cuid())
  leaveId   String
  leave     Leave       @relation(fields: [leaveId], references: [id])
  status    LeaveStatus @default(PENDING)
  note      String?
  changedBy String? // userId of who made the change
  changedAt DateTime    @default(now())

  @@index([leaveId])
}
