// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PlanType {
  FREE
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum OrganizationType {
  SCHOOL
  COLLEGE
  OTHER
  COACHING_CLASS
}

model Organization {
  id               String  @id @default(cuid())
  name             String?
  organizationSlug String  @unique
  organizationLogo String?

  contactEmail String? // admin or billing contact
  contactPhone String?
  website      String?

  isActive      Boolean   @default(true)
  isPaid        Boolean   @default(false)
  plan          PlanType  @default(FREE)
  planStartedAt DateTime?
  planExpiresAt DateTime?

  // Limits (can be used to restrict features based on plan)
  maxStudents      Int? // set limits per plan
  organizationType OrganizationType? // set limits per plan

  users              User[]
  notices            Notice[]
  Student            Student[]
  Grade              Grade[]
  Section            Section[]
  Fee                Fee[]
  FeeCategory        FeeCategory[]
  FeePayment         FeePayment[]
  AcademicCalendar   AcademicCalendar[]
  AnonymousComplaint AnonymousComplaint[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Teacher   Teacher[]

  @@index([id])
  @@index([organizationSlug])
}

model User {
  id           String  @id @default(cuid())
  firstName    String
  lastName     String
  email        String  @unique
  password     String?
  profileImage String
  role         Role    @default(STUDENT)
  clerkId      String  @unique
  isActive     Boolean @default(true)

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  teacher Teacher?
  student Student?
  parent  Parent?

  FeePayment FeePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, clerkId])
  @@index([organizationId])
}

model Teacher {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  qualification     String
  isActive          Boolean          @default(true)
  experienceInYears Int
  subjects          String[]
  assignedGrades    String[]
  assignedSections  String[]
  employmentStatus  EmploymentStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  firstName        String
  lastName         String
  middleName       String?
  motherName       String?
  fullName         String?
  dateOfBirth      DateTime
  profileImage     String?
  rollNumber       String   @unique
  phoneNumber      String
  whatsAppNumber   String
  email            String
  emergencyContact String
  gender           Gender

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String
  gradeId   String
  grade     Grade   @relation(fields: [gradeId], references: [id])

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  Fee               Fee[]
  ParentStudent     ParentStudent[]
  StudentAttendance StudentAttendance[]
  StudentDocument   StudentDocument[]
  // performances   Performance[]
  // assignments    Assignment[]
  // complaints     Complaint[]
  // marks          Mark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email]) // User lookup
  @@index([phoneNumber])
  @@index([rollNumber])
  @@index([gradeId])
  @@index([sectionId])
}

model Parent {
  id     String  @id @default(cuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  firstName      String
  lastName       String
  email          String @unique
  phoneNumber    String
  whatsAppNumber String

  students ParentStudent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParentStudent {
  id           String   @id @default(cuid())
  relationship String
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  parent       Parent   @relation(fields: [parentId], references: [id])
  parentId     String
  isPrimary    Boolean? @default(false)

  @@index([relationship])
  @@index([parentId, studentId])
}

model StudentAttendance {
  id         String           @id @default(cuid())
  studentId  String
  present    Boolean          @default(false)
  date       DateTime
  status     AttendanceStatus
  note       String?
  recordedBy String
  sectionId  String
  section    Section          @relation(fields: [sectionId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
}

model StudentDocument {
  id          String       @id @default(cuid())
  type        DocumentType
  documentUrl String
  student     Student      @relation(fields: [studentId], references: [id])
  studentId   String

  verified   Boolean   @default(false)
  verifiedBy String? // Clerk ID or Admin ID who verified
  verifiedAt DateTime?

  uploadedBy String? // Clerk ID or Student/Parent ID (depends on who uploads)
  uploadedAt DateTime @default(now())

  note     String? // Optional note from uploader or verifier
  fileName String? // For user-friendly display
  fileSize Int? // (in bytes)
  fileType String? // "application/pdf", "image/png", etc.

  isDeleted Boolean   @default(false) // Soft delete
  deletedAt DateTime?
}

model Grade {
  id             String       @id @default(cuid())
  grade          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[]
  // subjects       Subject[]
  section        Section[]
}

model Section {
  id                String              @id @default(cuid())
  name              String // e.g., "A", "B", "C"
  gradeId           String
  organizationId    String
  grade             Grade               @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  organization      Organization        @relation(fields: [organizationId], references: [id])
  students          Student[] // Students in this section
  StudentAttendance StudentAttendance[]
}

model Fee {
  id             String       @id @default(cuid())
  totalFee       Float
  paidAmount     Float        @default(0)
  pendingAmount  Float?
  dueDate        DateTime
  status         FeeStatus    @default(UNPAID)
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id])
  feeCategoryId  String
  feeCategory    FeeCategory  @relation(fields: [feeCategoryId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  FeePayments    FeePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([status])
  @@index([dueDate])
}

model FeePayment {
  id             String        @id @default(cuid())
  amountPaid     Float
  paymentDate    DateTime      @default(now())
  paymentMethod  PaymentMethod
  receiptNumber  String        @unique
  note           String?
  transactionId  String? // From payment gateway (UPI ref, bank ref, etc.)
  payerId        String
  payer          User          @relation(fields: [payerId], references: [id])
  feeId          String
  fee            Fee           @relation(fields: [feeId], references: [id])
  platformFee    Float?
  status         PaymentStatus @default(UNPAID)
  recordedBy     String? // Admin ID (optional, if needed) 
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([feeId])
  @@index([paymentMethod])
  @@index([paymentDate])
  @@index([payerId])
}

model FeeCategory {
  id             String       @id @default(cuid())
  name           String // e.g., "Yearly Fee", "Exam Fee", "Lab Fee", etc.
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  fees           Fee[]
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model AcademicCalendar {
  id             String            @id @default(cuid())
  organizationId String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  name           String // e.g., "Diwali Break", "Emergency Closure", "Tech Fest"
  startDate      DateTime // Start date of the holiday or event
  endDate        DateTime // End date of the holiday or event
  type           CalendarEventType // PLANNED, SUDDEN, INSTITUTION_SPECIFIC
  reason         String? // e.g., "Festival", "Weather Emergency", "Exam Prep"
  isRecurring    Boolean           @default(false) // Whether the event repeats annually
  createdBy      String // ID of the user who created the entry (admin/teacher)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@unique([organizationId, startDate, endDate]) // Prevent duplicate entries for the same date range
  @@index([organizationId, startDate, endDate]) // Optimize queries for date ranges
}

enum CalendarEventType {
  PLANNED // Standard holidays (e.g., festivals, semester breaks)
  SUDDEN // Emergency closures (e.g., weather, strikes)
  INSTITUTION_SPECIFIC // Custom events (e.g., college fests, coaching workshops)
}

model AnonymousComplaint {
  id            String          @id @default(cuid())
  trackingId    String          @unique
  category      String
  severity      Severity        @default(MEDIUM)
  subject       String
  description   String
  evidenceUrls  String[]
  submittedAt   DateTime        @default(now())
  currentStatus ComplaintStatus @default(PENDING)

  organizationId          String
  organization            Organization              @relation(fields: [organizationId], references: [id])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  ComplaintStatusTimeline ComplaintStatusTimeline[]
}

model ComplaintStatusTimeline {
  id          String             @id @default(cuid())
  complaintId String
  note        String?
  status      ComplaintStatus    @default(PENDING)
  changedBy   String?
  complaint   AnonymousComplaint @relation(fields: [complaintId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([complaintId])
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplaintStatus {
  PENDING
  RESOLVED
  CLOSED
  UNDER_REVIEW
  INVESTIGATING
  REJECTED
}

model Notice {
  id         String   @id @default(uuid())
  noticeType String
  title      String
  startDate  DateTime
  endDate    DateTime
  content    String

  isNoticeApproved Boolean @default(false)
  isDraft          Boolean @default(false)
  isPublished      Boolean @default(false)

  emailNotification    Boolean @default(true)
  pushNotification     Boolean @default(false)
  WhatsAppNotification Boolean @default(false)
  smsNotification      Boolean @default(false)

  targetAudience String[] // String[] Array of Target Audience
  attachments    Json?    @default("[]")

  publishedBy    String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum DocumentType {
  AADHAAR
  PAN
  PASSPORT
  BIRTH_CERTIFICATE
  TRANSFER_CERTIFICATE
  BANK_PASSBOOK
  PARENT_ID
  AGREEMENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PaymentMethod {
  CASH
  UPI
  CARD
  BANK_TRANSFER
  CHEQUE
  ONLINE
}

enum PaymentStatus {
  UNPAID
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum EmploymentStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
  RETIRED
  TERMINATED
  CONTRACTUAL
  PROBATION
  SUSPENDED
}

// "TeacherFeedback",          // Missing - for teachers to give student feedback
// "MonthlyAttendanceReport",  // Missing - AI-generated monthly summary of attendance
// "FeedbackCategory",         // Optional - categorize feedback (e.g., Academics, Behavior)
// "Assignment",            // Not in schema - could be needed for academic tracking
// AssignmentSubmission    // Not in schema - could be needed for academic tracking
// "Performance",           // Mentioned in comment but not implemented
// "Marks",                 // Mentioned in comment but not implemented
// Subject 
