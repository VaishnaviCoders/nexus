generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(cuid())
  firstName      String
  lastName       String
  email          String        @unique
  profileImage   String
  role           Role          @default(STUDENT)
  clerkId        String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@index([id, clerkId])
}

model Student {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  middleName       String?
  motherName       String?
  fullName         String?
  dateOfBirth      DateTime
  profileImage     String?
  rollNumber       String            @unique
  address          String
  phoneNumber      String
  email            String
  parents          ParentStudent[]
  emergencyContact String
  section          Section?          @relation(fields: [sectionId], references: [id])
  sectionId        String?
  gradeId          String
  grade            Grade             @relation(fields: [gradeId], references: [id])
  documents        StudentDocument[]

  // attendance     Attendance[]
  // fees           Fee[]
  // performances   Performance[]
  // assignments    Assignment[]
  // complaints     Complaint[]
  // marks          Mark[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Fee            Fee[]

  @@index([id, rollNumber])
}

model Fee {
  id          String      @id @default(cuid())
  totalFee    Float
  paidAmount  Float       @default(0)
  dueDate     DateTime
  status      FeeStatus   @default(UNPAID)
  studentId   String
  student     Student     @relation(fields: [studentId], references: [id])
  categoryId  String
  feeCategory FeeCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FeeCategory {
  id          String   @id @default(cuid())
  name        String // e.g., "Yearly Fee", "Exam Fee", "Lab Fee", etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fees        Fee[]
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

model ParentStudent {
  id           String   @id @default(cuid())
  parentName   String
  parentEmail  String
  parentPhone  String
  relationship String
  Student      Student? @relation(fields: [studentId], references: [id])
  studentId    String?
}

model StudentDocument {
  id          String       @id @default(cuid())
  type        DocumentType
  documentUrl String
  student     Student      @relation(fields: [studentId], references: [id])
  studentId   String
  verified    Boolean      @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
}

model Grade {
  id             String       @id @default(cuid())
  grade          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[]
  // subjects       Subject[]
  section        Section[]
}

model Section {
  id             String       @id @default(cuid())
  name           String // e.g., "A", "B", "C"
  gradeId        String
  organizationId String
  grade          Grade        @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[] // Students in this section
}

model Organization {
  id               String    @id @default(cuid())
  name             String
  organizationSlug String    @unique
  organizationLogo String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isActive         Boolean   @default(true)
  isPaid           Boolean   @default(false)
  users            User[]
  notices          Notice[]
  Student          Student[]
  Grade            Grade[]
  Section          Section[]
}

model Notice {
  id         String   @id @default(uuid())
  noticeType String
  title      String
  startDate  DateTime
  endDate    DateTime
  content    String

  isNoticeApproved Boolean @default(false)
  isDraft          Boolean @default(false)
  isPublished      Boolean @default(false)

  emailNotification    Boolean @default(true)
  pushNotification     Boolean @default(false)
  WhatsAppNotification Boolean @default(false)

  targetAudience String[] // String[] Array of Target Audience
  attachments    Json?

  publishedBy    String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum DocumentType {
  AADHAAR
  PAN
  PASSPORT
  BIRTH_CERTIFICATE
  TRANSFER_CERTIFICATE
  BANK_PASSBOOK
  PARENT_ID
  AGREEMENT
}
